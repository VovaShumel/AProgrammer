
AProgrammer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d62c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800d738  0800d738  0001d738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbf4  0800dbf4  00020234  2**0
                  CONTENTS
  4 .ARM          00000000  0800dbf4  0800dbf4  00020234  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dbf4  0800dbf4  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbf4  0800dbf4  0001dbf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbf8  0800dbf8  0001dbf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800dbfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002070  20000234  0800de30  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022a4  0800de30  000222a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb33  00000000  00000000  0002025d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043fd  00000000  00000000  0003bd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  00040190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  00041400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b78c  00000000  00000000  000425a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018de2  00000000  00000000  0005dd2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b929  00000000  00000000  00076b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102437  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c38  00000000  00000000  0010248c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000234 	.word	0x20000234
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d720 	.word	0x0800d720

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000238 	.word	0x20000238
 8000148:	0800d720 	.word	0x0800d720

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpun>:
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__aeabi_dcmpun+0x10>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d10a      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x20>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d102      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a18:	f04f 0000 	mov.w	r0, #0
 8000a1c:	4770      	bx	lr
 8000a1e:	f04f 0001 	mov.w	r0, #1
 8000a22:	4770      	bx	lr

08000a24 <__aeabi_d2iz>:
 8000a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d215      	bcs.n	8000a5a <__aeabi_d2iz+0x36>
 8000a2e:	d511      	bpl.n	8000a54 <__aeabi_d2iz+0x30>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d912      	bls.n	8000a60 <__aeabi_d2iz+0x3c>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	bf18      	it	ne
 8000a50:	4240      	negne	r0, r0
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d105      	bne.n	8000a6c <__aeabi_d2iz+0x48>
 8000a60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a64:	bf08      	it	eq
 8000a66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <CNC_StartTask_ab>:
//------------------------------------------------------------------------------
// CNC LEVEL routines
//------------------------------------------------------------------------------

void CNC_StartTask_ab(int a, int b)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  //cnc2.TaskFinished = 0;
  for (int i=a; i<=b; i++)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	e016      	b.n	8000ab2 <CNC_StartTask_ab+0x3e>
  {
	  cnc2.m[i].TaskFinished = 0;
 8000a84:	4910      	ldr	r1, [pc, #64]	; (8000ac8 <CNC_StartTask_ab+0x54>)
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	00db      	lsls	r3, r3, #3
 8000a8c:	1a9b      	subs	r3, r3, r2
 8000a8e:	00db      	lsls	r3, r3, #3
 8000a90:	440b      	add	r3, r1
 8000a92:	3318      	adds	r3, #24
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
	  cnc2.m[i].stage        = DRIVE_IDLED;
 8000a98:	490b      	ldr	r1, [pc, #44]	; (8000ac8 <CNC_StartTask_ab+0x54>)
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	00db      	lsls	r3, r3, #3
 8000aa0:	1a9b      	subs	r3, r3, r2
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	440b      	add	r3, r1
 8000aa6:	3314      	adds	r3, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
  for (int i=a; i<=b; i++)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	dde4      	ble.n	8000a84 <CNC_StartTask_ab+0x10>
  }
}
 8000aba:	bf00      	nop
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	200004b0 	.word	0x200004b0

08000acc <CNC_Init>:
//------------------------------------------------------------------------------
// USER LEVEL routines
//------------------------------------------------------------------------------

void CNC_Init()
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
    // Init signals
  
    for (int i=0; i<MC; i++)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	e029      	b.n	8000b2c <CNC_Init+0x60>
    {
        RESET_DOUT(cnc.m[i].dir_port,  cnc.m[i].dir_pin);
 8000ad8:	4aa4      	ldr	r2, [pc, #656]	; (8000d6c <CNC_Init+0x2a0>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2134      	movs	r1, #52	; 0x34
 8000ade:	fb01 f303 	mul.w	r3, r1, r3
 8000ae2:	4413      	add	r3, r2
 8000ae4:	6818      	ldr	r0, [r3, #0]
 8000ae6:	4aa1      	ldr	r2, [pc, #644]	; (8000d6c <CNC_Init+0x2a0>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2134      	movs	r1, #52	; 0x34
 8000aec:	fb01 f303 	mul.w	r3, r1, r3
 8000af0:	4413      	add	r3, r2
 8000af2:	3304      	adds	r3, #4
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	2200      	movs	r2, #0
 8000af8:	4619      	mov	r1, r3
 8000afa:	f003 fef0 	bl	80048de <HAL_GPIO_WritePin>
        RESET_DOUT(cnc.m[i].step_port, cnc.m[i].step_pin);
 8000afe:	4a9b      	ldr	r2, [pc, #620]	; (8000d6c <CNC_Init+0x2a0>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2134      	movs	r1, #52	; 0x34
 8000b04:	fb01 f303 	mul.w	r3, r1, r3
 8000b08:	4413      	add	r3, r2
 8000b0a:	3308      	adds	r3, #8
 8000b0c:	6818      	ldr	r0, [r3, #0]
 8000b0e:	4a97      	ldr	r2, [pc, #604]	; (8000d6c <CNC_Init+0x2a0>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2134      	movs	r1, #52	; 0x34
 8000b14:	fb01 f303 	mul.w	r3, r1, r3
 8000b18:	4413      	add	r3, r2
 8000b1a:	330c      	adds	r3, #12
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	4619      	mov	r1, r3
 8000b22:	f003 fedc 	bl	80048de <HAL_GPIO_WritePin>
    for (int i=0; i<MC; i++)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	ddd2      	ble.n	8000ad8 <CNC_Init+0xc>
    }
    
    // Enable drivers
    if (cnc.enable_port)  RESET_DOUT(cnc.enable_port, cnc.enable_pin);
 8000b32:	4b8e      	ldr	r3, [pc, #568]	; (8000d6c <CNC_Init+0x2a0>)
 8000b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d008      	beq.n	8000b4c <CNC_Init+0x80>
 8000b3a:	4b8c      	ldr	r3, [pc, #560]	; (8000d6c <CNC_Init+0x2a0>)
 8000b3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000b3e:	4a8b      	ldr	r2, [pc, #556]	; (8000d6c <CNC_Init+0x2a0>)
 8000b40:	f8b2 106c 	ldrh.w	r1, [r2, #108]	; 0x6c
 8000b44:	2200      	movs	r2, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f003 fec9 	bl	80048de <HAL_GPIO_WritePin>

    // Init vars    
    for (int i=0; i<MC; i++)   
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	e100      	b.n	8000d54 <CNC_Init+0x288>
    {
      // convert from mm to pulses
      cnc2.m[i].x_max = cnc.m[i].x_max * cnc.m[i].mm / 100;
 8000b52:	4a86      	ldr	r2, [pc, #536]	; (8000d6c <CNC_Init+0x2a0>)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	2134      	movs	r1, #52	; 0x34
 8000b58:	fb01 f303 	mul.w	r3, r1, r3
 8000b5c:	4413      	add	r3, r2
 8000b5e:	3324      	adds	r3, #36	; 0x24
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4982      	ldr	r1, [pc, #520]	; (8000d6c <CNC_Init+0x2a0>)
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	2034      	movs	r0, #52	; 0x34
 8000b68:	fb00 f202 	mul.w	r2, r0, r2
 8000b6c:	440a      	add	r2, r1
 8000b6e:	3228      	adds	r2, #40	; 0x28
 8000b70:	6812      	ldr	r2, [r2, #0]
 8000b72:	fb02 f303 	mul.w	r3, r2, r3
 8000b76:	4a7e      	ldr	r2, [pc, #504]	; (8000d70 <CNC_Init+0x2a4>)
 8000b78:	fb82 1203 	smull	r1, r2, r2, r3
 8000b7c:	1152      	asrs	r2, r2, #5
 8000b7e:	17db      	asrs	r3, r3, #31
 8000b80:	1ad1      	subs	r1, r2, r3
 8000b82:	487c      	ldr	r0, [pc, #496]	; (8000d74 <CNC_Init+0x2a8>)
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	4613      	mov	r3, r2
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	1a9b      	subs	r3, r3, r2
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	4403      	add	r3, r0
 8000b90:	6019      	str	r1, [r3, #0]
      cnc2.m[i].Anom  = cnc.m[i].Anom  * cnc.m[i].mm / 100;
 8000b92:	4a76      	ldr	r2, [pc, #472]	; (8000d6c <CNC_Init+0x2a0>)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2134      	movs	r1, #52	; 0x34
 8000b98:	fb01 f303 	mul.w	r3, r1, r3
 8000b9c:	4413      	add	r3, r2
 8000b9e:	332c      	adds	r3, #44	; 0x2c
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4972      	ldr	r1, [pc, #456]	; (8000d6c <CNC_Init+0x2a0>)
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	2034      	movs	r0, #52	; 0x34
 8000ba8:	fb00 f202 	mul.w	r2, r0, r2
 8000bac:	440a      	add	r2, r1
 8000bae:	3228      	adds	r2, #40	; 0x28
 8000bb0:	6812      	ldr	r2, [r2, #0]
 8000bb2:	fb02 f303 	mul.w	r3, r2, r3
 8000bb6:	4a6e      	ldr	r2, [pc, #440]	; (8000d70 <CNC_Init+0x2a4>)
 8000bb8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bbc:	1152      	asrs	r2, r2, #5
 8000bbe:	17db      	asrs	r3, r3, #31
 8000bc0:	1ad1      	subs	r1, r2, r3
 8000bc2:	486c      	ldr	r0, [pc, #432]	; (8000d74 <CNC_Init+0x2a8>)
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	4403      	add	r3, r0
 8000bd0:	3308      	adds	r3, #8
 8000bd2:	6019      	str	r1, [r3, #0]
      cnc2.m[i].V0    = (MATH_TYPE)sqrt(cnc2.m[i].Anom / 2); // v0 = sqrt(a/2)
 8000bd4:	4967      	ldr	r1, [pc, #412]	; (8000d74 <CNC_Init+0x2a8>)
 8000bd6:	683a      	ldr	r2, [r7, #0]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	00db      	lsls	r3, r3, #3
 8000bdc:	1a9b      	subs	r3, r3, r2
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	440b      	add	r3, r1
 8000be2:	3308      	adds	r3, #8
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	0fda      	lsrs	r2, r3, #31
 8000be8:	4413      	add	r3, r2
 8000bea:	105b      	asrs	r3, r3, #1
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fbff 	bl	80003f0 <__aeabi_i2d>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	4610      	mov	r0, r2
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f00c fcb9 	bl	800d570 <sqrt>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	460b      	mov	r3, r1
 8000c02:	4610      	mov	r0, r2
 8000c04:	4619      	mov	r1, r3
 8000c06:	f7ff ff0d 	bl	8000a24 <__aeabi_d2iz>
 8000c0a:	4601      	mov	r1, r0
 8000c0c:	4859      	ldr	r0, [pc, #356]	; (8000d74 <CNC_Init+0x2a8>)
 8000c0e:	683a      	ldr	r2, [r7, #0]
 8000c10:	4613      	mov	r3, r2
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	1a9b      	subs	r3, r3, r2
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	4403      	add	r3, r0
 8000c1a:	3304      	adds	r3, #4
 8000c1c:	6019      	str	r1, [r3, #0]

//      for (int j=0; j<CNC_SPEED_LAST; j++)
        cnc2.m[i].Vnom/*[j]*/  = cnc.m[i].Vnom/*[j]*/ * cnc.m[i].mm / 100;
 8000c1e:	4a53      	ldr	r2, [pc, #332]	; (8000d6c <CNC_Init+0x2a0>)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	2134      	movs	r1, #52	; 0x34
 8000c24:	fb01 f303 	mul.w	r3, r1, r3
 8000c28:	4413      	add	r3, r2
 8000c2a:	3330      	adds	r3, #48	; 0x30
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	494f      	ldr	r1, [pc, #316]	; (8000d6c <CNC_Init+0x2a0>)
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	2034      	movs	r0, #52	; 0x34
 8000c34:	fb00 f202 	mul.w	r2, r0, r2
 8000c38:	440a      	add	r2, r1
 8000c3a:	3228      	adds	r2, #40	; 0x28
 8000c3c:	6812      	ldr	r2, [r2, #0]
 8000c3e:	fb02 f303 	mul.w	r3, r2, r3
 8000c42:	4a4b      	ldr	r2, [pc, #300]	; (8000d70 <CNC_Init+0x2a4>)
 8000c44:	fb82 1203 	smull	r1, r2, r2, r3
 8000c48:	1152      	asrs	r2, r2, #5
 8000c4a:	17db      	asrs	r3, r3, #31
 8000c4c:	1ad1      	subs	r1, r2, r3
 8000c4e:	4849      	ldr	r0, [pc, #292]	; (8000d74 <CNC_Init+0x2a8>)
 8000c50:	683a      	ldr	r2, [r7, #0]
 8000c52:	4613      	mov	r3, r2
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	1a9b      	subs	r3, r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	4403      	add	r3, r0
 8000c5c:	330c      	adds	r3, #12
 8000c5e:	6019      	str	r1, [r3, #0]
           
      cnc2.m[i].x = 0;
 8000c60:	4944      	ldr	r1, [pc, #272]	; (8000d74 <CNC_Init+0x2a8>)
 8000c62:	683a      	ldr	r2, [r7, #0]
 8000c64:	4613      	mov	r3, r2
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	1a9b      	subs	r3, r3, r2
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	440b      	add	r3, r1
 8000c6e:	3320      	adds	r3, #32
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
      cnc2.m[i].stage = DRIVE_IDLED;
 8000c74:	493f      	ldr	r1, [pc, #252]	; (8000d74 <CNC_Init+0x2a8>)
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	1a9b      	subs	r3, r3, r2
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	440b      	add	r3, r1
 8000c82:	3314      	adds	r3, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
      cnc2.m[i].TaskFinished = 1;
 8000c88:	493a      	ldr	r1, [pc, #232]	; (8000d74 <CNC_Init+0x2a8>)
 8000c8a:	683a      	ldr	r2, [r7, #0]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	1a9b      	subs	r3, r3, r2
 8000c92:	00db      	lsls	r3, r3, #3
 8000c94:	440b      	add	r3, r1
 8000c96:	3318      	adds	r3, #24
 8000c98:	2201      	movs	r2, #1
 8000c9a:	601a      	str	r2, [r3, #0]
      cnc2.m[i].ToStop = 0;
 8000c9c:	4935      	ldr	r1, [pc, #212]	; (8000d74 <CNC_Init+0x2a8>)
 8000c9e:	683a      	ldr	r2, [r7, #0]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	1a9b      	subs	r3, r3, r2
 8000ca6:	00db      	lsls	r3, r3, #3
 8000ca8:	440b      	add	r3, r1
 8000caa:	331c      	adds	r3, #28
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
      
      _TIM_DISABLE(   cnc.m[i].tim);
 8000cb0:	4a2e      	ldr	r2, [pc, #184]	; (8000d6c <CNC_Init+0x2a0>)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	2134      	movs	r1, #52	; 0x34
 8000cb6:	fb01 f303 	mul.w	r3, r1, r3
 8000cba:	4413      	add	r3, r2
 8000cbc:	3310      	adds	r3, #16
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	6a1a      	ldr	r2, [r3, #32]
 8000cc2:	f241 1311 	movw	r3, #4369	; 0x1111
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d121      	bne.n	8000d10 <CNC_Init+0x244>
 8000ccc:	4a27      	ldr	r2, [pc, #156]	; (8000d6c <CNC_Init+0x2a0>)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	2134      	movs	r1, #52	; 0x34
 8000cd2:	fb01 f303 	mul.w	r3, r1, r3
 8000cd6:	4413      	add	r3, r2
 8000cd8:	3310      	adds	r3, #16
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6a1a      	ldr	r2, [r3, #32]
 8000cde:	f240 4344 	movw	r3, #1092	; 0x444
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d113      	bne.n	8000d10 <CNC_Init+0x244>
 8000ce8:	4a20      	ldr	r2, [pc, #128]	; (8000d6c <CNC_Init+0x2a0>)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	2134      	movs	r1, #52	; 0x34
 8000cee:	fb01 f303 	mul.w	r3, r1, r3
 8000cf2:	4413      	add	r3, r2
 8000cf4:	3310      	adds	r3, #16
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	491c      	ldr	r1, [pc, #112]	; (8000d6c <CNC_Init+0x2a0>)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	2034      	movs	r0, #52	; 0x34
 8000d00:	fb00 f303 	mul.w	r3, r0, r3
 8000d04:	440b      	add	r3, r1
 8000d06:	3310      	adds	r3, #16
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f022 0201 	bic.w	r2, r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]
      _TIM_CLEAR_FLAG(cnc.m[i].tim, TIM_SR_UIF);
 8000d10:	4a16      	ldr	r2, [pc, #88]	; (8000d6c <CNC_Init+0x2a0>)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	2134      	movs	r1, #52	; 0x34
 8000d16:	fb01 f303 	mul.w	r3, r1, r3
 8000d1a:	4413      	add	r3, r2
 8000d1c:	3310      	adds	r3, #16
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f06f 0201 	mvn.w	r2, #1
 8000d24:	611a      	str	r2, [r3, #16]
      _TIM_ENABLE_IT( cnc.m[i].tim, TIM_DIER_UIE);
 8000d26:	4a11      	ldr	r2, [pc, #68]	; (8000d6c <CNC_Init+0x2a0>)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	2134      	movs	r1, #52	; 0x34
 8000d2c:	fb01 f303 	mul.w	r3, r1, r3
 8000d30:	4413      	add	r3, r2
 8000d32:	3310      	adds	r3, #16
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	490c      	ldr	r1, [pc, #48]	; (8000d6c <CNC_Init+0x2a0>)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	2034      	movs	r0, #52	; 0x34
 8000d3e:	fb00 f303 	mul.w	r3, r0, r3
 8000d42:	440b      	add	r3, r1
 8000d44:	3310      	adds	r3, #16
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f042 0201 	orr.w	r2, r2, #1
 8000d4c:	60da      	str	r2, [r3, #12]
    for (int i=0; i<MC; i++)   
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	3301      	adds	r3, #1
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	f77f aefb 	ble.w	8000b52 <CNC_Init+0x86>
    }
    
//    cnc2.check_x = 1;
    cnc2.speed = CNC_SPEED_NORMAL;
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <CNC_Init+0x2a8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000528 	.word	0x20000528
 8000d70:	51eb851f 	.word	0x51eb851f
 8000d74:	200004b0 	.word	0x200004b0

08000d78 <CNC_Start_GoTo_ab>:
  return 0;
}
////////////////////////////////////////////////////////////////////////////////

void CNC_Start_GoTo_ab(int a, int b, TCoord * c)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  for (int i=a; i<=b; i++)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	e022      	b.n	8000dd0 <CNC_Start_GoTo_ab+0x58>
//    {
//      if      (c[i] > max               ) c[i] = max;
//      else if (c[i] < -cnc.m[i].home_ofs) c[i] = -cnc.m[i].home_ofs;
//    }

    cnc2.m[i].dest = c[i-a] * cnc.m[i].mm / 100;
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4913      	ldr	r1, [pc, #76]	; (8000de8 <CNC_Start_GoTo_ab+0x70>)
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	2034      	movs	r0, #52	; 0x34
 8000d9e:	fb00 f202 	mul.w	r2, r0, r2
 8000da2:	440a      	add	r2, r1
 8000da4:	3228      	adds	r2, #40	; 0x28
 8000da6:	6812      	ldr	r2, [r2, #0]
 8000da8:	fb02 f303 	mul.w	r3, r2, r3
 8000dac:	4a0f      	ldr	r2, [pc, #60]	; (8000dec <CNC_Start_GoTo_ab+0x74>)
 8000dae:	fb82 1203 	smull	r1, r2, r2, r3
 8000db2:	1152      	asrs	r2, r2, #5
 8000db4:	17db      	asrs	r3, r3, #31
 8000db6:	1ad1      	subs	r1, r2, r3
 8000db8:	480d      	ldr	r0, [pc, #52]	; (8000df0 <CNC_Start_GoTo_ab+0x78>)
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	1a9b      	subs	r3, r3, r2
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	4403      	add	r3, r0
 8000dc6:	3310      	adds	r3, #16
 8000dc8:	6019      	str	r1, [r3, #0]
  for (int i=a; i<=b; i++)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	ddd8      	ble.n	8000d8a <CNC_Start_GoTo_ab+0x12>
  }
//  cnc2.check_x = 1;
  CNC_StartTask_ab (a,b);
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	68f8      	ldr	r0, [r7, #12]
 8000ddc:	f7ff fe4a 	bl	8000a74 <CNC_StartTask_ab>
}
 8000de0:	bf00      	nop
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000528 	.word	0x20000528
 8000dec:	51eb851f 	.word	0x51eb851f
 8000df0:	200004b0 	.word	0x200004b0

08000df4 <CNC_Start_GoTo_i>:
{
	CNC_Start_GoTo_ab (0, MC-1, &c[0]);
}

void CNC_Start_GoTo_i(int i, TCoord * c)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
	CNC_Start_GoTo_ab (i,i, c);
 8000dfe:	683a      	ldr	r2, [r7, #0]
 8000e00:	6879      	ldr	r1, [r7, #4]
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ffb8 	bl	8000d78 <CNC_Start_GoTo_ab>
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <CNC_SetSpeed_i>:
//  cnc2.speed = cnc_speed;
//}
////////////////////////////////////////////////////////////////////////////////

void CNC_SetSpeed_i(int i, int speed)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
    cnc.m[i].Vnom = speed;
 8000e1a:	4a17      	ldr	r2, [pc, #92]	; (8000e78 <CNC_SetSpeed_i+0x68>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2134      	movs	r1, #52	; 0x34
 8000e20:	fb01 f303 	mul.w	r3, r1, r3
 8000e24:	4413      	add	r3, r2
 8000e26:	3330      	adds	r3, #48	; 0x30
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	601a      	str	r2, [r3, #0]
    cnc2.m[i].Vnom/*[cnc_speed]*/  = cnc.m[i].Vnom/*[cnc_speed]*/ * cnc.m[i].mm / 100;
 8000e2c:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <CNC_SetSpeed_i+0x68>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2134      	movs	r1, #52	; 0x34
 8000e32:	fb01 f303 	mul.w	r3, r1, r3
 8000e36:	4413      	add	r3, r2
 8000e38:	3330      	adds	r3, #48	; 0x30
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	490e      	ldr	r1, [pc, #56]	; (8000e78 <CNC_SetSpeed_i+0x68>)
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	2034      	movs	r0, #52	; 0x34
 8000e42:	fb00 f202 	mul.w	r2, r0, r2
 8000e46:	440a      	add	r2, r1
 8000e48:	3228      	adds	r2, #40	; 0x28
 8000e4a:	6812      	ldr	r2, [r2, #0]
 8000e4c:	fb02 f303 	mul.w	r3, r2, r3
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <CNC_SetSpeed_i+0x6c>)
 8000e52:	fb82 1203 	smull	r1, r2, r2, r3
 8000e56:	1152      	asrs	r2, r2, #5
 8000e58:	17db      	asrs	r3, r3, #31
 8000e5a:	1ad1      	subs	r1, r2, r3
 8000e5c:	4808      	ldr	r0, [pc, #32]	; (8000e80 <CNC_SetSpeed_i+0x70>)
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	4613      	mov	r3, r2
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	1a9b      	subs	r3, r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	4403      	add	r3, r0
 8000e6a:	330c      	adds	r3, #12
 8000e6c:	6019      	str	r1, [r3, #0]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	20000528 	.word	0x20000528
 8000e7c:	51eb851f 	.word	0x51eb851f
 8000e80:	200004b0 	.word	0x200004b0

08000e84 <CNC_Stop>:
////////////////////////////////////////////////////////////////////////////////

void CNC_Stop()
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
	for (int i=0; i<MC; i++)  cnc2.m[i].ToStop = 1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	e00c      	b.n	8000eaa <CNC_Stop+0x26>
 8000e90:	4917      	ldr	r1, [pc, #92]	; (8000ef0 <CNC_Stop+0x6c>)
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	4613      	mov	r3, r2
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	1a9b      	subs	r3, r3, r2
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	440b      	add	r3, r1
 8000e9e:	331c      	adds	r3, #28
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	ddef      	ble.n	8000e90 <CNC_Stop+0xc>

	while(!CNC_TaskFinished()) CNC_Update();
 8000eb0:	e001      	b.n	8000eb6 <CNC_Stop+0x32>
 8000eb2:	f000 fb01 	bl	80014b8 <CNC_Update>
 8000eb6:	f000 f859 	bl	8000f6c <CNC_TaskFinished>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d0f8      	beq.n	8000eb2 <CNC_Stop+0x2e>

	for (int i=0; i<MC; i++)  cnc2.m[i].ToStop = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	e00c      	b.n	8000ee0 <CNC_Stop+0x5c>
 8000ec6:	490a      	ldr	r1, [pc, #40]	; (8000ef0 <CNC_Stop+0x6c>)
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	1a9b      	subs	r3, r3, r2
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	440b      	add	r3, r1
 8000ed4:	331c      	adds	r3, #28
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	ddef      	ble.n	8000ec6 <CNC_Stop+0x42>
}
 8000ee6:	bf00      	nop
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200004b0 	.word	0x200004b0

08000ef4 <CNC_Stop_i>:
////////////////////////////////////////////////////////////////////////////////

void CNC_Stop_i(int i)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  cnc2.m[i].ToStop = 1;
 8000efc:	490f      	ldr	r1, [pc, #60]	; (8000f3c <CNC_Stop_i+0x48>)
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	4613      	mov	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	1a9b      	subs	r3, r3, r2
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	440b      	add	r3, r1
 8000f0a:	331c      	adds	r3, #28
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]

  while(!CNC_TaskFinished_i(i)) ; //CNC_Update_i(i);
 8000f10:	bf00      	nop
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 f84c 	bl	8000fb0 <CNC_TaskFinished_i>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d0f9      	beq.n	8000f12 <CNC_Stop_i+0x1e>

  cnc2.m[i].ToStop = 0;
 8000f1e:	4907      	ldr	r1, [pc, #28]	; (8000f3c <CNC_Stop_i+0x48>)
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4613      	mov	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	1a9b      	subs	r3, r3, r2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	440b      	add	r3, r1
 8000f2c:	331c      	adds	r3, #28
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200004b0 	.word	0x200004b0

08000f40 <CNC_ResetCoord>:
  return cnc2.m[i].x * 100 / cnc.m[i].mm;
}
////////////////////////////////////////////////////////////////////////////////

void CNC_ResetCoord(int i)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	cnc2.m[i].x = 0;
 8000f48:	4907      	ldr	r1, [pc, #28]	; (8000f68 <CNC_ResetCoord+0x28>)
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	1a9b      	subs	r3, r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	440b      	add	r3, r1
 8000f56:	3320      	adds	r3, #32
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	200004b0 	.word	0x200004b0

08000f6c <CNC_TaskFinished>:
////////////////////////////////////////////////////////////////////////////////

int CNC_TaskFinished()
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
    // check Task Finishing for all motors
	int finished = 1;
 8000f72:	2301      	movs	r3, #1
 8000f74:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MC; i++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	e00e      	b.n	8000f9a <CNC_TaskFinished+0x2e>
		finished &= cnc2.m[i].TaskFinished;
 8000f7c:	490b      	ldr	r1, [pc, #44]	; (8000fac <CNC_TaskFinished+0x40>)
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	4613      	mov	r3, r2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	1a9b      	subs	r3, r3, r2
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	440b      	add	r3, r1
 8000f8a:	3318      	adds	r3, #24
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	4013      	ands	r3, r2
 8000f92:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MC; i++)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	dded      	ble.n	8000f7c <CNC_TaskFinished+0x10>

    return finished;
 8000fa0:	687b      	ldr	r3, [r7, #4]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	200004b0 	.word	0x200004b0

08000fb0 <CNC_TaskFinished_i>:
////////////////////////////////////////////////////////////////////////////////

int CNC_TaskFinished_i(int i)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  return cnc2.m[i].TaskFinished;
 8000fb8:	4906      	ldr	r1, [pc, #24]	; (8000fd4 <CNC_TaskFinished_i+0x24>)
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	1a9b      	subs	r3, r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	440b      	add	r3, r1
 8000fc6:	3318      	adds	r3, #24
 8000fc8:	681b      	ldr	r3, [r3, #0]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	200004b0 	.word	0x200004b0

08000fd8 <CNC_Del>:

////////////////////////////////////////////////////////////////////////////////
#define _TIM_ENABLED(__HANDLE__) ((__HANDLE__)->CR1 & (TIM_CR1_CEN))

void CNC_Del()
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
//  volatile int s = 0;
//  for (int i=0; i<cnc.pulse_width; i++) s += i;
//  return s;
	_TIM_ENABLE(cnc.del_tim);
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <CNC_Del+0x30>)
 8000fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <CNC_Del+0x30>)
 8000fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fe6:	f042 0201 	orr.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
	while (cnc.del_tim->CR1 & TIM_CR1_CEN); // wait until timer is off
 8000fec:	bf00      	nop
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <CNC_Del+0x30>)
 8000ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1f8      	bne.n	8000fee <CNC_Del+0x16>
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000528 	.word	0x20000528

0800100c <CNC_ISR>:

void CNC_ISR(int i) // duration: 6..14 us
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08e      	sub	sp, #56	; 0x38
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  MOTOR_TypeDef  * m  = &cnc.m[i];
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2234      	movs	r2, #52	; 0x34
 8001018:	fb02 f303 	mul.w	r3, r2, r3
 800101c:	4aa3      	ldr	r2, [pc, #652]	; (80012ac <CNC_ISR+0x2a0>)
 800101e:	4413      	add	r3, r2
 8001020:	61fb      	str	r3, [r7, #28]
  MOTOR2_TypeDef * m2 = &cnc2.m[i];
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	1a9b      	subs	r3, r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	4aa0      	ldr	r2, [pc, #640]	; (80012b0 <CNC_ISR+0x2a4>)
 800102e:	4413      	add	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
  
  // temp vars used for speedup ISR
  DRIVE_STAGE_TypeDef stage = m2->stage;
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	7d1b      	ldrb	r3, [r3, #20]
 8001036:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MATH_TYPE a    = m2->a;
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
  MATH_TYPE v    = m2->v;
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  MATH_TYPE V0   = m2->V0;
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	617b      	str	r3, [r7, #20]
  TCoord    x    = m2->x;
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
  TCoord    dest = m2->dest;
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
  
  m2->cycles++;
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	635a      	str	r2, [r3, #52]	; 0x34

  // calc and send pulse (set STEP pin)	

  // condition for switching to DECELERATING
  if (stage != DRIVE_IDLED) // if moving
 8001062:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001066:	2b00      	cmp	r3, #0
 8001068:	d037      	beq.n	80010da <CNC_ISR+0xce>
  {
      if (cnc2.m[i].ToStop)
 800106a:	4991      	ldr	r1, [pc, #580]	; (80012b0 <CNC_ISR+0x2a4>)
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	1a9b      	subs	r3, r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	440b      	add	r3, r1
 8001078:	331c      	adds	r3, #28
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <CNC_ISR+0x7c>
      {
        stage = DRIVE_DECELERATING;
 8001080:	2303      	movs	r3, #3
 8001082:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001086:	e028      	b.n	80010da <CNC_ISR+0xce>
      }
      else
      {
        TCoord pts = (TCoord)((sqr(v) - sqr(V0)) / (2*a)); // Pulses_To_Stop (decelerating point) = (v-v0)^2 / a
 8001088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800108a:	fb03 f203 	mul.w	r2, r3, r3
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	fb03 f303 	mul.w	r3, r3, r3
 8001094:	1ad2      	subs	r2, r2, r3
 8001096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fb92 f3f3 	sdiv	r3, r2, r3
 800109e:	613b      	str	r3, [r7, #16]

        if (((a > 0) && (x >= dest - pts)) || // if moving forward  && decelerating point has been reached
 80010a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	dd05      	ble.n	80010b2 <CNC_ISR+0xa6>
 80010a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010ae:	429a      	cmp	r2, r3
 80010b0:	da08      	bge.n	80010c4 <CNC_ISR+0xb8>
 80010b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	da09      	bge.n	80010cc <CNC_ISR+0xc0>
            ((a < 0) && (x <= dest - pts)))   // if moving backward && decelerating point has been reached
 80010b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010c0:	429a      	cmp	r2, r3
 80010c2:	dc03      	bgt.n	80010cc <CNC_ISR+0xc0>
        {
            stage = DRIVE_DECELERATING;
 80010c4:	2303      	movs	r3, #3
 80010c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80010ca:	e006      	b.n	80010da <CNC_ISR+0xce>
        }
        else if (stage != DRIVE_RUNNING) 
 80010cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d002      	beq.n	80010da <CNC_ISR+0xce>
        {
            // if coordinate has been updated and decelerating point is already not reached...
            // then try to accelerate
            stage = DRIVE_ACCELERATING;
 80010d4:	2301      	movs	r3, #1
 80010d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
      }
  }
  
  // condition for switching to RUNNING
  if (stage == DRIVE_ACCELERATING)
 80010da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d115      	bne.n	800110e <CNC_ISR+0x102>
  {
        if (((v > 0) && (v > m2->v_nom)) ||
 80010e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	dd04      	ble.n	80010f2 <CNC_ISR+0xe6>
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010ee:	429a      	cmp	r2, r3
 80010f0:	dc07      	bgt.n	8001102 <CNC_ISR+0xf6>
 80010f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	da0a      	bge.n	800110e <CNC_ISR+0x102>
            ((v < 0) && (v < m2->v_nom)))
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010fe:	429a      	cmp	r2, r3
 8001100:	da05      	bge.n	800110e <CNC_ISR+0x102>
        {
                // speed has been reached
                v = m2->v_nom;
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
                stage = DRIVE_RUNNING;
 8001108:	2302      	movs	r3, #2
 800110a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
  }
  
  // condition for switching to IDLE
  if ((x == dest) && (_ABS(v) < 2*(a / V0))) // if dest point has been reached and speed is low enough (< 2*V0)
 800110e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001112:	429a      	cmp	r2, r3
 8001114:	d10e      	bne.n	8001134 <CNC_ISR+0x128>
 8001116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001118:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800111c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001120:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	fb91 f3f3 	sdiv	r3, r1, r3
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	429a      	cmp	r2, r3
 800112c:	da02      	bge.n	8001134 <CNC_ISR+0x128>
  {
        stage = DRIVE_IDLED;
 800112e:	2300      	movs	r3, #0
 8001130:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  //  calc new speed
  if (stage == DRIVE_ACCELERATING)
 8001134:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001138:	2b01      	cmp	r3, #1
 800113a:	d11c      	bne.n	8001176 <CNC_ISR+0x16a>
  {
#ifdef USE_FLOAT
    v = v + a /_ABS(v); // v = v0 + a*t = v0 + a*(1/v), 1/v - period of last pulse (in seconds)
#else    
    v = v + (a*1000/_ABS(v) + (a>0 ? 500 : -500)) / 1000; // v = v0 + a*t = v0 + a*(1/v), 1/v - period of last pulse (in seconds)
 800113c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800113e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001142:	fb02 f203 	mul.w	r2, r2, r3
 8001146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001148:	2b00      	cmp	r3, #0
 800114a:	bfb8      	it	lt
 800114c:	425b      	neglt	r3, r3
 800114e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001154:	2a00      	cmp	r2, #0
 8001156:	dd02      	ble.n	800115e <CNC_ISR+0x152>
 8001158:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800115c:	e000      	b.n	8001160 <CNC_ISR+0x154>
 800115e:	4a55      	ldr	r2, [pc, #340]	; (80012b4 <CNC_ISR+0x2a8>)
 8001160:	4413      	add	r3, r2
 8001162:	4a55      	ldr	r2, [pc, #340]	; (80012b8 <CNC_ISR+0x2ac>)
 8001164:	fb82 1203 	smull	r1, r2, r2, r3
 8001168:	1192      	asrs	r2, r2, #6
 800116a:	17db      	asrs	r3, r3, #31
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001170:	4413      	add	r3, r2
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001174:	e031      	b.n	80011da <CNC_ISR+0x1ce>
#endif    
  }
  else if (stage == DRIVE_DECELERATING)
 8001176:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800117a:	2b03      	cmp	r3, #3
 800117c:	d12d      	bne.n	80011da <CNC_ISR+0x1ce>
  {
      MATH_TYPE prev_v = v;
 800117e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001180:	60fb      	str	r3, [r7, #12]
#ifdef USE_FLOAT
      v = v - a / _ABS(v); // v = v0 - a*t = v0 - a*(1/v), 1/v - period of last pulse (in seconds)
#else    
      v = v - (a*1000/_ABS(v) + (a>0 ? 500 : -500)) / 1000; // v = v0 - a*t = v0 - a*(1/v), 1/v - period of last pulse (in seconds)
 8001182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001184:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001188:	fb02 f203 	mul.w	r2, r2, r3
 800118c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118e:	2b00      	cmp	r3, #0
 8001190:	bfb8      	it	lt
 8001192:	425b      	neglt	r3, r3
 8001194:	fb92 f3f3 	sdiv	r3, r2, r3
 8001198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800119a:	2a00      	cmp	r2, #0
 800119c:	dd02      	ble.n	80011a4 <CNC_ISR+0x198>
 800119e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011a2:	e000      	b.n	80011a6 <CNC_ISR+0x19a>
 80011a4:	4a43      	ldr	r2, [pc, #268]	; (80012b4 <CNC_ISR+0x2a8>)
 80011a6:	4413      	add	r3, r2
 80011a8:	4a43      	ldr	r2, [pc, #268]	; (80012b8 <CNC_ISR+0x2ac>)
 80011aa:	fb82 1203 	smull	r1, r2, r2, r3
 80011ae:	1192      	asrs	r2, r2, #6
 80011b0:	17db      	asrs	r3, r3, #31
 80011b2:	1a9b      	subs	r3, r3, r2
 80011b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011b6:	4413      	add	r3, r2
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif    

      // additional condition for switching to IDLE	  
      if ((_ABS(v) <= V0) || // if almost stopped
 80011ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011bc:	2b00      	cmp	r3, #0
 80011be:	bfb8      	it	lt
 80011c0:	425b      	neglt	r3, r3
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	da05      	bge.n	80011d4 <CNC_ISR+0x1c8>
          (v * prev_v < 0))    // or if speed changes direction (sign) - overshooted
 80011c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	fb02 f303 	mul.w	r3, r2, r3
      if ((_ABS(v) <= V0) || // if almost stopped
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	da02      	bge.n	80011da <CNC_ISR+0x1ce>
      {
          stage = DRIVE_IDLED;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
  }
  
  // condition for switching to ACCELERATING 
  // init section
  if (stage == DRIVE_IDLED)
 80011da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f040 808b 	bne.w	80012fa <CNC_ISR+0x2ee>
  {
        if ((x != dest) && (!cnc2.m[i].ToStop)) // if dest point is not reached
 80011e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d067      	beq.n	80012bc <CNC_ISR+0x2b0>
 80011ec:	4930      	ldr	r1, [pc, #192]	; (80012b0 <CNC_ISR+0x2a4>)
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	4613      	mov	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	1a9b      	subs	r3, r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	440b      	add	r3, r1
 80011fa:	331c      	adds	r3, #28
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d15c      	bne.n	80012bc <CNC_ISR+0x2b0>
        {
            if (dest > x) // forward moving
 8001202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001206:	429a      	cmp	r2, r3
 8001208:	dd1e      	ble.n	8001248 <CNC_ISR+0x23c>
            {
                    v         = V0;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    a         = m2->Anom;
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	633b      	str	r3, [r7, #48]	; 0x30
                    m2->v_nom = m2->Vnom/*[cnc2.speed]*/;
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
                    if (!m->dir_inv) RESET_DOUT(m->dir_port, m->dir_pin);
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d108      	bne.n	8001236 <CNC_ISR+0x22a>
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	889b      	ldrh	r3, [r3, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	4619      	mov	r1, r3
 8001230:	f003 fb55 	bl	80048de <HAL_GPIO_WritePin>
 8001234:	e029      	b.n	800128a <CNC_ISR+0x27e>
                    else             SET_DOUT  (m->dir_port, m->dir_pin);
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	6818      	ldr	r0, [r3, #0]
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	889b      	ldrh	r3, [r3, #4]
 800123e:	2201      	movs	r2, #1
 8001240:	4619      	mov	r1, r3
 8001242:	f003 fb4c 	bl	80048de <HAL_GPIO_WritePin>
 8001246:	e020      	b.n	800128a <CNC_ISR+0x27e>
            }
            else     // backward moving
            {
                    v         = -V0;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	425b      	negs	r3, r3
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    a         = -m2->Anom;
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	425b      	negs	r3, r3
 8001254:	633b      	str	r3, [r7, #48]	; 0x30
                    m2->v_nom = -m2->Vnom/*[cnc2.speed]*/;
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	425a      	negs	r2, r3
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	629a      	str	r2, [r3, #40]	; 0x28
                    if (!m->dir_inv) SET_DOUT  (m->dir_port, m->dir_pin);
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d108      	bne.n	800127a <CNC_ISR+0x26e>
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	889b      	ldrh	r3, [r3, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	4619      	mov	r1, r3
 8001274:	f003 fb33 	bl	80048de <HAL_GPIO_WritePin>
 8001278:	e007      	b.n	800128a <CNC_ISR+0x27e>
                    else             RESET_DOUT(m->dir_port, m->dir_pin);
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	6818      	ldr	r0, [r3, #0]
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	889b      	ldrh	r3, [r3, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	4619      	mov	r1, r3
 8001286:	f003 fb2a 	bl	80048de <HAL_GPIO_WritePin>
            }

            for (int i=0; i<m->dir_delay; i++) CNC_Del();
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
 800128e:	e004      	b.n	800129a <CNC_ISR+0x28e>
 8001290:	f7ff fea2 	bl	8000fd8 <CNC_Del>
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	3301      	adds	r3, #1
 8001298:	623b      	str	r3, [r7, #32]
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	6a3a      	ldr	r2, [r7, #32]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	dbf5      	blt.n	8001290 <CNC_ISR+0x284>

            stage = DRIVE_ACCELERATING;
 80012a4:	2301      	movs	r3, #1
 80012a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80012aa:	e009      	b.n	80012c0 <CNC_ISR+0x2b4>
 80012ac:	20000528 	.word	0x20000528
 80012b0:	200004b0 	.word	0x200004b0
 80012b4:	fffffe0c 	.word	0xfffffe0c
 80012b8:	10624dd3 	.word	0x10624dd3
        }
        else
        {
            v = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        
        _TIM_DISABLE(m->tim);
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	6a1a      	ldr	r2, [r3, #32]
 80012c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d10f      	bne.n	80012f0 <CNC_ISR+0x2e4>
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	6a1a      	ldr	r2, [r3, #32]
 80012d6:	f240 4344 	movw	r3, #1092	; 0x444
 80012da:	4013      	ands	r3, r2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d107      	bne.n	80012f0 <CNC_ISR+0x2e4>
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	f022 0201 	bic.w	r2, r2, #1
 80012ee:	601a      	str	r2, [r3, #0]
        _TIM_CLEAR_FLAG(m->tim, TIM_SR_UIF);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	f06f 0201 	mvn.w	r2, #1
 80012f8:	611a      	str	r2, [r3, #16]
//        RESET_DOUT(m->step);
//        Delay_us(1); // 200 ns for settling DIR pin (see RM for A4988)
  }

  // generate STEP pulse
  if (stage != DRIVE_IDLED)
 80012fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d03b      	beq.n	800137a <CNC_ISR+0x36e>
  {
    x += (v > 0) ? 1 : -1; // inc/dec coordinate
 8001302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001304:	2b00      	cmp	r3, #0
 8001306:	dd01      	ble.n	800130c <CNC_ISR+0x300>
 8001308:	2301      	movs	r3, #1
 800130a:	e001      	b.n	8001310 <CNC_ISR+0x304>
 800130c:	f04f 33ff 	mov.w	r3, #4294967295
 8001310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001312:	4413      	add	r3, r2
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
      
    // calc Autoreload registers value
    int arr = (uint32_t)_ABS(1000000 / v); // in microseconds
 8001316:	4a44      	ldr	r2, [pc, #272]	; (8001428 <CNC_ISR+0x41c>)
 8001318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131a:	fb92 f3f3 	sdiv	r3, r2, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	bfb8      	it	lt
 8001322:	425b      	neglt	r3, r3
 8001324:	60bb      	str	r3, [r7, #8]

    _TIM_SET_AUTORELOAD(m->tim, arr);
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	62da      	str	r2, [r3, #44]	; 0x2c

    SET_DOUT(m->step_port, m->step_pin);
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	6898      	ldr	r0, [r3, #8]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	899b      	ldrh	r3, [r3, #12]
 8001336:	2201      	movs	r2, #1
 8001338:	4619      	mov	r1, r3
 800133a:	f003 fad0 	bl	80048de <HAL_GPIO_WritePin>
    CNC_Del();
 800133e:	f7ff fe4b 	bl	8000fd8 <CNC_Del>
    RESET_DOUT(m->step_port, m->step_pin);
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	6898      	ldr	r0, [r3, #8]
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	899b      	ldrh	r3, [r3, #12]
 800134a:	2200      	movs	r2, #0
 800134c:	4619      	mov	r1, r3
 800134e:	f003 fac6 	bl	80048de <HAL_GPIO_WritePin>
      
    _TIM_CLEAR_FLAG(m->tim, TIM_SR_UIF);
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	f06f 0201 	mvn.w	r2, #1
 800135a:	611a      	str	r2, [r3, #16]
    
    if (!_TIM_ENABLED(m->tim)) // if timer is already running
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d107      	bne.n	800137a <CNC_ISR+0x36e>
      _TIM_ENABLE(m->tim); // start timer
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	f042 0201 	orr.w	r2, r2, #1
 8001378:	601a      	str	r2, [r3, #0]
  }
  
  // condition for Task Finishing
  if (stage == DRIVE_IDLED)
 800137a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800137e:	2b00      	cmp	r3, #0
 8001380:	d13b      	bne.n	80013fa <CNC_ISR+0x3ee>
  {
    if ((x == dest) || (cnc2.m[i].ToStop))
 8001382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001386:	429a      	cmp	r2, r3
 8001388:	d00a      	beq.n	80013a0 <CNC_ISR+0x394>
 800138a:	4928      	ldr	r1, [pc, #160]	; (800142c <CNC_ISR+0x420>)
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	1a9b      	subs	r3, r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	331c      	adds	r3, #28
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d02c      	beq.n	80013fa <CNC_ISR+0x3ee>
    {
      _TIM_DISABLE(m->tim);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	6a1a      	ldr	r2, [r3, #32]
 80013a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80013aa:	4013      	ands	r3, r2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d10f      	bne.n	80013d0 <CNC_ISR+0x3c4>
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	6a1a      	ldr	r2, [r3, #32]
 80013b6:	f240 4344 	movw	r3, #1092	; 0x444
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d107      	bne.n	80013d0 <CNC_ISR+0x3c4>
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	f022 0201 	bic.w	r2, r2, #1
 80013ce:	601a      	str	r2, [r3, #0]
      _TIM_CLEAR_FLAG(m->tim, TIM_SR_UIF);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	f06f 0201 	mvn.w	r2, #1
 80013d8:	611a      	str	r2, [r3, #16]
      m2->TaskFinished = 1;
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	2201      	movs	r2, #1
 80013de:	619a      	str	r2, [r3, #24]
      if (cnc2.m[i].ToStop) dest = x;
 80013e0:	4912      	ldr	r1, [pc, #72]	; (800142c <CNC_ISR+0x420>)
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	1a9b      	subs	r3, r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	440b      	add	r3, r1
 80013ee:	331c      	adds	r3, #28
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <CNC_ISR+0x3ee>
 80013f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  // save back
  m2->a     = a;
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013fe:	62da      	str	r2, [r3, #44]	; 0x2c
  m2->v     = v;
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
  m2->V0    = V0;
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	605a      	str	r2, [r3, #4]
  m2->x     = x;
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001410:	621a      	str	r2, [r3, #32]
  m2->dest  = dest;
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001416:	611a      	str	r2, [r3, #16]
  m2->stage = stage;
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800141e:	751a      	strb	r2, [r3, #20]
}
 8001420:	bf00      	nop
 8001422:	3738      	adds	r7, #56	; 0x38
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	000f4240 	.word	0x000f4240
 800142c:	200004b0 	.word	0x200004b0

08001430 <CNC_Update_ab>:
////////////////////////////////////////////////////////////////////////////////

void CNC_Update_ab(int a, int b)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]

  for (int i=a; i<=b; i++)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	e02d      	b.n	800149c <CNC_Update_ab+0x6c>
  {
    MOTOR_TypeDef  * m  = &cnc.m[i];
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2234      	movs	r2, #52	; 0x34
 8001444:	fb02 f303 	mul.w	r3, r2, r3
 8001448:	4a19      	ldr	r2, [pc, #100]	; (80014b0 <CNC_Update_ab+0x80>)
 800144a:	4413      	add	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
    MOTOR2_TypeDef * m2 = &cnc2.m[i];
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	4613      	mov	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	1a9b      	subs	r3, r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4a16      	ldr	r2, [pc, #88]	; (80014b4 <CNC_Update_ab+0x84>)
 800145a:	4413      	add	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]

    if ((!_TIM_ENABLED(m->tim)) && (m2->TaskFinished == 0))
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d106      	bne.n	800147a <CNC_Update_ab+0x4a>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d102      	bne.n	800147a <CNC_Update_ab+0x4a>
      CNC_ISR(i);
 8001474:	6978      	ldr	r0, [r7, #20]
 8001476:	f7ff fdc9 	bl	800100c <CNC_ISR>

    if (m2->TaskFinished)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d009      	beq.n	8001496 <CNC_Update_ab+0x66>
    		cnc2.m[i].ToStop = 0;
 8001482:	490c      	ldr	r1, [pc, #48]	; (80014b4 <CNC_Update_ab+0x84>)
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	4613      	mov	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	1a9b      	subs	r3, r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	440b      	add	r3, r1
 8001490:	331c      	adds	r3, #28
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
  for (int i=a; i<=b; i++)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3301      	adds	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	ddcd      	ble.n	8001440 <CNC_Update_ab+0x10>
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000528 	.word	0x20000528
 80014b4:	200004b0 	.word	0x200004b0

080014b8 <CNC_Update>:

void CNC_Update()
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	CNC_Update_ab(0, MC-1);
 80014bc:	2101      	movs	r1, #1
 80014be:	2000      	movs	r0, #0
 80014c0:	f7ff ffb6 	bl	8001430 <CNC_Update_ab>
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <CNC_Update_i>:

void CNC_Update_i(int i)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	CNC_Update_ab(i, i);
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffac 	bl	8001430 <CNC_Update_ab>
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <Console_UART_TxCpltCallback>:


////////////////////////////////////////////////////////////////////////////////

void Console_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  tx_empty = 1;
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <Console_UART_TxCpltCallback+0x18>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	20000000 	.word	0x20000000

080014fc <Console_UART_RxCpltCallback>:
////////////////////////////////////////////////////////////////////////////////

void Console_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af02      	add	r7, sp, #8
 8001502:	6078      	str	r0, [r7, #4]
	uint8_t c = rx_char;
 8001504:	4b87      	ldr	r3, [pc, #540]	; (8001724 <Console_UART_RxCpltCallback+0x228>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	73fb      	strb	r3, [r7, #15]

    tx_size = 0;
 800150a:	4b87      	ldr	r3, [pc, #540]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
    if (!rx_esc)
 8001510:	4b86      	ldr	r3, [pc, #536]	; (800172c <Console_UART_RxCpltCallback+0x230>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	f040 80b7 	bne.w	8001688 <Console_UART_RxCpltCallback+0x18c>
    {
		if (c==0x0D) // Enter
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	2b0d      	cmp	r3, #13
 800151e:	d12f      	bne.n	8001580 <Console_UART_RxCpltCallback+0x84>
		{
		  tx_buf[tx_size++] = c;
 8001520:	4b81      	ldr	r3, [pc, #516]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	4980      	ldr	r1, [pc, #512]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 8001528:	600a      	str	r2, [r1, #0]
 800152a:	4981      	ldr	r1, [pc, #516]	; (8001730 <Console_UART_RxCpltCallback+0x234>)
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	54ca      	strb	r2, [r1, r3]
		  tx_buf[tx_size++] = 0x0A;
 8001530:	4b7d      	ldr	r3, [pc, #500]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	497c      	ldr	r1, [pc, #496]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 8001538:	600a      	str	r2, [r1, #0]
 800153a:	4a7d      	ldr	r2, [pc, #500]	; (8001730 <Console_UART_RxCpltCallback+0x234>)
 800153c:	210a      	movs	r1, #10
 800153e:	54d1      	strb	r1, [r2, r3]
		  int tmp = tx_size; // save
 8001540:	4b79      	ldr	r3, [pc, #484]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	60bb      	str	r3, [r7, #8]
		  Console_ParseCommand(rx_str, rx_size, tx_buf, &tx_size, TX_BUF_SIZE);
 8001546:	4b7b      	ldr	r3, [pc, #492]	; (8001734 <Console_UART_RxCpltCallback+0x238>)
 8001548:	6819      	ldr	r1, [r3, #0]
 800154a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	4b75      	ldr	r3, [pc, #468]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 8001552:	4a77      	ldr	r2, [pc, #476]	; (8001730 <Console_UART_RxCpltCallback+0x234>)
 8001554:	4878      	ldr	r0, [pc, #480]	; (8001738 <Console_UART_RxCpltCallback+0x23c>)
 8001556:	f000 ff53 	bl	8002400 <Console_ParseCommand>

		  if (tx_size != tmp) my_print_str(tx_buf, "\r\n", &tx_size, TX_BUF_SIZE);
 800155a:	4b73      	ldr	r3, [pc, #460]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	429a      	cmp	r2, r3
 8001562:	d006      	beq.n	8001572 <Console_UART_RxCpltCallback+0x76>
 8001564:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001568:	4a6f      	ldr	r2, [pc, #444]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 800156a:	4974      	ldr	r1, [pc, #464]	; (800173c <Console_UART_RxCpltCallback+0x240>)
 800156c:	4870      	ldr	r0, [pc, #448]	; (8001730 <Console_UART_RxCpltCallback+0x234>)
 800156e:	f002 fbad 	bl	8003ccc <my_print_str>
		  rx_size = 0;
 8001572:	4b70      	ldr	r3, [pc, #448]	; (8001734 <Console_UART_RxCpltCallback+0x238>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
		  rx_esc  = 0;
 8001578:	4b6c      	ldr	r3, [pc, #432]	; (800172c <Console_UART_RxCpltCallback+0x230>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	e0b9      	b.n	80016f4 <Console_UART_RxCpltCallback+0x1f8>
		}
		else if ((c==0x08) || (c==0x7F)) // Backspace
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	2b08      	cmp	r3, #8
 8001584:	d002      	beq.n	800158c <Console_UART_RxCpltCallback+0x90>
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	2b7f      	cmp	r3, #127	; 0x7f
 800158a:	d122      	bne.n	80015d2 <Console_UART_RxCpltCallback+0xd6>
		{
		  if (rx_size)
 800158c:	4b69      	ldr	r3, [pc, #420]	; (8001734 <Console_UART_RxCpltCallback+0x238>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80af 	beq.w	80016f4 <Console_UART_RxCpltCallback+0x1f8>
		  {
			rx_size--;
 8001596:	4b67      	ldr	r3, [pc, #412]	; (8001734 <Console_UART_RxCpltCallback+0x238>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	3b01      	subs	r3, #1
 800159c:	4a65      	ldr	r2, [pc, #404]	; (8001734 <Console_UART_RxCpltCallback+0x238>)
 800159e:	6013      	str	r3, [r2, #0]
			tx_buf[tx_size++] = c;
 80015a0:	4b61      	ldr	r3, [pc, #388]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	4960      	ldr	r1, [pc, #384]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 80015a8:	600a      	str	r2, [r1, #0]
 80015aa:	4961      	ldr	r1, [pc, #388]	; (8001730 <Console_UART_RxCpltCallback+0x234>)
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	54ca      	strb	r2, [r1, r3]
			tx_buf[tx_size++] = ' ';
 80015b0:	4b5d      	ldr	r3, [pc, #372]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	495c      	ldr	r1, [pc, #368]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 80015b8:	600a      	str	r2, [r1, #0]
 80015ba:	4a5d      	ldr	r2, [pc, #372]	; (8001730 <Console_UART_RxCpltCallback+0x234>)
 80015bc:	2120      	movs	r1, #32
 80015be:	54d1      	strb	r1, [r2, r3]
			tx_buf[tx_size++] = c;
 80015c0:	4b59      	ldr	r3, [pc, #356]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	1c5a      	adds	r2, r3, #1
 80015c6:	4958      	ldr	r1, [pc, #352]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 80015c8:	600a      	str	r2, [r1, #0]
 80015ca:	4959      	ldr	r1, [pc, #356]	; (8001730 <Console_UART_RxCpltCallback+0x234>)
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	54ca      	strb	r2, [r1, r3]
		  if (rx_size)
 80015d0:	e090      	b.n	80016f4 <Console_UART_RxCpltCallback+0x1f8>
		  }
		}
		else if ((rx_size < RX_STR_SIZE) &&
 80015d2:	4b58      	ldr	r3, [pc, #352]	; (8001734 <Console_UART_RxCpltCallback+0x238>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b13      	cmp	r3, #19
 80015d8:	dc2b      	bgt.n	8001632 <Console_UART_RxCpltCallback+0x136>
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	2b2f      	cmp	r3, #47	; 0x2f
 80015de:	d902      	bls.n	80015e6 <Console_UART_RxCpltCallback+0xea>
				 (((c>='0') && (c<='9')) ||
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	2b39      	cmp	r3, #57	; 0x39
 80015e4:	d914      	bls.n	8001610 <Console_UART_RxCpltCallback+0x114>
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	2b60      	cmp	r3, #96	; 0x60
 80015ea:	d902      	bls.n	80015f2 <Console_UART_RxCpltCallback+0xf6>
				  ((c>='a') && (c<='z')) ||
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	2b7a      	cmp	r3, #122	; 0x7a
 80015f0:	d90e      	bls.n	8001610 <Console_UART_RxCpltCallback+0x114>
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	2b40      	cmp	r3, #64	; 0x40
 80015f6:	d902      	bls.n	80015fe <Console_UART_RxCpltCallback+0x102>
				  ((c>='A') && (c<='Z')) ||
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	2b5a      	cmp	r3, #90	; 0x5a
 80015fc:	d908      	bls.n	8001610 <Console_UART_RxCpltCallback+0x114>
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	2b3d      	cmp	r3, #61	; 0x3d
 8001602:	d005      	beq.n	8001610 <Console_UART_RxCpltCallback+0x114>
				   (c=='=') || (c==' ') || (c=='-')))
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	2b20      	cmp	r3, #32
 8001608:	d002      	beq.n	8001610 <Console_UART_RxCpltCallback+0x114>
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	2b2d      	cmp	r3, #45	; 0x2d
 800160e:	d110      	bne.n	8001632 <Console_UART_RxCpltCallback+0x136>
		{
		  tx_buf[tx_size++] = c;
 8001610:	4b45      	ldr	r3, [pc, #276]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	4944      	ldr	r1, [pc, #272]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 8001618:	600a      	str	r2, [r1, #0]
 800161a:	4945      	ldr	r1, [pc, #276]	; (8001730 <Console_UART_RxCpltCallback+0x234>)
 800161c:	7bfa      	ldrb	r2, [r7, #15]
 800161e:	54ca      	strb	r2, [r1, r3]
		  rx_str[rx_size++] = c;
 8001620:	4b44      	ldr	r3, [pc, #272]	; (8001734 <Console_UART_RxCpltCallback+0x238>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	4943      	ldr	r1, [pc, #268]	; (8001734 <Console_UART_RxCpltCallback+0x238>)
 8001628:	600a      	str	r2, [r1, #0]
 800162a:	4943      	ldr	r1, [pc, #268]	; (8001738 <Console_UART_RxCpltCallback+0x23c>)
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	54ca      	strb	r2, [r1, r3]
 8001630:	e060      	b.n	80016f4 <Console_UART_RxCpltCallback+0x1f8>
		}
		else if ((rx_size == 0) && (c==27)) // first esc char
 8001632:	4b40      	ldr	r3, [pc, #256]	; (8001734 <Console_UART_RxCpltCallback+0x238>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d106      	bne.n	8001648 <Console_UART_RxCpltCallback+0x14c>
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	2b1b      	cmp	r3, #27
 800163e:	d103      	bne.n	8001648 <Console_UART_RxCpltCallback+0x14c>
		{
			rx_esc = 1;
 8001640:	4b3a      	ldr	r3, [pc, #232]	; (800172c <Console_UART_RxCpltCallback+0x230>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	e055      	b.n	80016f4 <Console_UART_RxCpltCallback+0x1f8>
		}
		else if ((rx_size == 0) && ((c=='[') || (c=='{')))
 8001648:	4b3a      	ldr	r3, [pc, #232]	; (8001734 <Console_UART_RxCpltCallback+0x238>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d151      	bne.n	80016f4 <Console_UART_RxCpltCallback+0x1f8>
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	2b5b      	cmp	r3, #91	; 0x5b
 8001654:	d002      	beq.n	800165c <Console_UART_RxCpltCallback+0x160>
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	2b7b      	cmp	r3, #123	; 0x7b
 800165a:	d14b      	bne.n	80016f4 <Console_UART_RxCpltCallback+0x1f8>
		{
			  rx_str[rx_size++] = c;
 800165c:	4b35      	ldr	r3, [pc, #212]	; (8001734 <Console_UART_RxCpltCallback+0x238>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	4934      	ldr	r1, [pc, #208]	; (8001734 <Console_UART_RxCpltCallback+0x238>)
 8001664:	600a      	str	r2, [r1, #0]
 8001666:	4934      	ldr	r1, [pc, #208]	; (8001738 <Console_UART_RxCpltCallback+0x23c>)
 8001668:	7bfa      	ldrb	r2, [r7, #15]
 800166a:	54ca      	strb	r2, [r1, r3]
			  Console_ParseCommand(rx_str, rx_size, tx_buf, &tx_size, TX_BUF_SIZE);
 800166c:	4b31      	ldr	r3, [pc, #196]	; (8001734 <Console_UART_RxCpltCallback+0x238>)
 800166e:	6819      	ldr	r1, [r3, #0]
 8001670:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	4b2c      	ldr	r3, [pc, #176]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 8001678:	4a2d      	ldr	r2, [pc, #180]	; (8001730 <Console_UART_RxCpltCallback+0x234>)
 800167a:	482f      	ldr	r0, [pc, #188]	; (8001738 <Console_UART_RxCpltCallback+0x23c>)
 800167c:	f000 fec0 	bl	8002400 <Console_ParseCommand>
			  rx_size = 0;
 8001680:	4b2c      	ldr	r3, [pc, #176]	; (8001734 <Console_UART_RxCpltCallback+0x238>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	e035      	b.n	80016f4 <Console_UART_RxCpltCallback+0x1f8>
		}
    }
    else // Esc chars
    {
        rx_str[rx_size++] = c;
 8001688:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <Console_UART_RxCpltCallback+0x238>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	4929      	ldr	r1, [pc, #164]	; (8001734 <Console_UART_RxCpltCallback+0x238>)
 8001690:	600a      	str	r2, [r1, #0]
 8001692:	4929      	ldr	r1, [pc, #164]	; (8001738 <Console_UART_RxCpltCallback+0x23c>)
 8001694:	7bfa      	ldrb	r2, [r7, #15]
 8001696:	54ca      	strb	r2, [r1, r3]

    	if ((rx_size == 2) && (rx_str[0] == '[') && ((rx_str[1] == 'D') || (rx_str[1] == 'C')))
 8001698:	4b26      	ldr	r3, [pc, #152]	; (8001734 <Console_UART_RxCpltCallback+0x238>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b02      	cmp	r3, #2
 800169e:	d129      	bne.n	80016f4 <Console_UART_RxCpltCallback+0x1f8>
 80016a0:	4b25      	ldr	r3, [pc, #148]	; (8001738 <Console_UART_RxCpltCallback+0x23c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b5b      	cmp	r3, #91	; 0x5b
 80016a6:	d125      	bne.n	80016f4 <Console_UART_RxCpltCallback+0x1f8>
 80016a8:	4b23      	ldr	r3, [pc, #140]	; (8001738 <Console_UART_RxCpltCallback+0x23c>)
 80016aa:	785b      	ldrb	r3, [r3, #1]
 80016ac:	2b44      	cmp	r3, #68	; 0x44
 80016ae:	d003      	beq.n	80016b8 <Console_UART_RxCpltCallback+0x1bc>
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <Console_UART_RxCpltCallback+0x23c>)
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	2b43      	cmp	r3, #67	; 0x43
 80016b6:	d11d      	bne.n	80016f4 <Console_UART_RxCpltCallback+0x1f8>
		{
    		rx_str[0] = 27;
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <Console_UART_RxCpltCallback+0x23c>)
 80016ba:	221b      	movs	r2, #27
 80016bc:	701a      	strb	r2, [r3, #0]
   	        Console_ParseCommand(rx_str, rx_size, tx_buf, &tx_size, TX_BUF_SIZE);
 80016be:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <Console_UART_RxCpltCallback+0x238>)
 80016c0:	6819      	ldr	r1, [r3, #0]
 80016c2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	4b17      	ldr	r3, [pc, #92]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 80016ca:	4a19      	ldr	r2, [pc, #100]	; (8001730 <Console_UART_RxCpltCallback+0x234>)
 80016cc:	481a      	ldr	r0, [pc, #104]	; (8001738 <Console_UART_RxCpltCallback+0x23c>)
 80016ce:	f000 fe97 	bl	8002400 <Console_ParseCommand>

   	        if (tx_size) my_print_str(tx_buf, "\r\n", &tx_size, TX_BUF_SIZE);
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d006      	beq.n	80016e8 <Console_UART_RxCpltCallback+0x1ec>
 80016da:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80016de:	4a12      	ldr	r2, [pc, #72]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 80016e0:	4916      	ldr	r1, [pc, #88]	; (800173c <Console_UART_RxCpltCallback+0x240>)
 80016e2:	4813      	ldr	r0, [pc, #76]	; (8001730 <Console_UART_RxCpltCallback+0x234>)
 80016e4:	f002 faf2 	bl	8003ccc <my_print_str>
			rx_size = 0;
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <Console_UART_RxCpltCallback+0x238>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
			rx_esc  = 0;
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <Console_UART_RxCpltCallback+0x230>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
		}
	}

    if (tx_size)
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00a      	beq.n	8001712 <Console_UART_RxCpltCallback+0x216>
    {
		tx_empty = 0;
 80016fc:	4b10      	ldr	r3, [pc, #64]	; (8001740 <Console_UART_RxCpltCallback+0x244>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(huart, (uint8_t*)tx_buf, tx_size);
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <Console_UART_RxCpltCallback+0x22c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	b29b      	uxth	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	4909      	ldr	r1, [pc, #36]	; (8001730 <Console_UART_RxCpltCallback+0x234>)
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f007 fb54 	bl	8008dba <HAL_UART_Transmit_IT>
    }

    HAL_UART_Receive_IT(huart, (uint8_t*)&rx_char, 1);
 8001712:	2201      	movs	r2, #1
 8001714:	4903      	ldr	r1, [pc, #12]	; (8001724 <Console_UART_RxCpltCallback+0x228>)
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f007 fb93 	bl	8008e42 <HAL_UART_Receive_IT>
}
 800171c:	bf00      	nop
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000d90 	.word	0x20000d90
 8001728:	20000d8c 	.word	0x20000d8c
 800172c:	200005a4 	.word	0x200005a4
 8001730:	200005bc 	.word	0x200005bc
 8001734:	200005a0 	.word	0x200005a0
 8001738:	200005a8 	.word	0x200005a8
 800173c:	0800d738 	.word	0x0800d738
 8001740:	20000000 	.word	0x20000000

08001744 <Console_UART_ErrorCallback>:
////////////////////////////////////////////////////////////////////////////////

void Console_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  tx_empty = 1;
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <Console_UART_ErrorCallback+0x18>)
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	20000000 	.word	0x20000000

08001760 <Console_Init>:
////////////////////////////////////////////////////////////////////////////////

void Console_Init(UART_HandleTypeDef *huart)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	  rx_size = 0;
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <Console_Init+0x28>)
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
	  rx_esc  = 0;
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <Console_Init+0x2c>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
	  HAL_UART_Receive_IT(huart, (uint8_t*)&rx_char, 1); // start recieving chain
 8001774:	2201      	movs	r2, #1
 8001776:	4906      	ldr	r1, [pc, #24]	; (8001790 <Console_Init+0x30>)
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f007 fb62 	bl	8008e42 <HAL_UART_Receive_IT>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200005a0 	.word	0x200005a0
 800178c:	200005a4 	.word	0x200005a4
 8001790:	20000d90 	.word	0x20000d90

08001794 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179a:	f107 0310 	add.w	r3, r7, #16
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a8:	4b46      	ldr	r3, [pc, #280]	; (80018c4 <MX_GPIO_Init+0x130>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4a45      	ldr	r2, [pc, #276]	; (80018c4 <MX_GPIO_Init+0x130>)
 80017ae:	f043 0310 	orr.w	r3, r3, #16
 80017b2:	6193      	str	r3, [r2, #24]
 80017b4:	4b43      	ldr	r3, [pc, #268]	; (80018c4 <MX_GPIO_Init+0x130>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f003 0310 	and.w	r3, r3, #16
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c0:	4b40      	ldr	r3, [pc, #256]	; (80018c4 <MX_GPIO_Init+0x130>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a3f      	ldr	r2, [pc, #252]	; (80018c4 <MX_GPIO_Init+0x130>)
 80017c6:	f043 0320 	orr.w	r3, r3, #32
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b3d      	ldr	r3, [pc, #244]	; (80018c4 <MX_GPIO_Init+0x130>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0320 	and.w	r3, r3, #32
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d8:	4b3a      	ldr	r3, [pc, #232]	; (80018c4 <MX_GPIO_Init+0x130>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4a39      	ldr	r2, [pc, #228]	; (80018c4 <MX_GPIO_Init+0x130>)
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	6193      	str	r3, [r2, #24]
 80017e4:	4b37      	ldr	r3, [pc, #220]	; (80018c4 <MX_GPIO_Init+0x130>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	4b34      	ldr	r3, [pc, #208]	; (80018c4 <MX_GPIO_Init+0x130>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a33      	ldr	r2, [pc, #204]	; (80018c4 <MX_GPIO_Init+0x130>)
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b31      	ldr	r3, [pc, #196]	; (80018c4 <MX_GPIO_Init+0x130>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|ROTATE_STEP_Pin|ROTATE_DIR_Pin, GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800180e:	482e      	ldr	r0, [pc, #184]	; (80018c8 <MX_GPIO_Init+0x134>)
 8001810:	f003 f865 	bl	80048de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VALVE_ON_Pin|PUMP_DIR_Pin|PUMP_STEP_Pin|PUMP_ENA_Pin, GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	21b8      	movs	r1, #184	; 0xb8
 8001818:	482c      	ldr	r0, [pc, #176]	; (80018cc <MX_GPIO_Init+0x138>)
 800181a:	f003 f860 	bl	80048de <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin|ROTATE_STEP_Pin|ROTATE_DIR_Pin;
 800181e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2302      	movs	r3, #2
 800182e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	4619      	mov	r1, r3
 8001836:	4824      	ldr	r0, [pc, #144]	; (80018c8 <MX_GPIO_Init+0x134>)
 8001838:	f002 feb6 	bl	80045a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = P24V_OK_Pin;
 800183c:	2301      	movs	r3, #1
 800183e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(P24V_OK_GPIO_Port, &GPIO_InitStruct);
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	4619      	mov	r1, r3
 800184e:	481f      	ldr	r0, [pc, #124]	; (80018cc <MX_GPIO_Init+0x138>)
 8001850:	f002 feaa 	bl	80045a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VALVE_ON_Pin|PUMP_DIR_Pin|PUMP_STEP_Pin|PUMP_ENA_Pin;
 8001854:	23b8      	movs	r3, #184	; 0xb8
 8001856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001858:	2301      	movs	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2302      	movs	r3, #2
 8001862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001864:	f107 0310 	add.w	r3, r7, #16
 8001868:	4619      	mov	r1, r3
 800186a:	4818      	ldr	r0, [pc, #96]	; (80018cc <MX_GPIO_Init+0x138>)
 800186c:	f002 fe9c 	bl	80045a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUMP_ALM_Pin;
 8001870:	2340      	movs	r3, #64	; 0x40
 8001872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001878:	2301      	movs	r3, #1
 800187a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PUMP_ALM_GPIO_Port, &GPIO_InitStruct);
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	4619      	mov	r1, r3
 8001882:	4812      	ldr	r0, [pc, #72]	; (80018cc <MX_GPIO_Init+0x138>)
 8001884:	f002 fe90 	bl	80045a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = KEY_DOWN_Pin|KEY_ESC_Pin|KEY_ENTER_Pin|KEY_UP_Pin
 8001888:	f647 4303 	movw	r3, #31747	; 0x7c03
 800188c:	613b      	str	r3, [r7, #16]
                          |HOME2_Pin|PEDAL_Pin|HOME1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001892:	2301      	movs	r3, #1
 8001894:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	f107 0310 	add.w	r3, r7, #16
 800189a:	4619      	mov	r1, r3
 800189c:	480c      	ldr	r0, [pc, #48]	; (80018d0 <MX_GPIO_Init+0x13c>)
 800189e:	f002 fe83 	bl	80045a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VALVE_STATE_Pin;
 80018a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(VALVE_STATE_GPIO_Port, &GPIO_InitStruct);
 80018b0:	f107 0310 	add.w	r3, r7, #16
 80018b4:	4619      	mov	r1, r3
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <MX_GPIO_Init+0x13c>)
 80018b8:	f002 fe76 	bl	80045a8 <HAL_GPIO_Init>

}
 80018bc:	bf00      	nop
 80018be:	3720      	adds	r7, #32
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40011000 	.word	0x40011000
 80018cc:	40010800 	.word	0x40010800
 80018d0:	40010c00 	.word	0x40010c00

080018d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <MX_I2C1_Init+0x50>)
 80018da:	4a13      	ldr	r2, [pc, #76]	; (8001928 <MX_I2C1_Init+0x54>)
 80018dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_I2C1_Init+0x50>)
 80018e0:	4a12      	ldr	r2, [pc, #72]	; (800192c <MX_I2C1_Init+0x58>)
 80018e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <MX_I2C1_Init+0x50>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <MX_I2C1_Init+0x50>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <MX_I2C1_Init+0x50>)
 80018f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <MX_I2C1_Init+0x50>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MX_I2C1_Init+0x50>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001904:	4b07      	ldr	r3, [pc, #28]	; (8001924 <MX_I2C1_Init+0x50>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <MX_I2C1_Init+0x50>)
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001910:	4804      	ldr	r0, [pc, #16]	; (8001924 <MX_I2C1_Init+0x50>)
 8001912:	f002 fffd 	bl	8004910 <HAL_I2C_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800191c:	f002 f9d1 	bl	8003cc2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000d94 	.word	0x20000d94
 8001928:	40005400 	.word	0x40005400
 800192c:	000186a0 	.word	0x000186a0

08001930 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	; 0x28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a25      	ldr	r2, [pc, #148]	; (80019e0 <HAL_I2C_MspInit+0xb0>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d142      	bne.n	80019d6 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001950:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <HAL_I2C_MspInit+0xb4>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a23      	ldr	r2, [pc, #140]	; (80019e4 <HAL_I2C_MspInit+0xb4>)
 8001956:	f043 0308 	orr.w	r3, r3, #8
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <HAL_I2C_MspInit+0xb4>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001968:	f44f 7340 	mov.w	r3, #768	; 0x300
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800196e:	2312      	movs	r3, #18
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001972:	2303      	movs	r3, #3
 8001974:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	481a      	ldr	r0, [pc, #104]	; (80019e8 <HAL_I2C_MspInit+0xb8>)
 800197e:	f002 fe13 	bl	80045a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001982:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <HAL_I2C_MspInit+0xbc>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	f043 0302 	orr.w	r3, r3, #2
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
 8001998:	4a14      	ldr	r2, [pc, #80]	; (80019ec <HAL_I2C_MspInit+0xbc>)
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800199e:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <HAL_I2C_MspInit+0xb4>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4a10      	ldr	r2, [pc, #64]	; (80019e4 <HAL_I2C_MspInit+0xb4>)
 80019a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019a8:	61d3      	str	r3, [r2, #28]
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <HAL_I2C_MspInit+0xb4>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2101      	movs	r1, #1
 80019ba:	201f      	movs	r0, #31
 80019bc:	f002 fd3b 	bl	8004436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80019c0:	201f      	movs	r0, #31
 80019c2:	f002 fd54 	bl	800446e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2101      	movs	r1, #1
 80019ca:	2020      	movs	r0, #32
 80019cc:	f002 fd33 	bl	8004436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80019d0:	2020      	movs	r0, #32
 80019d2:	f002 fd4c 	bl	800446e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80019d6:	bf00      	nop
 80019d8:	3728      	adds	r7, #40	; 0x28
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40005400 	.word	0x40005400
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010c00 	.word	0x40010c00
 80019ec:	40010000 	.word	0x40010000

080019f0 <LCD_I2C_delayMicroseconds>:
{
	HAL_Delay(del);
}

void LCD_I2C_delayMicroseconds(uint32_t del_us)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	uint32_t del = (del_us + 500) / 1000;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <LCD_I2C_delayMicroseconds+0x38>)
 8001a00:	fba2 2303 	umull	r2, r3, r2, r3
 8001a04:	099b      	lsrs	r3, r3, #6
 8001a06:	60fb      	str	r3, [r7, #12]
	if (del == 0) del = 1;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <LCD_I2C_delayMicroseconds+0x22>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	60bb      	str	r3, [r7, #8]
	HAL_Delay(del);
 8001a16:	68b8      	ldr	r0, [r7, #8]
 8001a18:	f002 fc12 	bl	8004240 <HAL_Delay>
}
 8001a1c:	bf00      	nop
	LCD_I2C_delay(del);
}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	10624dd3 	.word	0x10624dd3

08001a2c <LCD_I2C_expanderWriteAsync>:
	else
		HAL_I2C_Master_Transmit(lcd->hi2c, lcd->addr, &d, 1, 2);
}

void LCD_I2C_expanderWriteAsync(LCD_I2C_TypeDef * lcd)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	if ((lcd->async) && (lcd->buf_count > 0))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00f      	beq.n	8001a5c <LCD_I2C_expanderWriteAsync+0x30>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	dd0b      	ble.n	8001a5c <LCD_I2C_expanderWriteAsync+0x30>
	{
		HAL_I2C_Master_Transmit_IT(lcd->hi2c, lcd->addr, lcd->buf_ptr, lcd->buf_count);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	791b      	ldrb	r3, [r3, #4]
 8001a4c:	b299      	uxth	r1, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	f003 f99c 	bl	8004d94 <HAL_I2C_Master_Transmit_IT>
	}
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <LCD_I2C_write4bits>:

void LCD_I2C_write4bits(LCD_I2C_TypeDef * lcd, uint8_t value)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70fb      	strb	r3, [r7, #3]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	72fb      	strb	r3, [r7, #11]
	uint8_t d = data | lcd->backlightval;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	7cda      	ldrb	r2, [r3, #19]
 8001a7c:	7afb      	ldrb	r3, [r7, #11]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	72bb      	strb	r3, [r7, #10]
	if (lcd->async)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d010      	beq.n	8001aae <LCD_I2C_write4bits+0x4a>
		if (lcd->buf_count < lcd->buf_size)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	699a      	ldr	r2, [r3, #24]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	da16      	bge.n	8001ac6 <LCD_I2C_write4bits+0x62>
		    lcd->buf_ptr[lcd->buf_count++]= d;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	1c58      	adds	r0, r3, #1
 8001aa2:	68f9      	ldr	r1, [r7, #12]
 8001aa4:	6188      	str	r0, [r1, #24]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	7aba      	ldrb	r2, [r7, #10]
 8001aaa:	701a      	strb	r2, [r3, #0]
}
 8001aac:	e00b      	b.n	8001ac6 <LCD_I2C_write4bits+0x62>
		HAL_I2C_Master_Transmit(lcd->hi2c, lcd->addr, &d, 1, 2);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	791b      	ldrb	r3, [r3, #4]
 8001ab6:	b299      	uxth	r1, r3
 8001ab8:	f107 020a 	add.w	r2, r7, #10
 8001abc:	2302      	movs	r3, #2
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	f003 f869 	bl	8004b98 <HAL_I2C_Master_Transmit>
}
 8001ac6:	bf00      	nop
	LCD_I2C_expanderWrite(lcd, value);

	//_pulseEnable(value):
	LCD_I2C_expanderWrite(lcd, value | En);	// En high
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	74fb      	strb	r3, [r7, #19]
	uint8_t d = data | lcd->backlightval;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	7cda      	ldrb	r2, [r3, #19]
 8001adc:	7cfb      	ldrb	r3, [r7, #19]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	727b      	strb	r3, [r7, #9]
	if (lcd->async)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d010      	beq.n	8001b0e <LCD_I2C_write4bits+0xaa>
		if (lcd->buf_count < lcd->buf_size)
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	699a      	ldr	r2, [r3, #24]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	da16      	bge.n	8001b26 <LCD_I2C_write4bits+0xc2>
		    lcd->buf_ptr[lcd->buf_count++]= d;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	1c58      	adds	r0, r3, #1
 8001b02:	6979      	ldr	r1, [r7, #20]
 8001b04:	6188      	str	r0, [r1, #24]
 8001b06:	4413      	add	r3, r2
 8001b08:	7a7a      	ldrb	r2, [r7, #9]
 8001b0a:	701a      	strb	r2, [r3, #0]
}
 8001b0c:	e00b      	b.n	8001b26 <LCD_I2C_write4bits+0xc2>
		HAL_I2C_Master_Transmit(lcd->hi2c, lcd->addr, &d, 1, 2);
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	791b      	ldrb	r3, [r3, #4]
 8001b16:	b299      	uxth	r1, r3
 8001b18:	f107 0209 	add.w	r2, r7, #9
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2301      	movs	r3, #1
 8001b22:	f003 f839 	bl	8004b98 <HAL_I2C_Master_Transmit>
}
 8001b26:	bf00      	nop
	//LCD_I2C_delayMicroseconds(1);		// enable pulse must be >450ns
	LCD_I2C_expanderWrite(lcd, value & ~En);	// En low
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	f023 0304 	bic.w	r3, r3, #4
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	61fb      	str	r3, [r7, #28]
 8001b34:	4613      	mov	r3, r2
 8001b36:	76fb      	strb	r3, [r7, #27]
	uint8_t d = data | lcd->backlightval;
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	7cda      	ldrb	r2, [r3, #19]
 8001b3c:	7efb      	ldrb	r3, [r7, #27]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	723b      	strb	r3, [r7, #8]
	if (lcd->async)
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d010      	beq.n	8001b6e <LCD_I2C_write4bits+0x10a>
		if (lcd->buf_count < lcd->buf_size)
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	699a      	ldr	r2, [r3, #24]
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	da16      	bge.n	8001b86 <LCD_I2C_write4bits+0x122>
		    lcd->buf_ptr[lcd->buf_count++]= d;
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	1c58      	adds	r0, r3, #1
 8001b62:	69f9      	ldr	r1, [r7, #28]
 8001b64:	6188      	str	r0, [r1, #24]
 8001b66:	4413      	add	r3, r2
 8001b68:	7a3a      	ldrb	r2, [r7, #8]
 8001b6a:	701a      	strb	r2, [r3, #0]
}
 8001b6c:	e00b      	b.n	8001b86 <LCD_I2C_write4bits+0x122>
		HAL_I2C_Master_Transmit(lcd->hi2c, lcd->addr, &d, 1, 2);
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	791b      	ldrb	r3, [r3, #4]
 8001b76:	b299      	uxth	r1, r3
 8001b78:	f107 0208 	add.w	r2, r7, #8
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2301      	movs	r3, #1
 8001b82:	f003 f809 	bl	8004b98 <HAL_I2C_Master_Transmit>
}
 8001b86:	bf00      	nop
	//LCD_I2C_delayMicroseconds(50);		// commands need > 37us to settle
}
 8001b88:	bf00      	nop
 8001b8a:	3720      	adds	r7, #32
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <LCD_I2C_send>:

// write either command or data
void LCD_I2C_send(LCD_I2C_TypeDef * lcd, uint8_t value, uint8_t mode) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	70fb      	strb	r3, [r7, #3]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	70bb      	strb	r3, [r7, #2]
	uint8_t highnib =  value     & 0xf0;
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	f023 030f 	bic.w	r3, r3, #15
 8001ba6:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib  = (value<<4) & 0xf0;
 8001ba8:	78fb      	ldrb	r3, [r7, #3]
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	73bb      	strb	r3, [r7, #14]
	LCD_I2C_write4bits(lcd, highnib | mode);
 8001bae:	7bfa      	ldrb	r2, [r7, #15]
 8001bb0:	78bb      	ldrb	r3, [r7, #2]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ff53 	bl	8001a64 <LCD_I2C_write4bits>
	LCD_I2C_write4bits(lcd, lownib  | mode);
 8001bbe:	7bba      	ldrb	r2, [r7, #14]
 8001bc0:	78bb      	ldrb	r3, [r7, #2]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ff4b 	bl	8001a64 <LCD_I2C_write4bits>
}
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <LCD_I2C_write>:
inline void LCD_I2C_command(LCD_I2C_TypeDef * lcd, uint8_t value) {
	LCD_I2C_send(lcd, value, 0);
}

void LCD_I2C_write(LCD_I2C_TypeDef * lcd, uint8_t value)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	460b      	mov	r3, r1
 8001be0:	70fb      	strb	r3, [r7, #3]
	LCD_I2C_send(lcd, value, Rs);
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	2201      	movs	r2, #1
 8001be6:	4619      	mov	r1, r3
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ffd1 	bl	8001b90 <LCD_I2C_send>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <LCD_I2C_startAsyncWrite>:

/********** high level commands, for the user! */

void LCD_I2C_startAsyncWrite(LCD_I2C_TypeDef * lcd)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
	if ((lcd->buf_ptr) && (lcd->buf_size > 0))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d009      	beq.n	8001c1a <LCD_I2C_startAsyncWrite+0x24>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	dd05      	ble.n	8001c1a <LCD_I2C_startAsyncWrite+0x24>
	{
		lcd->buf_count = 0;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
		lcd->async = 1;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	615a      	str	r2, [r3, #20]
	}
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <LCD_I2C_sendAsyncData>:

void LCD_I2C_sendAsyncData(LCD_I2C_TypeDef * lcd)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	if (lcd->async)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <LCD_I2C_sendAsyncData+0x22>
	{
		LCD_I2C_expanderWriteAsync(lcd);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff fef9 	bl	8001a2c <LCD_I2C_expanderWriteAsync>
		lcd->buf_count = 0;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
		lcd->async = 0; // off async mode
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	615a      	str	r2, [r3, #20]
	}
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <LCD_I2C_Busy>:

int LCD_I2C_Busy(LCD_I2C_TypeDef * lcd)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
	return (lcd->hi2c->State == HAL_I2C_STATE_READY) ? 0 : 1;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b20      	cmp	r3, #32
 8001c62:	bf14      	ite	ne
 8001c64:	2301      	movne	r3, #1
 8001c66:	2300      	moveq	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <LCD_I2C_clear>:

void LCD_I2C_clear(LCD_I2C_TypeDef * lcd)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	if (lcd->async) return;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10f      	bne.n	8001ca4 <LCD_I2C_clear+0x30>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	2301      	movs	r3, #1
 8001c8a:	72fb      	strb	r3, [r7, #11]
	LCD_I2C_send(lcd, value, 0);
 8001c8c:	7afb      	ldrb	r3, [r7, #11]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	4619      	mov	r1, r3
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f7ff ff7c 	bl	8001b90 <LCD_I2C_send>
}
 8001c98:	bf00      	nop

	LCD_I2C_command(lcd, LCD_CLEARDISPLAY);// clear display, set cursor position to zero
	LCD_I2C_delayMicroseconds(2000);  // this command takes a long time!
 8001c9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c9e:	f7ff fea7 	bl	80019f0 <LCD_I2C_delayMicroseconds>
 8001ca2:	e000      	b.n	8001ca6 <LCD_I2C_clear+0x32>
	if (lcd->async) return;
 8001ca4:	bf00      	nop
}
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <LCD_I2C_setCursor>:
//	command(LCD_RETURNHOME);  // set cursor position to zero
//	delayMicroseconds(2000);  // this command takes a long time!
//}

void LCD_I2C_setCursor(LCD_I2C_TypeDef * lcd, uint8_t col, uint8_t row)
{
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	70fb      	strb	r3, [r7, #3]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	70bb      	strb	r3, [r7, #2]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <LCD_I2C_setCursor+0x6c>)
 8001cbe:	f107 0408 	add.w	r4, r7, #8
 8001cc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row > lcd->rows) {
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	799b      	ldrb	r3, [r3, #6]
 8001ccc:	78ba      	ldrb	r2, [r7, #2]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d903      	bls.n	8001cda <LCD_I2C_setCursor+0x2e>
		row = lcd->rows-1;    // we count rows starting w/0
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	799b      	ldrb	r3, [r3, #6]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	70bb      	strb	r3, [r7, #2]
	}
	LCD_I2C_command(lcd, LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001cda:	78bb      	ldrb	r3, [r7, #2]
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	f107 0220 	add.w	r2, r7, #32
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	4413      	add	r3, r2
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	b25b      	sxtb	r3, r3
 8001cf2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cf6:	b25b      	sxtb	r3, r3
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	76fb      	strb	r3, [r7, #27]
	LCD_I2C_send(lcd, value, 0);
 8001d02:	7efb      	ldrb	r3, [r7, #27]
 8001d04:	2200      	movs	r2, #0
 8001d06:	4619      	mov	r1, r3
 8001d08:	69f8      	ldr	r0, [r7, #28]
 8001d0a:	f7ff ff41 	bl	8001b90 <LCD_I2C_send>
}
 8001d0e:	bf00      	nop
}
 8001d10:	bf00      	nop
 8001d12:	3724      	adds	r7, #36	; 0x24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd90      	pop	{r4, r7, pc}
 8001d18:	0800d73c 	.word	0x0800d73c

08001d1c <LCD_I2C_display>:
// Turn the display on/off (quickly)
void LCD_I2C_noDisplay(LCD_I2C_TypeDef * lcd) {
	lcd->displaycontrol &= ~LCD_DISPLAYON;
	LCD_I2C_command(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
}
void LCD_I2C_display(LCD_I2C_TypeDef * lcd) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	lcd->displaycontrol |= LCD_DISPLAYON;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7c5b      	ldrb	r3, [r3, #17]
 8001d28:	f043 0304 	orr.w	r3, r3, #4
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	745a      	strb	r2, [r3, #17]
	LCD_I2C_command(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	7c5b      	ldrb	r3, [r3, #17]
 8001d36:	f043 0308 	orr.w	r3, r3, #8
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	4613      	mov	r3, r2
 8001d42:	72fb      	strb	r3, [r7, #11]
	LCD_I2C_send(lcd, value, 0);
 8001d44:	7afb      	ldrb	r3, [r7, #11]
 8001d46:	2200      	movs	r2, #0
 8001d48:	4619      	mov	r1, r3
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f7ff ff20 	bl	8001b90 <LCD_I2C_send>
}
 8001d50:	bf00      	nop
}
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <LCD_I2C_backlight>:
{
	lcd->backlightval=LCD_NOBACKLIGHT;
	LCD_I2C_expanderWrite(lcd, 0);
}

void LCD_I2C_backlight(LCD_I2C_TypeDef * lcd) {
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af02      	add	r7, sp, #8
 8001d60:	6078      	str	r0, [r7, #4]
	lcd->backlightval=LCD_BACKLIGHT;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2208      	movs	r2, #8
 8001d66:	74da      	strb	r2, [r3, #19]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	72fb      	strb	r3, [r7, #11]
	uint8_t d = data | lcd->backlightval;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	7cda      	ldrb	r2, [r3, #19]
 8001d74:	7afb      	ldrb	r3, [r7, #11]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	72bb      	strb	r3, [r7, #10]
	if (lcd->async)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d010      	beq.n	8001da6 <LCD_I2C_backlight+0x4c>
		if (lcd->buf_count < lcd->buf_size)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	699a      	ldr	r2, [r3, #24]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	da16      	bge.n	8001dbe <LCD_I2C_backlight+0x64>
		    lcd->buf_ptr[lcd->buf_count++]= d;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	1c58      	adds	r0, r3, #1
 8001d9a:	68f9      	ldr	r1, [r7, #12]
 8001d9c:	6188      	str	r0, [r1, #24]
 8001d9e:	4413      	add	r3, r2
 8001da0:	7aba      	ldrb	r2, [r7, #10]
 8001da2:	701a      	strb	r2, [r3, #0]
}
 8001da4:	e00b      	b.n	8001dbe <LCD_I2C_backlight+0x64>
		HAL_I2C_Master_Transmit(lcd->hi2c, lcd->addr, &d, 1, 2);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	791b      	ldrb	r3, [r3, #4]
 8001dae:	b299      	uxth	r1, r3
 8001db0:	f107 020a 	add.w	r2, r7, #10
 8001db4:	2302      	movs	r3, #2
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2301      	movs	r3, #1
 8001dba:	f002 feed 	bl	8004b98 <HAL_I2C_Master_Transmit>
}
 8001dbe:	bf00      	nop
	LCD_I2C_expanderWrite(lcd, 0);
}
 8001dc0:	bf00      	nop
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <LCD_I2C_Init>:
// Note, however, that resetting the Arduino doesn't reset the LCD, so we
// can't assume that its in that state when a sketch starts (and the
// LiquidCrystal constructor is called).

void LCD_I2C_Init(LCD_I2C_TypeDef * lcd)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08c      	sub	sp, #48	; 0x30
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	6078      	str	r0, [r7, #4]
	lcd->async = 0;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	615a      	str	r2, [r3, #20]

	lcd->displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	741a      	strb	r2, [r3, #16]

	if (lcd->rows > 1) {
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	799b      	ldrb	r3, [r3, #6]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d906      	bls.n	8001df2 <LCD_I2C_Init+0x2a>
		lcd->displayfunction |= LCD_2LINE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	7c1b      	ldrb	r3, [r3, #16]
 8001de8:	f043 0308 	orr.w	r3, r3, #8
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	741a      	strb	r2, [r3, #16]
	}

	// for some 1 line displays you can select a 10 pixel high font
	if ((lcd->charsize != 0) && (lcd->rows == 1)) {
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	79db      	ldrb	r3, [r3, #7]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00a      	beq.n	8001e10 <LCD_I2C_Init+0x48>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	799b      	ldrb	r3, [r3, #6]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d106      	bne.n	8001e10 <LCD_I2C_Init+0x48>
		lcd->displayfunction |= LCD_5x10DOTS;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7c1b      	ldrb	r3, [r3, #16]
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	741a      	strb	r2, [r3, #16]
 8001e10:	2332      	movs	r3, #50	; 0x32
 8001e12:	60fb      	str	r3, [r7, #12]
	HAL_Delay(del);
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f002 fa13 	bl	8004240 <HAL_Delay>
}
 8001e1a:	bf00      	nop
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	LCD_I2C_delay(50);

	// Now we pull both RS and R/W low to begin commands
	LCD_I2C_expanderWrite(lcd, lcd->backlightval);	// reset expander and turn backlight off (Bit 8 =0)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7cda      	ldrb	r2, [r3, #19]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	4613      	mov	r3, r2
 8001e26:	74fb      	strb	r3, [r7, #19]
	uint8_t d = data | lcd->backlightval;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	7cda      	ldrb	r2, [r3, #19]
 8001e2c:	7cfb      	ldrb	r3, [r7, #19]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	72fb      	strb	r3, [r7, #11]
	if (lcd->async)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d010      	beq.n	8001e5e <LCD_I2C_Init+0x96>
		if (lcd->buf_count < lcd->buf_size)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	699a      	ldr	r2, [r3, #24]
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	da16      	bge.n	8001e76 <LCD_I2C_Init+0xae>
		    lcd->buf_ptr[lcd->buf_count++]= d;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	1c58      	adds	r0, r3, #1
 8001e52:	6979      	ldr	r1, [r7, #20]
 8001e54:	6188      	str	r0, [r1, #24]
 8001e56:	4413      	add	r3, r2
 8001e58:	7afa      	ldrb	r2, [r7, #11]
 8001e5a:	701a      	strb	r2, [r3, #0]
}
 8001e5c:	e00b      	b.n	8001e76 <LCD_I2C_Init+0xae>
		HAL_I2C_Master_Transmit(lcd->hi2c, lcd->addr, &d, 1, 2);
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	791b      	ldrb	r3, [r3, #4]
 8001e66:	b299      	uxth	r1, r3
 8001e68:	f107 020b 	add.w	r2, r7, #11
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	2301      	movs	r3, #1
 8001e72:	f002 fe91 	bl	8004b98 <HAL_I2C_Master_Transmit>
}
 8001e76:	bf00      	nop
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	LCD_I2C_write4bits(lcd, 0x03 << 4);
 8001e78:	2130      	movs	r1, #48	; 0x30
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff fdf2 	bl	8001a64 <LCD_I2C_write4bits>
	LCD_I2C_delayMicroseconds(4500); // wait min 4.1ms
 8001e80:	f241 1094 	movw	r0, #4500	; 0x1194
 8001e84:	f7ff fdb4 	bl	80019f0 <LCD_I2C_delayMicroseconds>

	// second try
	LCD_I2C_write4bits(lcd, 0x03 << 4);
 8001e88:	2130      	movs	r1, #48	; 0x30
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fdea 	bl	8001a64 <LCD_I2C_write4bits>
	LCD_I2C_delayMicroseconds(4500); // wait min 4.1ms
 8001e90:	f241 1094 	movw	r0, #4500	; 0x1194
 8001e94:	f7ff fdac 	bl	80019f0 <LCD_I2C_delayMicroseconds>

	// third go!
	LCD_I2C_write4bits(lcd, 0x03 << 4);
 8001e98:	2130      	movs	r1, #48	; 0x30
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff fde2 	bl	8001a64 <LCD_I2C_write4bits>
	LCD_I2C_delayMicroseconds(150);
 8001ea0:	2096      	movs	r0, #150	; 0x96
 8001ea2:	f7ff fda5 	bl	80019f0 <LCD_I2C_delayMicroseconds>

	// finally, set to 4-bit interface
	LCD_I2C_write4bits(lcd, 0x02 << 4);
 8001ea6:	2120      	movs	r1, #32
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff fddb 	bl	8001a64 <LCD_I2C_write4bits>

	// set # lines, font size, etc.
	LCD_I2C_command(lcd, LCD_FUNCTIONSET | lcd->displayfunction);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	7c1b      	ldrb	r3, [r3, #16]
 8001eb2:	f043 0320 	orr.w	r3, r3, #32
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	61fb      	str	r3, [r7, #28]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	76fb      	strb	r3, [r7, #27]
	LCD_I2C_send(lcd, value, 0);
 8001ec0:	7efb      	ldrb	r3, [r7, #27]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	69f8      	ldr	r0, [r7, #28]
 8001ec8:	f7ff fe62 	bl	8001b90 <LCD_I2C_send>
}
 8001ecc:	bf00      	nop

	// turn the display on with no cursor or blinking default
	lcd->displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2204      	movs	r2, #4
 8001ed2:	745a      	strb	r2, [r3, #17]
	LCD_I2C_display(lcd);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ff21 	bl	8001d1c <LCD_I2C_display>

	// clear it off
	LCD_I2C_clear(lcd);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff feca 	bl	8001c74 <LCD_I2C_clear>

	// Initialize to default text direction (for roman languages)
	lcd->displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	749a      	strb	r2, [r3, #18]

	// set the entry mode
	LCD_I2C_command(lcd, LCD_ENTRYMODESET | lcd->displaymode);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	7c9b      	ldrb	r3, [r3, #18]
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	LCD_I2C_send(lcd, value, 0);
 8001efa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001efe:	2200      	movs	r2, #0
 8001f00:	4619      	mov	r1, r3
 8001f02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f04:	f7ff fe44 	bl	8001b90 <LCD_I2C_send>
}
 8001f08:	bf00      	nop

	//LCD_I2C_home(); // too long, we use setCursor
	LCD_I2C_setCursor(lcd, 0, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff fecc 	bl	8001cac <LCD_I2C_setCursor>


}
 8001f14:	bf00      	nop
 8001f16:	3728      	adds	r7, #40	; 0x28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	db0b      	blt.n	8001f46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	f003 021f 	and.w	r2, r3, #31
 8001f34:	4906      	ldr	r1, [pc, #24]	; (8001f50 <__NVIC_EnableIRQ+0x34>)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	095b      	lsrs	r3, r3, #5
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	e000e100 	.word	0xe000e100

08001f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	6039      	str	r1, [r7, #0]
 8001f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	db0a      	blt.n	8001f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	490c      	ldr	r1, [pc, #48]	; (8001fa0 <__NVIC_SetPriority+0x4c>)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	0112      	lsls	r2, r2, #4
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	440b      	add	r3, r1
 8001f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f7c:	e00a      	b.n	8001f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4908      	ldr	r1, [pc, #32]	; (8001fa4 <__NVIC_SetPriority+0x50>)
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	3b04      	subs	r3, #4
 8001f8c:	0112      	lsls	r2, r2, #4
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	440b      	add	r3, r1
 8001f92:	761a      	strb	r2, [r3, #24]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000e100 	.word	0xe000e100
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <handle_key_states>:


KEY_TypeDef key[KEY_LAST];

void handle_key_states()
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
	for (int i=0; i<KEY_LAST; i++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	e066      	b.n	8002082 <handle_key_states+0xda>
	{
		// PEDAL input
		int cur = (HAL_GPIO_ReadPin(key[i].Port, key[i].Pin) == GPIO_PIN_RESET) ? 0 : 1;
 8001fb4:	4937      	ldr	r1, [pc, #220]	; (8002094 <handle_key_states+0xec>)
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	4933      	ldr	r1, [pc, #204]	; (8002094 <handle_key_states+0xec>)
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	f002 fc6a 	bl	80048b0 <HAL_GPIO_ReadPin>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	bf14      	ite	ne
 8001fe2:	2301      	movne	r3, #1
 8001fe4:	2300      	moveq	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	603b      	str	r3, [r7, #0]

		if (cur == key[i].input) // filter 10 ms
 8001fea:	492a      	ldr	r1, [pc, #168]	; (8002094 <handle_key_states+0xec>)
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	3308      	adds	r3, #8
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d109      	bne.n	8002016 <handle_key_states+0x6e>
		{
			key[i].state = cur; // update state
 8002002:	4924      	ldr	r1, [pc, #144]	; (8002094 <handle_key_states+0xec>)
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	330c      	adds	r3, #12
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	601a      	str	r2, [r3, #0]
		}
		key[i].input = cur; // save current state
 8002016:	491f      	ldr	r1, [pc, #124]	; (8002094 <handle_key_states+0xec>)
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	3308      	adds	r3, #8
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	601a      	str	r2, [r3, #0]

		if (key[i].state == 0) key[i].down_time++;
 800202a:	491a      	ldr	r1, [pc, #104]	; (8002094 <handle_key_states+0xec>)
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	330c      	adds	r3, #12
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d113      	bne.n	8002068 <handle_key_states+0xc0>
 8002040:	4914      	ldr	r1, [pc, #80]	; (8002094 <handle_key_states+0xec>)
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	3310      	adds	r3, #16
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	1c59      	adds	r1, r3, #1
 8002054:	480f      	ldr	r0, [pc, #60]	; (8002094 <handle_key_states+0xec>)
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4403      	add	r3, r0
 8002062:	3310      	adds	r3, #16
 8002064:	6019      	str	r1, [r3, #0]
 8002066:	e009      	b.n	800207c <handle_key_states+0xd4>
		else                   key[i].down_time = 0;
 8002068:	490a      	ldr	r1, [pc, #40]	; (8002094 <handle_key_states+0xec>)
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	3310      	adds	r3, #16
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
	for (int i=0; i<KEY_LAST; i++)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3301      	adds	r3, #1
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b09      	cmp	r3, #9
 8002086:	dd95      	ble.n	8001fb4 <handle_key_states+0xc>
	}
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20001210 	.word	0x20001210

08002098 <Init_Keys>:


void Init_Keys()
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
	int k = KEY_PEDAL;
 800209e:	2300      	movs	r3, #0
 80020a0:	603b      	str	r3, [r7, #0]
	key[k].Port = PEDAL_GPIO_Port;
 80020a2:	4981      	ldr	r1, [pc, #516]	; (80022a8 <Init_Keys+0x210>)
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	440b      	add	r3, r1
 80020b0:	4a7e      	ldr	r2, [pc, #504]	; (80022ac <Init_Keys+0x214>)
 80020b2:	601a      	str	r2, [r3, #0]
	key[k].Pin  = PEDAL_Pin;
 80020b4:	497c      	ldr	r1, [pc, #496]	; (80022a8 <Init_Keys+0x210>)
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	3304      	adds	r3, #4
 80020c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c8:	801a      	strh	r2, [r3, #0]

	k = KEY_ESC;
 80020ca:	2301      	movs	r3, #1
 80020cc:	603b      	str	r3, [r7, #0]
	key[k].Port = KEY_ESC_GPIO_Port;
 80020ce:	4976      	ldr	r1, [pc, #472]	; (80022a8 <Init_Keys+0x210>)
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	4a73      	ldr	r2, [pc, #460]	; (80022ac <Init_Keys+0x214>)
 80020de:	601a      	str	r2, [r3, #0]
	key[k].Pin  = KEY_ESC_Pin;
 80020e0:	4971      	ldr	r1, [pc, #452]	; (80022a8 <Init_Keys+0x210>)
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	3304      	adds	r3, #4
 80020f0:	2202      	movs	r2, #2
 80020f2:	801a      	strh	r2, [r3, #0]

	k = KEY_DOWN;
 80020f4:	2302      	movs	r3, #2
 80020f6:	603b      	str	r3, [r7, #0]
	key[k].Port = KEY_DOWN_GPIO_Port;
 80020f8:	496b      	ldr	r1, [pc, #428]	; (80022a8 <Init_Keys+0x210>)
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	4a69      	ldr	r2, [pc, #420]	; (80022ac <Init_Keys+0x214>)
 8002108:	601a      	str	r2, [r3, #0]
	key[k].Pin  = KEY_DOWN_Pin;
 800210a:	4967      	ldr	r1, [pc, #412]	; (80022a8 <Init_Keys+0x210>)
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	440b      	add	r3, r1
 8002118:	3304      	adds	r3, #4
 800211a:	2201      	movs	r2, #1
 800211c:	801a      	strh	r2, [r3, #0]

	k = KEY_UP;
 800211e:	2303      	movs	r3, #3
 8002120:	603b      	str	r3, [r7, #0]
	key[k].Port = KEY_UP_GPIO_Port;
 8002122:	4961      	ldr	r1, [pc, #388]	; (80022a8 <Init_Keys+0x210>)
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	4a5e      	ldr	r2, [pc, #376]	; (80022ac <Init_Keys+0x214>)
 8002132:	601a      	str	r2, [r3, #0]
	key[k].Pin  = KEY_UP_Pin;
 8002134:	495c      	ldr	r1, [pc, #368]	; (80022a8 <Init_Keys+0x210>)
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	3304      	adds	r3, #4
 8002144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002148:	801a      	strh	r2, [r3, #0]

	k = KEY_ENTER;
 800214a:	2304      	movs	r3, #4
 800214c:	603b      	str	r3, [r7, #0]
	key[k].Port = KEY_ENTER_GPIO_Port;
 800214e:	4956      	ldr	r1, [pc, #344]	; (80022a8 <Init_Keys+0x210>)
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	4a53      	ldr	r2, [pc, #332]	; (80022ac <Init_Keys+0x214>)
 800215e:	601a      	str	r2, [r3, #0]
	key[k].Pin  = KEY_ENTER_Pin;
 8002160:	4951      	ldr	r1, [pc, #324]	; (80022a8 <Init_Keys+0x210>)
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	3304      	adds	r3, #4
 8002170:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002174:	801a      	strh	r2, [r3, #0]

	k = DIN_HOME1;
 8002176:	2305      	movs	r3, #5
 8002178:	603b      	str	r3, [r7, #0]
	key[k].Port = HOME1_GPIO_Port;
 800217a:	494b      	ldr	r1, [pc, #300]	; (80022a8 <Init_Keys+0x210>)
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	4a48      	ldr	r2, [pc, #288]	; (80022ac <Init_Keys+0x214>)
 800218a:	601a      	str	r2, [r3, #0]
	key[k].Pin  = HOME1_Pin;
 800218c:	4946      	ldr	r1, [pc, #280]	; (80022a8 <Init_Keys+0x210>)
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	3304      	adds	r3, #4
 800219c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021a0:	801a      	strh	r2, [r3, #0]

	k = DIN_HOME2;
 80021a2:	2306      	movs	r3, #6
 80021a4:	603b      	str	r3, [r7, #0]
	key[k].Port = HOME2_GPIO_Port;
 80021a6:	4940      	ldr	r1, [pc, #256]	; (80022a8 <Init_Keys+0x210>)
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	4a3d      	ldr	r2, [pc, #244]	; (80022ac <Init_Keys+0x214>)
 80021b6:	601a      	str	r2, [r3, #0]
	key[k].Pin  = HOME2_Pin;
 80021b8:	493b      	ldr	r1, [pc, #236]	; (80022a8 <Init_Keys+0x210>)
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	3304      	adds	r3, #4
 80021c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021cc:	801a      	strh	r2, [r3, #0]

	k = DIN_VALVE_STATE;
 80021ce:	2307      	movs	r3, #7
 80021d0:	603b      	str	r3, [r7, #0]
	key[k].Port = VALVE_STATE_GPIO_Port;
 80021d2:	4935      	ldr	r1, [pc, #212]	; (80022a8 <Init_Keys+0x210>)
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	4a32      	ldr	r2, [pc, #200]	; (80022ac <Init_Keys+0x214>)
 80021e2:	601a      	str	r2, [r3, #0]
	key[k].Pin  = VALVE_STATE_Pin;
 80021e4:	4930      	ldr	r1, [pc, #192]	; (80022a8 <Init_Keys+0x210>)
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	3304      	adds	r3, #4
 80021f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021f8:	801a      	strh	r2, [r3, #0]

	k = DIN_PUMP_ALM;
 80021fa:	2308      	movs	r3, #8
 80021fc:	603b      	str	r3, [r7, #0]
	key[k].Port = PUMP_ALM_GPIO_Port;
 80021fe:	492a      	ldr	r1, [pc, #168]	; (80022a8 <Init_Keys+0x210>)
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	4a28      	ldr	r2, [pc, #160]	; (80022b0 <Init_Keys+0x218>)
 800220e:	601a      	str	r2, [r3, #0]
	key[k].Pin  = PUMP_ALM_Pin;
 8002210:	4925      	ldr	r1, [pc, #148]	; (80022a8 <Init_Keys+0x210>)
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	3304      	adds	r3, #4
 8002220:	2240      	movs	r2, #64	; 0x40
 8002222:	801a      	strh	r2, [r3, #0]

	k = DIN_P24V_OK;
 8002224:	2309      	movs	r3, #9
 8002226:	603b      	str	r3, [r7, #0]
	key[k].Port = P24V_OK_GPIO_Port;
 8002228:	491f      	ldr	r1, [pc, #124]	; (80022a8 <Init_Keys+0x210>)
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	4a1e      	ldr	r2, [pc, #120]	; (80022b0 <Init_Keys+0x218>)
 8002238:	601a      	str	r2, [r3, #0]
	key[k].Pin  = P24V_OK_Pin;
 800223a:	491b      	ldr	r1, [pc, #108]	; (80022a8 <Init_Keys+0x210>)
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	3304      	adds	r3, #4
 800224a:	2201      	movs	r2, #1
 800224c:	801a      	strh	r2, [r3, #0]

	for (int i=0; i<KEY_LAST; i++)
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	e020      	b.n	8002296 <Init_Keys+0x1fe>
	{
		key[i].input     = 1;
 8002254:	4914      	ldr	r1, [pc, #80]	; (80022a8 <Init_Keys+0x210>)
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	3308      	adds	r3, #8
 8002264:	2201      	movs	r2, #1
 8002266:	601a      	str	r2, [r3, #0]
		key[i].state     = 1;
 8002268:	490f      	ldr	r1, [pc, #60]	; (80022a8 <Init_Keys+0x210>)
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	330c      	adds	r3, #12
 8002278:	2201      	movs	r2, #1
 800227a:	601a      	str	r2, [r3, #0]
		key[i].down_time = 0;
 800227c:	490a      	ldr	r1, [pc, #40]	; (80022a8 <Init_Keys+0x210>)
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	3310      	adds	r3, #16
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
	for (int i=0; i<KEY_LAST; i++)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3301      	adds	r3, #1
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b09      	cmp	r3, #9
 800229a:	dddb      	ble.n	8002254 <Init_Keys+0x1bc>
	}
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	20001210 	.word	0x20001210
 80022ac:	40010c00 	.word	0x40010c00
 80022b0:	40010800 	.word	0x40010800

080022b4 <HAL_UART_TxCpltCallback>:
#define CONSOLE_HUART huart1

////////////////////////////////////////////////////////////////////////////////

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	if (huart == &CONSOLE_HUART)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <HAL_UART_TxCpltCallback+0x20>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d102      	bne.n	80022ca <HAL_UART_TxCpltCallback+0x16>
	{
		Console_UART_TxCpltCallback(huart);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff f90b 	bl	80014e0 <Console_UART_TxCpltCallback>
	}
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200012e0 	.word	0x200012e0

080022d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
	if (huart == &CONSOLE_HUART)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <HAL_UART_RxCpltCallback+0x20>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d102      	bne.n	80022ee <HAL_UART_RxCpltCallback+0x16>
	{
		Console_UART_RxCpltCallback(huart);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff f907 	bl	80014fc <Console_UART_RxCpltCallback>
	}
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200012e0 	.word	0x200012e0

080022fc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
	if (huart == &CONSOLE_HUART)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a05      	ldr	r2, [pc, #20]	; (800231c <HAL_UART_ErrorCallback+0x20>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d102      	bne.n	8002312 <HAL_UART_ErrorCallback+0x16>
	{
		Console_UART_ErrorCallback(huart);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff fa19 	bl	8001744 <Console_UART_ErrorCallback>
	}
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	200012e0 	.word	0x200012e0

08002320 <Init_Console>:
////////////////////////////////////////////////////////////////////////////////

void Init_Console()
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	Console_Init(&CONSOLE_HUART);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <Init_Console+0x10>)
 8002326:	f7ff fa1b 	bl	8001760 <Console_Init>
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	200012e0 	.word	0x200012e0

08002334 <ParseParam>:
////////////////////////////////////////////////////////////////////////////////

int ParseParam(char * s, int p, int len, int * param)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
	  p++;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	3301      	adds	r3, #1
 8002346:	60bb      	str	r3, [r7, #8]
	  while ((p<len) &&
 8002348:	e002      	b.n	8002350 <ParseParam+0x1c>
	      ((s[p]==' ') || (s[p]=='='))) p++; // dell trailing spaces...
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	3301      	adds	r3, #1
 800234e:	60bb      	str	r3, [r7, #8]
	  while ((p<len) &&
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	da0b      	bge.n	8002370 <ParseParam+0x3c>
	      ((s[p]==' ') || (s[p]=='='))) p++; // dell trailing spaces...
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4413      	add	r3, r2
 800235e:	781b      	ldrb	r3, [r3, #0]
	  while ((p<len) &&
 8002360:	2b20      	cmp	r3, #32
 8002362:	d0f2      	beq.n	800234a <ParseParam+0x16>
	      ((s[p]==' ') || (s[p]=='='))) p++; // dell trailing spaces...
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4413      	add	r3, r2
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b3d      	cmp	r3, #61	; 0x3d
 800236e:	d0ec      	beq.n	800234a <ParseParam+0x16>

	  int t = 0;  // convert str to int
 8002370:	2300      	movs	r3, #0
 8002372:	61fb      	str	r3, [r7, #28]
	  int is = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	61bb      	str	r3, [r7, #24]

	  int sign = 1;
 8002378:	2301      	movs	r3, #1
 800237a:	617b      	str	r3, [r7, #20]

	  if ((p<len) && (s[p]=='-'))
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	da1e      	bge.n	80023c2 <ParseParam+0x8e>
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	4413      	add	r3, r2
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b2d      	cmp	r3, #45	; 0x2d
 800238e:	d118      	bne.n	80023c2 <ParseParam+0x8e>
	  {
		  sign = -1;
 8002390:	f04f 33ff 	mov.w	r3, #4294967295
 8002394:	617b      	str	r3, [r7, #20]
		  p++;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	3301      	adds	r3, #1
 800239a:	60bb      	str	r3, [r7, #8]
	  }

	  while ((p<len) &&
 800239c:	e011      	b.n	80023c2 <ParseParam+0x8e>
	         (s[p]>='0') && (s[p]<='9'))
	  {
	    t = t*10 + (s[p++]-'0');
 800239e:	69fa      	ldr	r2, [r7, #28]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4619      	mov	r1, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	60ba      	str	r2, [r7, #8]
 80023b0:	461a      	mov	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4413      	add	r3, r2
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	3b30      	subs	r3, #48	; 0x30
 80023ba:	440b      	add	r3, r1
 80023bc:	61fb      	str	r3, [r7, #28]
	    is = 1;
 80023be:	2301      	movs	r3, #1
 80023c0:	61bb      	str	r3, [r7, #24]
	  while ((p<len) &&
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	da0b      	bge.n	80023e2 <ParseParam+0xae>
	         (s[p]>='0') && (s[p]<='9'))
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	4413      	add	r3, r2
 80023d0:	781b      	ldrb	r3, [r3, #0]
	  while ((p<len) &&
 80023d2:	2b2f      	cmp	r3, #47	; 0x2f
 80023d4:	d905      	bls.n	80023e2 <ParseParam+0xae>
	         (s[p]>='0') && (s[p]<='9'))
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4413      	add	r3, r2
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b39      	cmp	r3, #57	; 0x39
 80023e0:	d9dd      	bls.n	800239e <ParseParam+0x6a>
	  }

	  if (is)  *param = sign*t;
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <ParseParam+0xc0>
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	fb02 f203 	mul.w	r2, r2, r3
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	601a      	str	r2, [r3, #0]
	  return is;
 80023f4:	69bb      	ldr	r3, [r7, #24]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	; 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <Console_ParseCommand>:
////////////////////////////////////////////////////////////////////////////////

void Console_ParseCommand(char * s, int len, char * out_s, int * out_len, int out_len_max)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b094      	sub	sp, #80	; 0x50
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
	if (len)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 844b 	beq.w	8002cac <Console_ParseCommand+0x8ac>
	{
		int p = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	647b      	str	r3, [r7, #68]	; 0x44
		while ((s[p]==' ') && (p<len)) p++; // dell trailing spaces
 800241a:	e002      	b.n	8002422 <Console_ParseCommand+0x22>
 800241c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800241e:	3301      	adds	r3, #1
 8002420:	647b      	str	r3, [r7, #68]	; 0x44
 8002422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4413      	add	r3, r2
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b20      	cmp	r3, #32
 800242c:	d103      	bne.n	8002436 <Console_ParseCommand+0x36>
 800242e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	429a      	cmp	r2, r3
 8002434:	dbf2      	blt.n	800241c <Console_ParseCommand+0x1c>

		if (p<len)
 8002436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	429a      	cmp	r2, r3
 800243c:	f280 8436 	bge.w	8002cac <Console_ParseCommand+0x8ac>
		{
			int error_in_cmd = 1;
 8002440:	2301      	movs	r3, #1
 8002442:	643b      	str	r3, [r7, #64]	; 0x40

			switch (s[p])
 8002444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4413      	add	r3, r2
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b1b      	cmp	r3, #27
 800244e:	f000 83e5 	beq.w	8002c1c <Console_ParseCommand+0x81c>
 8002452:	2b1b      	cmp	r3, #27
 8002454:	f2c0 8414 	blt.w	8002c80 <Console_ParseCommand+0x880>
 8002458:	2b7b      	cmp	r3, #123	; 0x7b
 800245a:	f300 8411 	bgt.w	8002c80 <Console_ParseCommand+0x880>
 800245e:	2b3f      	cmp	r3, #63	; 0x3f
 8002460:	f2c0 840e 	blt.w	8002c80 <Console_ParseCommand+0x880>
 8002464:	3b3f      	subs	r3, #63	; 0x3f
 8002466:	2b3c      	cmp	r3, #60	; 0x3c
 8002468:	f200 840a 	bhi.w	8002c80 <Console_ParseCommand+0x880>
 800246c:	a201      	add	r2, pc, #4	; (adr r2, 8002474 <Console_ParseCommand+0x74>)
 800246e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002472:	bf00      	nop
 8002474:	08002569 	.word	0x08002569
 8002478:	08002c81 	.word	0x08002c81
 800247c:	08002c81 	.word	0x08002c81
 8002480:	08002c81 	.word	0x08002c81
 8002484:	08002c81 	.word	0x08002c81
 8002488:	08002c81 	.word	0x08002c81
 800248c:	08002c81 	.word	0x08002c81
 8002490:	08002c81 	.word	0x08002c81
 8002494:	08002c81 	.word	0x08002c81
 8002498:	08002c81 	.word	0x08002c81
 800249c:	08002c81 	.word	0x08002c81
 80024a0:	08002c81 	.word	0x08002c81
 80024a4:	08002c81 	.word	0x08002c81
 80024a8:	08002c81 	.word	0x08002c81
 80024ac:	08002c81 	.word	0x08002c81
 80024b0:	08002c81 	.word	0x08002c81
 80024b4:	08002c81 	.word	0x08002c81
 80024b8:	08002c81 	.word	0x08002c81
 80024bc:	08002c81 	.word	0x08002c81
 80024c0:	08002c81 	.word	0x08002c81
 80024c4:	08002c81 	.word	0x08002c81
 80024c8:	08002c81 	.word	0x08002c81
 80024cc:	08002c81 	.word	0x08002c81
 80024d0:	08002c81 	.word	0x08002c81
 80024d4:	08002c81 	.word	0x08002c81
 80024d8:	08002c81 	.word	0x08002c81
 80024dc:	08002c81 	.word	0x08002c81
 80024e0:	08002c81 	.word	0x08002c81
 80024e4:	08002c07 	.word	0x08002c07
 80024e8:	08002c81 	.word	0x08002c81
 80024ec:	08002c81 	.word	0x08002c81
 80024f0:	08002c81 	.word	0x08002c81
 80024f4:	08002c81 	.word	0x08002c81
 80024f8:	08002c81 	.word	0x08002c81
 80024fc:	08002c81 	.word	0x08002c81
 8002500:	08002c81 	.word	0x08002c81
 8002504:	08002c81 	.word	0x08002c81
 8002508:	08002c81 	.word	0x08002c81
 800250c:	08002c81 	.word	0x08002c81
 8002510:	08002c81 	.word	0x08002c81
 8002514:	08002c81 	.word	0x08002c81
 8002518:	08002569 	.word	0x08002569
 800251c:	08002569 	.word	0x08002569
 8002520:	08002c81 	.word	0x08002c81
 8002524:	08002c81 	.word	0x08002c81
 8002528:	08002c81 	.word	0x08002c81
 800252c:	08002c81 	.word	0x08002c81
 8002530:	08002c81 	.word	0x08002c81
 8002534:	08002c81 	.word	0x08002c81
 8002538:	080029e9 	.word	0x080029e9
 800253c:	08002c81 	.word	0x08002c81
 8002540:	0800289f 	.word	0x0800289f
 8002544:	08002c81 	.word	0x08002c81
 8002548:	08002c81 	.word	0x08002c81
 800254c:	08002c81 	.word	0x08002c81
 8002550:	08002bc7 	.word	0x08002bc7
 8002554:	08002c81 	.word	0x08002c81
 8002558:	08002c81 	.word	0x08002c81
 800255c:	08002c81 	.word	0x08002c81
 8002560:	08002c81 	.word	0x08002c81
 8002564:	08002c07 	.word	0x08002c07
	my_print_int_a(out_s, PARAM, 5, out_len, out_len_max); \
	my_print_str(out_s, S2,    out_len, out_len_max); \
	my_print_str(out_s, "\r\n",    out_len, out_len_max); \
				} while (0)

					my_print_str(out_s, "===============================\r\n", out_len, out_len_max);
 8002568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	4985      	ldr	r1, [pc, #532]	; (8002784 <Console_ParseCommand+0x384>)
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f001 fbac 	bl	8003ccc <my_print_str>
					my_print_str(out_s, "Grease Coating Machine commands\r\n", out_len, out_len_max);
 8002574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	4983      	ldr	r1, [pc, #524]	; (8002788 <Console_ParseCommand+0x388>)
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f001 fba6 	bl	8003ccc <my_print_str>
					my_print_str(out_s, "===============================\r\n", out_len, out_len_max);
 8002580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	497f      	ldr	r1, [pc, #508]	; (8002784 <Console_ParseCommand+0x384>)
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f001 fba0 	bl	8003ccc <my_print_str>

					_PRINT_PARAM ("rn ", rotate_speed,     " - rotate speed (turns per minute)");
 800258c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	497e      	ldr	r1, [pc, #504]	; (800278c <Console_ParseCommand+0x38c>)
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f001 fb9a 	bl	8003ccc <my_print_str>
 8002598:	4b7d      	ldr	r3, [pc, #500]	; (8002790 <Console_ParseCommand+0x390>)
 800259a:	6819      	ldr	r1, [r3, #0]
 800259c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	2205      	movs	r2, #5
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f001 fc23 	bl	8003df0 <my_print_int_a>
 80025aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	4979      	ldr	r1, [pc, #484]	; (8002794 <Console_ParseCommand+0x394>)
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f001 fb8b 	bl	8003ccc <my_print_str>
 80025b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	4977      	ldr	r1, [pc, #476]	; (8002798 <Console_ParseCommand+0x398>)
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f001 fb85 	bl	8003ccc <my_print_str>
					_PRINT_PARAM ("rd ", rotate_direction, " - rotate direction (0 - forward, 1 - reverse)");
 80025c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	4975      	ldr	r1, [pc, #468]	; (800279c <Console_ParseCommand+0x39c>)
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f001 fb7f 	bl	8003ccc <my_print_str>
 80025ce:	4b74      	ldr	r3, [pc, #464]	; (80027a0 <Console_ParseCommand+0x3a0>)
 80025d0:	6819      	ldr	r1, [r3, #0]
 80025d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2205      	movs	r2, #5
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f001 fc08 	bl	8003df0 <my_print_int_a>
 80025e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	496f      	ldr	r1, [pc, #444]	; (80027a4 <Console_ParseCommand+0x3a4>)
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f001 fb70 	bl	8003ccc <my_print_str>
 80025ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	4969      	ldr	r1, [pc, #420]	; (8002798 <Console_ParseCommand+0x398>)
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f001 fb6a 	bl	8003ccc <my_print_str>
					my_print_str(out_s, "rt<N>    - start rotate for N turns (0 - endless, <empty> - stop)\r\n\r\n",    out_len, out_len_max);
 80025f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	496a      	ldr	r1, [pc, #424]	; (80027a8 <Console_ParseCommand+0x3a8>)
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f001 fb64 	bl	8003ccc <my_print_str>

					my_print_str(out_s, "Left/Right arrow - move pump while key is pressed (for minimum 300ms)\r\n",    out_len, out_len_max);
 8002604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	4968      	ldr	r1, [pc, #416]	; (80027ac <Console_ParseCommand+0x3ac>)
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f001 fb5e 	bl	8003ccc <my_print_str>
					_PRINT_PARAM ("pms ", pump_manual_speed, " - manual pump movement speed (in 0.01 mm/sec)");
 8002610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	4966      	ldr	r1, [pc, #408]	; (80027b0 <Console_ParseCommand+0x3b0>)
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f001 fb58 	bl	8003ccc <my_print_str>
 800261c:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <Console_ParseCommand+0x3b4>)
 800261e:	6819      	ldr	r1, [r3, #0]
 8002620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2205      	movs	r2, #5
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f001 fbe1 	bl	8003df0 <my_print_int_a>
 800262e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	4961      	ldr	r1, [pc, #388]	; (80027b8 <Console_ParseCommand+0x3b8>)
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f001 fb49 	bl	8003ccc <my_print_str>
 800263a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	4956      	ldr	r1, [pc, #344]	; (8002798 <Console_ParseCommand+0x398>)
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f001 fb43 	bl	8003ccc <my_print_str>
					_PRINT_PARAM ("phs ", pump_home_speed,   " - home movement speed (in 0.01 mm/sec)");
 8002646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	495c      	ldr	r1, [pc, #368]	; (80027bc <Console_ParseCommand+0x3bc>)
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f001 fb3d 	bl	8003ccc <my_print_str>
 8002652:	4b5b      	ldr	r3, [pc, #364]	; (80027c0 <Console_ParseCommand+0x3c0>)
 8002654:	6819      	ldr	r1, [r3, #0]
 8002656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2205      	movs	r2, #5
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f001 fbc6 	bl	8003df0 <my_print_int_a>
 8002664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	4956      	ldr	r1, [pc, #344]	; (80027c4 <Console_ParseCommand+0x3c4>)
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f001 fb2e 	bl	8003ccc <my_print_str>
 8002670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	4948      	ldr	r1, [pc, #288]	; (8002798 <Console_ParseCommand+0x398>)
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f001 fb28 	bl	8003ccc <my_print_str>
					my_print_str(out_s, "ph        - move to Home\r\n\r\n",    out_len, out_len_max);
 800267c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	4951      	ldr	r1, [pc, #324]	; (80027c8 <Console_ParseCommand+0x3c8>)
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f001 fb22 	bl	8003ccc <my_print_str>

					my_print_str(out_s, "Dozing params and commands:\r\n", out_len, out_len_max);
 8002688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	494f      	ldr	r1, [pc, #316]	; (80027cc <Console_ParseCommand+0x3cc>)
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f001 fb1c 	bl	8003ccc <my_print_str>
					my_print_str(out_s, "---------------------------\r\n", out_len, out_len_max);
 8002694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	494d      	ldr	r1, [pc, #308]	; (80027d0 <Console_ParseCommand+0x3d0>)
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f001 fb16 	bl	8003ccc <my_print_str>

					_PRINT_PARAM ("rs ", rotate_step,       " - rotate step (in turns/rapes)");
 80026a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	494b      	ldr	r1, [pc, #300]	; (80027d4 <Console_ParseCommand+0x3d4>)
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f001 fb10 	bl	8003ccc <my_print_str>
 80026ac:	4b4a      	ldr	r3, [pc, #296]	; (80027d8 <Console_ParseCommand+0x3d8>)
 80026ae:	6819      	ldr	r1, [r3, #0]
 80026b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2205      	movs	r2, #5
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f001 fb99 	bl	8003df0 <my_print_int_a>
 80026be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	4946      	ldr	r1, [pc, #280]	; (80027dc <Console_ParseCommand+0x3dc>)
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f001 fb01 	bl	8003ccc <my_print_str>
 80026ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	4932      	ldr	r1, [pc, #200]	; (8002798 <Console_ParseCommand+0x398>)
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f001 fafb 	bl	8003ccc <my_print_str>
					_PRINT_PARAM ("rn ", rotate_speed,      " - rotate speed (turns per minute)");
 80026d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	492c      	ldr	r1, [pc, #176]	; (800278c <Console_ParseCommand+0x38c>)
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f001 faf5 	bl	8003ccc <my_print_str>
 80026e2:	4b2b      	ldr	r3, [pc, #172]	; (8002790 <Console_ParseCommand+0x390>)
 80026e4:	6819      	ldr	r1, [r3, #0]
 80026e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2205      	movs	r2, #5
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f001 fb7e 	bl	8003df0 <my_print_int_a>
 80026f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	4926      	ldr	r1, [pc, #152]	; (8002794 <Console_ParseCommand+0x394>)
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f001 fae6 	bl	8003ccc <my_print_str>
 8002700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	4924      	ldr	r1, [pc, #144]	; (8002798 <Console_ParseCommand+0x398>)
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f001 fae0 	bl	8003ccc <my_print_str>
					_PRINT_PARAM ("vd ", valve_delay,       " - delay after valve on and before start rotating (in ms)");
 800270c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	4933      	ldr	r1, [pc, #204]	; (80027e0 <Console_ParseCommand+0x3e0>)
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f001 fada 	bl	8003ccc <my_print_str>
 8002718:	4b32      	ldr	r3, [pc, #200]	; (80027e4 <Console_ParseCommand+0x3e4>)
 800271a:	6819      	ldr	r1, [r3, #0]
 800271c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2205      	movs	r2, #5
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f001 fb63 	bl	8003df0 <my_print_int_a>
 800272a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	492e      	ldr	r1, [pc, #184]	; (80027e8 <Console_ParseCommand+0x3e8>)
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f001 facb 	bl	8003ccc <my_print_str>
 8002736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	4917      	ldr	r1, [pc, #92]	; (8002798 <Console_ParseCommand+0x398>)
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f001 fac5 	bl	8003ccc <my_print_str>

					my_print_str(out_s, "p<i>f - pump move #i feed/step (in 0.01 mm, negative for reverse move)\r\n", out_len, out_len_max);
 8002742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	4929      	ldr	r1, [pc, #164]	; (80027ec <Console_ParseCommand+0x3ec>)
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f001 fabf 	bl	8003ccc <my_print_str>
					my_print_str(out_s, "p<i>s - pump move #i speed (in 0.01 mm/sec)\r\n", out_len, out_len_max);
 800274e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	4927      	ldr	r1, [pc, #156]	; (80027f0 <Console_ParseCommand+0x3f0>)
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f001 fab9 	bl	8003ccc <my_print_str>
					my_print_str(out_s, "p<i>d - delay before pump move #i (in ms)\r\n", out_len, out_len_max);
 800275a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	4925      	ldr	r1, [pc, #148]	; (80027f4 <Console_ParseCommand+0x3f4>)
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f001 fab3 	bl	8003ccc <my_print_str>
					my_print_str(out_s, "-----------------------\r\n", out_len, out_len_max);
 8002766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	4923      	ldr	r1, [pc, #140]	; (80027f8 <Console_ParseCommand+0x3f8>)
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f001 faad 	bl	8003ccc <my_print_str>
					my_print_str(out_s, "i:  p<i>f  p<i>s  p<i>d\r\n", out_len, out_len_max);
 8002772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	4921      	ldr	r1, [pc, #132]	; (80027fc <Console_ParseCommand+0x3fc>)
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f001 faa7 	bl	8003ccc <my_print_str>

					for (int i = 0; i < MOVES_COUNT; i++)
 800277e:	2300      	movs	r3, #0
 8002780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002782:	e074      	b.n	800286e <Console_ParseCommand+0x46e>
 8002784:	0800d784 	.word	0x0800d784
 8002788:	0800d7a8 	.word	0x0800d7a8
 800278c:	0800d7cc 	.word	0x0800d7cc
 8002790:	20000044 	.word	0x20000044
 8002794:	0800d7d0 	.word	0x0800d7d0
 8002798:	0800d7f4 	.word	0x0800d7f4
 800279c:	0800d7f8 	.word	0x0800d7f8
 80027a0:	2000026c 	.word	0x2000026c
 80027a4:	0800d7fc 	.word	0x0800d7fc
 80027a8:	0800d82c 	.word	0x0800d82c
 80027ac:	0800d874 	.word	0x0800d874
 80027b0:	0800d8bc 	.word	0x0800d8bc
 80027b4:	200012d8 	.word	0x200012d8
 80027b8:	0800d8c4 	.word	0x0800d8c4
 80027bc:	0800d8f4 	.word	0x0800d8f4
 80027c0:	20000030 	.word	0x20000030
 80027c4:	0800d8fc 	.word	0x0800d8fc
 80027c8:	0800d924 	.word	0x0800d924
 80027cc:	0800d944 	.word	0x0800d944
 80027d0:	0800d964 	.word	0x0800d964
 80027d4:	0800d984 	.word	0x0800d984
 80027d8:	20000040 	.word	0x20000040
 80027dc:	0800d988 	.word	0x0800d988
 80027e0:	0800d9a8 	.word	0x0800d9a8
 80027e4:	20000034 	.word	0x20000034
 80027e8:	0800d9ac 	.word	0x0800d9ac
 80027ec:	0800d9e8 	.word	0x0800d9e8
 80027f0:	0800da34 	.word	0x0800da34
 80027f4:	0800da64 	.word	0x0800da64
 80027f8:	0800da90 	.word	0x0800da90
 80027fc:	0800daac 	.word	0x0800daac
					{
						my_print_int(out_s, i+1, out_len, out_len_max);
 8002800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002802:	1c59      	adds	r1, r3, #1
 8002804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f001 fa89 	bl	8003d20 <my_print_int>
						my_print_str(out_s, ":", out_len, out_len_max);
 800280e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	49a6      	ldr	r1, [pc, #664]	; (8002aac <Console_ParseCommand+0x6ac>)
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f001 fa59 	bl	8003ccc <my_print_str>

						my_print_int_a(out_s, pump_feed [i], 7, out_len, out_len_max);
 800281a:	4aa5      	ldr	r2, [pc, #660]	; (8002ab0 <Console_ParseCommand+0x6b0>)
 800281c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800281e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2207      	movs	r2, #7
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f001 fae0 	bl	8003df0 <my_print_int_a>
						my_print_int_a(out_s, pump_speed[i], 7, out_len, out_len_max);
 8002830:	4aa0      	ldr	r2, [pc, #640]	; (8002ab4 <Console_ParseCommand+0x6b4>)
 8002832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002834:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2207      	movs	r2, #7
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f001 fad5 	bl	8003df0 <my_print_int_a>
						my_print_int_a(out_s, pump_delay[i], 7, out_len, out_len_max);
 8002846:	4a9c      	ldr	r2, [pc, #624]	; (8002ab8 <Console_ParseCommand+0x6b8>)
 8002848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800284a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800284e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2207      	movs	r2, #7
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f001 faca 	bl	8003df0 <my_print_int_a>
						my_print_str(out_s, "\r\n",        out_len, out_len_max);
 800285c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	4996      	ldr	r1, [pc, #600]	; (8002abc <Console_ParseCommand+0x6bc>)
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f001 fa32 	bl	8003ccc <my_print_str>
					for (int i = 0; i < MOVES_COUNT; i++)
 8002868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800286a:	3301      	adds	r3, #1
 800286c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800286e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002870:	2b04      	cmp	r3, #4
 8002872:	ddc5      	ble.n	8002800 <Console_ParseCommand+0x400>
					}
					my_print_str(out_s, "\r\n",    out_len, out_len_max);
 8002874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	4990      	ldr	r1, [pc, #576]	; (8002abc <Console_ParseCommand+0x6bc>)
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f001 fa26 	bl	8003ccc <my_print_str>

					my_print_str(out_s, "[ or { - start dozing\r\n",    out_len, out_len_max);
 8002880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	498e      	ldr	r1, [pc, #568]	; (8002ac0 <Console_ParseCommand+0x6c0>)
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f001 fa20 	bl	8003ccc <my_print_str>
					my_print_str(out_s, "\r\n",    out_len, out_len_max);
 800288c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	498a      	ldr	r1, [pc, #552]	; (8002abc <Console_ParseCommand+0x6bc>)
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f001 fa1a 	bl	8003ccc <my_print_str>

					error_in_cmd = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	643b      	str	r3, [r7, #64]	; 0x40
					break;
 800289c:	e1fd      	b.n	8002c9a <Console_ParseCommand+0x89a>
				}

				case 'r': // rotate stepper command
				{
					p++; // see next char
 800289e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028a0:	3301      	adds	r3, #1
 80028a2:	647b      	str	r3, [r7, #68]	; 0x44
					if (p == len) break;
 80028a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	f000 81eb 	beq.w	8002c84 <Console_ParseCommand+0x884>

					switch (s[p])
 80028ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	3b64      	subs	r3, #100	; 0x64
 80028b8:	2b10      	cmp	r3, #16
 80028ba:	f200 808d 	bhi.w	80029d8 <Console_ParseCommand+0x5d8>
 80028be:	a201      	add	r2, pc, #4	; (adr r2, 80028c4 <Console_ParseCommand+0x4c4>)
 80028c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c4:	08002937 	.word	0x08002937
 80028c8:	080029d9 	.word	0x080029d9
 80028cc:	080029d9 	.word	0x080029d9
 80028d0:	080029d9 	.word	0x080029d9
 80028d4:	080029d9 	.word	0x080029d9
 80028d8:	080029d9 	.word	0x080029d9
 80028dc:	080029d9 	.word	0x080029d9
 80028e0:	080029d9 	.word	0x080029d9
 80028e4:	080029d9 	.word	0x080029d9
 80028e8:	080029d9 	.word	0x080029d9
 80028ec:	08002909 	.word	0x08002909
 80028f0:	080029d9 	.word	0x080029d9
 80028f4:	080029d9 	.word	0x080029d9
 80028f8:	080029d9 	.word	0x080029d9
 80028fc:	080029d9 	.word	0x080029d9
 8002900:	080029ab 	.word	0x080029ab
 8002904:	08002963 	.word	0x08002963
					{
						case 'n': // rn - rotate speed in turns per minute
						{
							int param;
							if ((ParseParam(s, p, len, &param)) &&
 8002908:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f7ff fd0f 	bl	8002334 <ParseParam>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d05f      	beq.n	80029dc <Console_ParseCommand+0x5dc>
								((param > 0) || (param <= 1200)))
 800291c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
							if ((ParseParam(s, p, len, &param)) &&
 800291e:	2b00      	cmp	r3, #0
 8002920:	dc03      	bgt.n	800292a <Console_ParseCommand+0x52a>
								((param > 0) || (param <= 1200)))
 8002922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002924:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002928:	dc58      	bgt.n	80029dc <Console_ParseCommand+0x5dc>
							{
								rotate_speed = param; // in turns per minute (RPM)
 800292a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292c:	4a65      	ldr	r2, [pc, #404]	; (8002ac4 <Console_ParseCommand+0x6c4>)
 800292e:	6013      	str	r3, [r2, #0]
								error_in_cmd = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	643b      	str	r3, [r7, #64]	; 0x40
							}
							break;
 8002934:	e052      	b.n	80029dc <Console_ParseCommand+0x5dc>
						}

						case 'd': // rd - rotate direction: 0 - forward, 1 - reverse
						{
							int param;
							if ((ParseParam(s, p, len, &param)) &&
 8002936:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f7ff fcf8 	bl	8002334 <ParseParam>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d04a      	beq.n	80029e0 <Console_ParseCommand+0x5e0>
								((param == 0) || (param == 1)))
 800294a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
							if ((ParseParam(s, p, len, &param)) &&
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <Console_ParseCommand+0x556>
								((param == 0) || (param == 1)))
 8002950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002952:	2b01      	cmp	r3, #1
 8002954:	d144      	bne.n	80029e0 <Console_ParseCommand+0x5e0>
							{
								rotate_direction = param;
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	4a5b      	ldr	r2, [pc, #364]	; (8002ac8 <Console_ParseCommand+0x6c8>)
 800295a:	6013      	str	r3, [r2, #0]
								error_in_cmd = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	643b      	str	r3, [r7, #64]	; 0x40
							}
							break;
 8002960:	e03e      	b.n	80029e0 <Console_ParseCommand+0x5e0>
						}

						case 't': // rt - rotate turns: 0 - infinity, starts turning
						{
							int param;
							if ((ParseParam(s, p, len, &param)) &&
 8002962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f7ff fce2 	bl	8002334 <ParseParam>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <Console_ParseCommand+0x58c>
								((param >= 0) || (param < 1000)))
 8002976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
							if ((ParseParam(s, p, len, &param)) &&
 8002978:	2b00      	cmp	r3, #0
 800297a:	da03      	bge.n	8002984 <Console_ParseCommand+0x584>
								((param >= 0) || (param < 1000)))
 800297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002982:	da03      	bge.n	800298c <Console_ParseCommand+0x58c>
							{
								// start turning
								rotate_turns = param;
 8002984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002986:	4a51      	ldr	r2, [pc, #324]	; (8002acc <Console_ParseCommand+0x6cc>)
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	e003      	b.n	8002994 <Console_ParseCommand+0x594>
							}
							else // no param ?
							{
								// stop turning
								rotate_turns = -1;
 800298c:	4b4f      	ldr	r3, [pc, #316]	; (8002acc <Console_ParseCommand+0x6cc>)
 800298e:	f04f 32ff 	mov.w	r2, #4294967295
 8002992:	601a      	str	r2, [r3, #0]
							}

							if (user_cmd == CMD_IDLE)  user_cmd = CMD_UPDATE_ROTATE_TURNS;
 8002994:	4b4e      	ldr	r3, [pc, #312]	; (8002ad0 <Console_ParseCommand+0x6d0>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d102      	bne.n	80029a4 <Console_ParseCommand+0x5a4>
 800299e:	4b4c      	ldr	r3, [pc, #304]	; (8002ad0 <Console_ParseCommand+0x6d0>)
 80029a0:	2202      	movs	r2, #2
 80029a2:	701a      	strb	r2, [r3, #0]
							error_in_cmd = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	643b      	str	r3, [r7, #64]	; 0x40

							break;
 80029a8:	e01d      	b.n	80029e6 <Console_ParseCommand+0x5e6>
						}

						case 's': // rs - rotate step
						{
							int param;
							if ((ParseParam(s, p, len, &param)) &&
 80029aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f7ff fcbe 	bl	8002334 <ParseParam>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d012      	beq.n	80029e4 <Console_ParseCommand+0x5e4>
								((param > 0) || (param <= 600)))
 80029be:	6abb      	ldr	r3, [r7, #40]	; 0x28
							if ((ParseParam(s, p, len, &param)) &&
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	dc03      	bgt.n	80029cc <Console_ParseCommand+0x5cc>
								((param > 0) || (param <= 600)))
 80029c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80029ca:	dc0b      	bgt.n	80029e4 <Console_ParseCommand+0x5e4>
							{
								rotate_step = param; // in turns
 80029cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ce:	4a41      	ldr	r2, [pc, #260]	; (8002ad4 <Console_ParseCommand+0x6d4>)
 80029d0:	6013      	str	r3, [r2, #0]
								error_in_cmd = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	643b      	str	r3, [r7, #64]	; 0x40
							}
							break;
 80029d6:	e005      	b.n	80029e4 <Console_ParseCommand+0x5e4>
						}

						default: break;
 80029d8:	bf00      	nop
 80029da:	e15e      	b.n	8002c9a <Console_ParseCommand+0x89a>
							break;
 80029dc:	bf00      	nop
 80029de:	e15c      	b.n	8002c9a <Console_ParseCommand+0x89a>
							break;
 80029e0:	bf00      	nop
 80029e2:	e15a      	b.n	8002c9a <Console_ParseCommand+0x89a>
							break;
 80029e4:	bf00      	nop
					}

					break;
 80029e6:	e158      	b.n	8002c9a <Console_ParseCommand+0x89a>
				}

				case 'p': // pump stepper command
				{
					p++; // see next char
 80029e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ea:	3301      	adds	r3, #1
 80029ec:	647b      	str	r3, [r7, #68]	; 0x44
					if (p == len) break;
 80029ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	f000 8148 	beq.w	8002c88 <Console_ParseCommand+0x888>

					switch (s[p])
 80029f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4413      	add	r3, r2
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b68      	cmp	r3, #104	; 0x68
 8002a02:	d025      	beq.n	8002a50 <Console_ParseCommand+0x650>
 8002a04:	2b6d      	cmp	r3, #109	; 0x6d
 8002a06:	d16b      	bne.n	8002ae0 <Console_ParseCommand+0x6e0>
					{
						case 'm': // pm
						{
							p++; // see next char
 8002a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	647b      	str	r3, [r7, #68]	; 0x44
							if (p == len) break;
 8002a0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	f000 80c5 	beq.w	8002ba2 <Console_ParseCommand+0x7a2>

							if (s[p] == 's') // pms - pump speed in manual control
 8002a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b73      	cmp	r3, #115	; 0x73
 8002a22:	f040 80c0 	bne.w	8002ba6 <Console_ParseCommand+0x7a6>
							{
								int param;
								if ((ParseParam(s, p, len, &param)) &&
 8002a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f7ff fc80 	bl	8002334 <ParseParam>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 80b5 	beq.w	8002ba6 <Console_ParseCommand+0x7a6>
									(param > 0))
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
								if ((ParseParam(s, p, len, &param)) &&
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f340 80b1 	ble.w	8002ba6 <Console_ParseCommand+0x7a6>
								{
									pump_manual_speed = param; // in 0.01 mm/sec
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	4a24      	ldr	r2, [pc, #144]	; (8002ad8 <Console_ParseCommand+0x6d8>)
 8002a48:	6013      	str	r3, [r2, #0]
									error_in_cmd = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	643b      	str	r3, [r7, #64]	; 0x40
								}
							}
							break;
 8002a4e:	e0aa      	b.n	8002ba6 <Console_ParseCommand+0x7a6>
						}

						case 'h': // pump home
						{
							p++; // see next char
 8002a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a52:	3301      	adds	r3, #1
 8002a54:	647b      	str	r3, [r7, #68]	; 0x44

							if (p == len) // ph - pump home movement
 8002a56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d10a      	bne.n	8002a74 <Console_ParseCommand+0x674>
							{
								if (user_cmd == CMD_IDLE)  user_cmd = CMD_GO_HOME;
 8002a5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ad0 <Console_ParseCommand+0x6d0>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d102      	bne.n	8002a6e <Console_ParseCommand+0x66e>
 8002a68:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <Console_ParseCommand+0x6d0>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	701a      	strb	r2, [r3, #0]
								error_in_cmd = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	643b      	str	r3, [r7, #64]	; 0x40
								{
									pump_home_speed = param; // in 0.01 mm/sec
									error_in_cmd = 0;
								}
							}
							break;
 8002a72:	e09a      	b.n	8002baa <Console_ParseCommand+0x7aa>
							else if (s[p] == 's') // phs - pump home speed
 8002a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4413      	add	r3, r2
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b73      	cmp	r3, #115	; 0x73
 8002a7e:	f040 8094 	bne.w	8002baa <Console_ParseCommand+0x7aa>
								if ((ParseParam(s, p, len, &param)) &&
 8002a82:	f107 0320 	add.w	r3, r7, #32
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f7ff fc52 	bl	8002334 <ParseParam>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 8089 	beq.w	8002baa <Console_ParseCommand+0x7aa>
									(param > 0))
 8002a98:	6a3b      	ldr	r3, [r7, #32]
								if ((ParseParam(s, p, len, &param)) &&
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f340 8085 	ble.w	8002baa <Console_ParseCommand+0x7aa>
									pump_home_speed = param; // in 0.01 mm/sec
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	4a0e      	ldr	r2, [pc, #56]	; (8002adc <Console_ParseCommand+0x6dc>)
 8002aa4:	6013      	str	r3, [r2, #0]
									error_in_cmd = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	643b      	str	r3, [r7, #64]	; 0x40
							break;
 8002aaa:	e07e      	b.n	8002baa <Console_ParseCommand+0x7aa>
 8002aac:	0800dac8 	.word	0x0800dac8
 8002ab0:	20000004 	.word	0x20000004
 8002ab4:	20000018 	.word	0x20000018
 8002ab8:	20000250 	.word	0x20000250
 8002abc:	0800d7f4 	.word	0x0800d7f4
 8002ac0:	0800dacc 	.word	0x0800dacc
 8002ac4:	20000044 	.word	0x20000044
 8002ac8:	2000026c 	.word	0x2000026c
 8002acc:	20000048 	.word	0x20000048
 8002ad0:	200012dc 	.word	0x200012dc
 8002ad4:	20000040 	.word	0x20000040
 8002ad8:	200012d8 	.word	0x200012d8
 8002adc:	20000030 	.word	0x20000030
						}

						default:
						{
							if ((s[p] >= '1') && (s[p] <= '0'+MOVES_COUNT)) // if i-move
 8002ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b30      	cmp	r3, #48	; 0x30
 8002aea:	d960      	bls.n	8002bae <Console_ParseCommand+0x7ae>
 8002aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4413      	add	r3, r2
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b35      	cmp	r3, #53	; 0x35
 8002af6:	d85a      	bhi.n	8002bae <Console_ParseCommand+0x7ae>
							{
								int i = s[p]-'0'-1; // move index (number-1)
 8002af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4413      	add	r3, r2
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	3b31      	subs	r3, #49	; 0x31
 8002b02:	63bb      	str	r3, [r7, #56]	; 0x38

								p++; // see next char
 8002b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b06:	3301      	adds	r3, #1
 8002b08:	647b      	str	r3, [r7, #68]	; 0x44
								if (p == len) break;
 8002b0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d04f      	beq.n	8002bb2 <Console_ParseCommand+0x7b2>

								switch (s[p])
 8002b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4413      	add	r3, r2
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b73      	cmp	r3, #115	; 0x73
 8002b1c:	d017      	beq.n	8002b4e <Console_ParseCommand+0x74e>
 8002b1e:	2b73      	cmp	r3, #115	; 0x73
 8002b20:	dc49      	bgt.n	8002bb6 <Console_ParseCommand+0x7b6>
 8002b22:	2b64      	cmp	r3, #100	; 0x64
 8002b24:	d028      	beq.n	8002b78 <Console_ParseCommand+0x778>
 8002b26:	2b66      	cmp	r3, #102	; 0x66
 8002b28:	d145      	bne.n	8002bb6 <Console_ParseCommand+0x7b6>
								{
									case 'f': // p<i>f - pump move feed/step
									{
										int param;
										if (ParseParam(s, p, len, &param))
 8002b2a:	f107 031c 	add.w	r3, r7, #28
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f7ff fbfe 	bl	8002334 <ParseParam>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d03d      	beq.n	8002bba <Console_ParseCommand+0x7ba>
										{
											pump_feed[i] = param; // in 0.01 mm
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	495c      	ldr	r1, [pc, #368]	; (8002cb4 <Console_ParseCommand+0x8b4>)
 8002b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
											error_in_cmd = 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	643b      	str	r3, [r7, #64]	; 0x40
										}
										break;
 8002b4c:	e035      	b.n	8002bba <Console_ParseCommand+0x7ba>
									}

									case 's': // p<i>s - pump move step
									{
										int param;
										if ((ParseParam(s, p, len, &param)) &&
 8002b4e:	f107 0318 	add.w	r3, r7, #24
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f7ff fbec 	bl	8002334 <ParseParam>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d02d      	beq.n	8002bbe <Console_ParseCommand+0x7be>
											(param > 0))
 8002b62:	69bb      	ldr	r3, [r7, #24]
										if ((ParseParam(s, p, len, &param)) &&
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	dd2a      	ble.n	8002bbe <Console_ParseCommand+0x7be>
										{
											pump_speed[i] = param; // in 0.01 mm/sec
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4953      	ldr	r1, [pc, #332]	; (8002cb8 <Console_ParseCommand+0x8b8>)
 8002b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
											error_in_cmd = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	643b      	str	r3, [r7, #64]	; 0x40
										}
										break;
 8002b76:	e022      	b.n	8002bbe <Console_ParseCommand+0x7be>
									}
									case 'd': // p<i>d - delay before pump move
									{
										int param;
										if ((ParseParam(s, p, len, &param)) &&
 8002b78:	f107 0314 	add.w	r3, r7, #20
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f7ff fbd7 	bl	8002334 <ParseParam>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d01a      	beq.n	8002bc2 <Console_ParseCommand+0x7c2>
											(param >= 0))
 8002b8c:	697b      	ldr	r3, [r7, #20]
										if ((ParseParam(s, p, len, &param)) &&
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	db17      	blt.n	8002bc2 <Console_ParseCommand+0x7c2>
										{
											pump_delay[i] = param; // in ms
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4949      	ldr	r1, [pc, #292]	; (8002cbc <Console_ParseCommand+0x8bc>)
 8002b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
											error_in_cmd = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	643b      	str	r3, [r7, #64]	; 0x40
										}
										break;
 8002ba0:	e00f      	b.n	8002bc2 <Console_ParseCommand+0x7c2>
							if (p == len) break;
 8002ba2:	bf00      	nop
 8002ba4:	e079      	b.n	8002c9a <Console_ParseCommand+0x89a>
							break;
 8002ba6:	bf00      	nop
 8002ba8:	e077      	b.n	8002c9a <Console_ParseCommand+0x89a>
							break;
 8002baa:	bf00      	nop
 8002bac:	e075      	b.n	8002c9a <Console_ParseCommand+0x89a>
									}

									default: break;
								}

							}
 8002bae:	bf00      	nop
 8002bb0:	e073      	b.n	8002c9a <Console_ParseCommand+0x89a>
								if (p == len) break;
 8002bb2:	bf00      	nop
 8002bb4:	e071      	b.n	8002c9a <Console_ParseCommand+0x89a>
									default: break;
 8002bb6:	bf00      	nop
 8002bb8:	e06f      	b.n	8002c9a <Console_ParseCommand+0x89a>
										break;
 8002bba:	bf00      	nop
 8002bbc:	e06d      	b.n	8002c9a <Console_ParseCommand+0x89a>
										break;
 8002bbe:	bf00      	nop
 8002bc0:	e06b      	b.n	8002c9a <Console_ParseCommand+0x89a>
										break;
 8002bc2:	bf00      	nop
						}
					}

					break;
 8002bc4:	e069      	b.n	8002c9a <Console_ParseCommand+0x89a>
				}

				case 'v': // valve command
				{
					p++; // see next char
 8002bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc8:	3301      	adds	r3, #1
 8002bca:	647b      	str	r3, [r7, #68]	; 0x44
					if (p == len) break;
 8002bcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d05b      	beq.n	8002c8c <Console_ParseCommand+0x88c>

					if (s[p] == 'd') // vd - delay after valve on and before start rotating
 8002bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4413      	add	r3, r2
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b64      	cmp	r3, #100	; 0x64
 8002bde:	d157      	bne.n	8002c90 <Console_ParseCommand+0x890>
					{
						int param;
						if ((ParseParam(s, p, len, &param)) &&
 8002be0:	f107 0310 	add.w	r3, r7, #16
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f7ff fba3 	bl	8002334 <ParseParam>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d04d      	beq.n	8002c90 <Console_ParseCommand+0x890>
							(param >= 0))
 8002bf4:	693b      	ldr	r3, [r7, #16]
						if ((ParseParam(s, p, len, &param)) &&
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	db4a      	blt.n	8002c90 <Console_ParseCommand+0x890>
						{
							valve_delay = param; // in 0.01 mm
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4a30      	ldr	r2, [pc, #192]	; (8002cc0 <Console_ParseCommand+0x8c0>)
 8002bfe:	6013      	str	r3, [r2, #0]
							error_in_cmd = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	643b      	str	r3, [r7, #64]	; 0x40
						}
					}
					break;
 8002c04:	e044      	b.n	8002c90 <Console_ParseCommand+0x890>
				}

				case '{': // pump stepper command
				case '[':
				{
					if (user_cmd == CMD_IDLE)  user_cmd = CMD_START_DOZING;
 8002c06:	4b2f      	ldr	r3, [pc, #188]	; (8002cc4 <Console_ParseCommand+0x8c4>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d102      	bne.n	8002c16 <Console_ParseCommand+0x816>
 8002c10:	4b2c      	ldr	r3, [pc, #176]	; (8002cc4 <Console_ParseCommand+0x8c4>)
 8002c12:	2204      	movs	r2, #4
 8002c14:	701a      	strb	r2, [r3, #0]
					error_in_cmd = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	643b      	str	r3, [r7, #64]	; 0x40
					break;
 8002c1a:	e03e      	b.n	8002c9a <Console_ParseCommand+0x89a>
				}


				case 27: // escape chars
				{
					p++; // see next char
 8002c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c1e:	3301      	adds	r3, #1
 8002c20:	647b      	str	r3, [r7, #68]	; 0x44
					if (p == len) break;
 8002c22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d034      	beq.n	8002c94 <Console_ParseCommand+0x894>

					if ((s[p] == 'D') || (s[p] == 'C')) // Left / Right arrow
 8002c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4413      	add	r3, r2
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b44      	cmp	r3, #68	; 0x44
 8002c34:	d005      	beq.n	8002c42 <Console_ParseCommand+0x842>
 8002c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b43      	cmp	r3, #67	; 0x43
 8002c40:	d12a      	bne.n	8002c98 <Console_ParseCommand+0x898>
					{
						if ((user_cmd == CMD_IDLE) || (user_cmd == CMD_MOVE_WITH_ARROWS))
 8002c42:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <Console_ParseCommand+0x8c4>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d004      	beq.n	8002c56 <Console_ParseCommand+0x856>
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <Console_ParseCommand+0x8c4>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d111      	bne.n	8002c7a <Console_ParseCommand+0x87a>
						{
							pump_direction = (s[p] == 'D') ? 0 : 1; // Left arrow
 8002c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b44      	cmp	r3, #68	; 0x44
 8002c60:	bf14      	ite	ne
 8002c62:	2301      	movne	r3, #1
 8002c64:	2300      	moveq	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4b17      	ldr	r3, [pc, #92]	; (8002cc8 <Console_ParseCommand+0x8c8>)
 8002c6c:	601a      	str	r2, [r3, #0]
							pump_cmd_timeout = 30; // in 10ms, e.g. 100 is equal 100*10ms = 1000ms
 8002c6e:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <Console_ParseCommand+0x8cc>)
 8002c70:	221e      	movs	r2, #30
 8002c72:	601a      	str	r2, [r3, #0]
							user_cmd = CMD_MOVE_WITH_ARROWS;
 8002c74:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <Console_ParseCommand+0x8c4>)
 8002c76:	2203      	movs	r2, #3
 8002c78:	701a      	strb	r2, [r3, #0]
						}
						error_in_cmd = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	643b      	str	r3, [r7, #64]	; 0x40
					}
					break;
 8002c7e:	e00b      	b.n	8002c98 <Console_ParseCommand+0x898>
				}

				default: break;
 8002c80:	bf00      	nop
 8002c82:	e00a      	b.n	8002c9a <Console_ParseCommand+0x89a>
					if (p == len) break;
 8002c84:	bf00      	nop
 8002c86:	e008      	b.n	8002c9a <Console_ParseCommand+0x89a>
					if (p == len) break;
 8002c88:	bf00      	nop
 8002c8a:	e006      	b.n	8002c9a <Console_ParseCommand+0x89a>
					if (p == len) break;
 8002c8c:	bf00      	nop
 8002c8e:	e004      	b.n	8002c9a <Console_ParseCommand+0x89a>
					break;
 8002c90:	bf00      	nop
 8002c92:	e002      	b.n	8002c9a <Console_ParseCommand+0x89a>
					if (p == len) break;
 8002c94:	bf00      	nop
 8002c96:	e000      	b.n	8002c9a <Console_ParseCommand+0x89a>
					break;
 8002c98:	bf00      	nop

			} // switch (first char)

			if (error_in_cmd)
 8002c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <Console_ParseCommand+0x8ac>
				my_print_str(out_s, "Error in command", out_len, out_len_max);
 8002ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	490a      	ldr	r1, [pc, #40]	; (8002cd0 <Console_ParseCommand+0x8d0>)
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f001 f810 	bl	8003ccc <my_print_str>
		} // if (p<len)
	} // if (len)
}
 8002cac:	bf00      	nop
 8002cae:	3748      	adds	r7, #72	; 0x48
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000004 	.word	0x20000004
 8002cb8:	20000018 	.word	0x20000018
 8002cbc:	20000250 	.word	0x20000250
 8002cc0:	20000034 	.word	0x20000034
 8002cc4:	200012dc 	.word	0x200012dc
 8002cc8:	20000264 	.word	0x20000264
 8002ccc:	200011ec 	.word	0x200011ec
 8002cd0:	0800dae4 	.word	0x0800dae4

08002cd4 <TIM1_UP_IRQHandler>:
#define TIM_PUMP_CLOCK_ON     __HAL_RCC_TIM1_CLK_ENABLE()
#define TIM_ROTATE_CLOCK_ON   __HAL_RCC_TIM2_CLK_ENABLE()
#define TIM_CNC_DEL_CLOCK_ON  __HAL_RCC_TIM3_CLK_ENABLE()

void TIM1_UP_IRQHandler()
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
    CNC_ISR(0);
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f7fe f997 	bl	800100c <CNC_ISR>
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <TIM2_IRQHandler>:

void TIM2_IRQHandler()
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	af00      	add	r7, sp, #0
	CNC_ISR(1);
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	f7fe f990 	bl	800100c <CNC_ISR>
}
 8002cec:	bf00      	nop
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <Init_CNC>:


void Init_CNC()
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
	// Check defines above.
	// From TIM ISR call CNC_ISR(m).
	// Correct cnc.pulse_width for CNC_Del

    // Настройка таймеров для CNC
	TIM_PUMP_CLOCK_ON;   // on TIM clock
 8002cf6:	4b68      	ldr	r3, [pc, #416]	; (8002e98 <Init_CNC+0x1a8>)
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	4a67      	ldr	r2, [pc, #412]	; (8002e98 <Init_CNC+0x1a8>)
 8002cfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d00:	6193      	str	r3, [r2, #24]
 8002d02:	4b65      	ldr	r3, [pc, #404]	; (8002e98 <Init_CNC+0x1a8>)
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
	TIM_ROTATE_CLOCK_ON;   // on TIM clock
 8002d0e:	4b62      	ldr	r3, [pc, #392]	; (8002e98 <Init_CNC+0x1a8>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	4a61      	ldr	r2, [pc, #388]	; (8002e98 <Init_CNC+0x1a8>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	61d3      	str	r3, [r2, #28]
 8002d1a:	4b5f      	ldr	r3, [pc, #380]	; (8002e98 <Init_CNC+0x1a8>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	68bb      	ldr	r3, [r7, #8]

    TIM_PUMP->CR1   = 0;
 8002d26:	4b5d      	ldr	r3, [pc, #372]	; (8002e9c <Init_CNC+0x1ac>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
    TIM_ROTATE->CR1 = 0;
 8002d2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
    TIM_PUMP->PSC   = TIM_PUMP_CLK-1;
 8002d34:	f005 fef8 	bl	8008b28 <HAL_RCC_GetPCLK1Freq>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4a58      	ldr	r2, [pc, #352]	; (8002ea0 <Init_CNC+0x1b0>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	0c9b      	lsrs	r3, r3, #18
 8002d44:	4a55      	ldr	r2, [pc, #340]	; (8002e9c <Init_CNC+0x1ac>)
 8002d46:	3b01      	subs	r3, #1
 8002d48:	6293      	str	r3, [r2, #40]	; 0x28
    TIM_ROTATE->PSC = TIM_ROTATE_CLK-1;
 8002d4a:	f005 ff01 	bl	8008b50 <HAL_RCC_GetPCLK2Freq>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4a53      	ldr	r2, [pc, #332]	; (8002ea0 <Init_CNC+0x1b0>)
 8002d54:	fba2 2303 	umull	r2, r3, r2, r3
 8002d58:	0c9b      	lsrs	r3, r3, #18
 8002d5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	6293      	str	r3, [r2, #40]	; 0x28
    NVIC_SetPriority(TIM_PUMP_IRQn,   0);
 8002d62:	2100      	movs	r1, #0
 8002d64:	2019      	movs	r0, #25
 8002d66:	f7ff f8f5 	bl	8001f54 <__NVIC_SetPriority>
    NVIC_SetPriority(TIM_ROTATE_IRQn, 0);
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	201c      	movs	r0, #28
 8002d6e:	f7ff f8f1 	bl	8001f54 <__NVIC_SetPriority>
    NVIC_EnableIRQ  (TIM_PUMP_IRQn);
 8002d72:	2019      	movs	r0, #25
 8002d74:	f7ff f8d2 	bl	8001f1c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ  (TIM_ROTATE_IRQn);
 8002d78:	201c      	movs	r0, #28
 8002d7a:	f7ff f8cf 	bl	8001f1c <__NVIC_EnableIRQ>

    DBGMCU->TIM_PUMP_DBG_REG   |= TIM_PUMP_DBG_BIT;
 8002d7e:	4b49      	ldr	r3, [pc, #292]	; (8002ea4 <Init_CNC+0x1b4>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4a48      	ldr	r2, [pc, #288]	; (8002ea4 <Init_CNC+0x1b4>)
 8002d84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d88:	6053      	str	r3, [r2, #4]
    DBGMCU->TIM_ROTATE_DBG_REG |= TIM_ROTATE_DBG_BIT;
 8002d8a:	4b46      	ldr	r3, [pc, #280]	; (8002ea4 <Init_CNC+0x1b4>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4a45      	ldr	r2, [pc, #276]	; (8002ea4 <Init_CNC+0x1b4>)
 8002d90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d94:	6053      	str	r3, [r2, #4]

	// CNC delay timer
	TIM_CNC_DEL_CLOCK_ON;
 8002d96:	4b40      	ldr	r3, [pc, #256]	; (8002e98 <Init_CNC+0x1a8>)
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	4a3f      	ldr	r2, [pc, #252]	; (8002e98 <Init_CNC+0x1a8>)
 8002d9c:	f043 0302 	orr.w	r3, r3, #2
 8002da0:	61d3      	str	r3, [r2, #28]
 8002da2:	4b3d      	ldr	r3, [pc, #244]	; (8002e98 <Init_CNC+0x1a8>)
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	607b      	str	r3, [r7, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
	TIM_CNC_DEL->CR1 = 0 | TIM_CR1_OPM; // one pulse mode
 8002dae:	4b3e      	ldr	r3, [pc, #248]	; (8002ea8 <Init_CNC+0x1b8>)
 8002db0:	2208      	movs	r2, #8
 8002db2:	601a      	str	r2, [r3, #0]
	TIM_CNC_DEL->PSC = TIM_CNC_DEL_CLK-1;
 8002db4:	f005 fecc 	bl	8008b50 <HAL_RCC_GetPCLK2Freq>
 8002db8:	4603      	mov	r3, r0
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	4a3b      	ldr	r2, [pc, #236]	; (8002eac <Init_CNC+0x1bc>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	0d9b      	lsrs	r3, r3, #22
 8002dc4:	4a38      	ldr	r2, [pc, #224]	; (8002ea8 <Init_CNC+0x1b8>)
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	6293      	str	r3, [r2, #40]	; 0x28
	TIM_CNC_DEL->ARR = CNC_DEL; /* 0.1us * 20 = 2us */
 8002dca:	4b37      	ldr	r3, [pc, #220]	; (8002ea8 <Init_CNC+0x1b8>)
 8002dcc:	220f      	movs	r2, #15
 8002dce:	62da      	str	r2, [r3, #44]	; 0x2c
	DBGMCU->TIM_CNC_DEL_DBG_REG |= TIM_CNC_DEL_DBG_BIT;
 8002dd0:	4b34      	ldr	r3, [pc, #208]	; (8002ea4 <Init_CNC+0x1b4>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	4a33      	ldr	r2, [pc, #204]	; (8002ea4 <Init_CNC+0x1b4>)
 8002dd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dda:	6053      	str	r3, [r2, #4]

    cnc.enable_port = 0;
 8002ddc:	4b34      	ldr	r3, [pc, #208]	; (8002eb0 <Init_CNC+0x1c0>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	669a      	str	r2, [r3, #104]	; 0x68
    cnc.del_tim = TIM_CNC_DEL;
 8002de2:	4b33      	ldr	r3, [pc, #204]	; (8002eb0 <Init_CNC+0x1c0>)
 8002de4:	4a30      	ldr	r2, [pc, #192]	; (8002ea8 <Init_CNC+0x1b8>)
 8002de6:	671a      	str	r2, [r3, #112]	; 0x70

    // PUMP
    cnc.m[0].dir_port  = PUMP_DIR_GPIO_Port;
 8002de8:	4b31      	ldr	r3, [pc, #196]	; (8002eb0 <Init_CNC+0x1c0>)
 8002dea:	4a32      	ldr	r2, [pc, #200]	; (8002eb4 <Init_CNC+0x1c4>)
 8002dec:	601a      	str	r2, [r3, #0]
    cnc.m[0].dir_pin   = PUMP_DIR_Pin;
 8002dee:	4b30      	ldr	r3, [pc, #192]	; (8002eb0 <Init_CNC+0x1c0>)
 8002df0:	2210      	movs	r2, #16
 8002df2:	809a      	strh	r2, [r3, #4]
    cnc.m[0].dir_inv   = 1;
 8002df4:	4b2e      	ldr	r3, [pc, #184]	; (8002eb0 <Init_CNC+0x1c0>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	615a      	str	r2, [r3, #20]
    cnc.m[0].dir_delay = 2; // in CNC_Del() count
 8002dfa:	4b2d      	ldr	r3, [pc, #180]	; (8002eb0 <Init_CNC+0x1c0>)
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	619a      	str	r2, [r3, #24]
    cnc.m[0].step_port = PUMP_STEP_GPIO_Port;
 8002e00:	4b2b      	ldr	r3, [pc, #172]	; (8002eb0 <Init_CNC+0x1c0>)
 8002e02:	4a2c      	ldr	r2, [pc, #176]	; (8002eb4 <Init_CNC+0x1c4>)
 8002e04:	609a      	str	r2, [r3, #8]
    cnc.m[0].step_pin  = PUMP_STEP_Pin;
 8002e06:	4b2a      	ldr	r3, [pc, #168]	; (8002eb0 <Init_CNC+0x1c0>)
 8002e08:	2220      	movs	r2, #32
 8002e0a:	819a      	strh	r2, [r3, #12]
//    cnc.m[0].limit     = HOME_X;
//    cnc.m[0].limit_inv = 0;
    cnc.m[0].tim       = TIM_PUMP;
 8002e0c:	4b28      	ldr	r3, [pc, #160]	; (8002eb0 <Init_CNC+0x1c0>)
 8002e0e:	4a23      	ldr	r2, [pc, #140]	; (8002e9c <Init_CNC+0x1ac>)
 8002e10:	611a      	str	r2, [r3, #16]
    cnc.m[0].mm        = 400;
 8002e12:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <Init_CNC+0x1c0>)
 8002e14:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002e18:	629a      	str	r2, [r3, #40]	; 0x28
					// 400 - 3200 pulses/rev - 2,5 um/pulse
					// 200 - 1600 pulses/rev - 5   um/pulse
					// 100 -  800 pulses/rev - 10  um/pulse
    cnc.m[0].home_ofs  = 200;
 8002e1a:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <Init_CNC+0x1c0>)
 8002e1c:	22c8      	movs	r2, #200	; 0xc8
 8002e1e:	621a      	str	r2, [r3, #32]
    cnc.m[0].x_max     = 23400;
 8002e20:	4b23      	ldr	r3, [pc, #140]	; (8002eb0 <Init_CNC+0x1c0>)
 8002e22:	f645 3268 	movw	r2, #23400	; 0x5b68
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24

    cnc.m[0].Anom      = 100000; // 0.01 mm/sec^2
 8002e28:	4b21      	ldr	r3, [pc, #132]	; (8002eb0 <Init_CNC+0x1c0>)
 8002e2a:	4a23      	ldr	r2, [pc, #140]	; (8002eb8 <Init_CNC+0x1c8>)
 8002e2c:	62da      	str	r2, [r3, #44]	; 0x2c
    cnc.m[0].Vnom/*[CNC_SPEED_NORMAL]*/ = 1000; // 0.01 mm/sec
 8002e2e:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <Init_CNC+0x1c0>)
 8002e30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e34:	631a      	str	r2, [r3, #48]	; 0x30
    //cnc.m[0].Vnom[CNC_SPEED_SLOW  ] = 1000; // 0.01 mm/sec

    // ROTATE
    cnc.m[1].dir_port  = ROTATE_DIR_GPIO_Port;
 8002e36:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <Init_CNC+0x1c0>)
 8002e38:	4a20      	ldr	r2, [pc, #128]	; (8002ebc <Init_CNC+0x1cc>)
 8002e3a:	635a      	str	r2, [r3, #52]	; 0x34
    cnc.m[1].dir_pin   = ROTATE_DIR_Pin;
 8002e3c:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <Init_CNC+0x1c0>)
 8002e3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e42:	871a      	strh	r2, [r3, #56]	; 0x38
    cnc.m[1].dir_inv   = 1;
 8002e44:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <Init_CNC+0x1c0>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	649a      	str	r2, [r3, #72]	; 0x48
    cnc.m[1].dir_delay = 2; // in CNC_Del() count
 8002e4a:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <Init_CNC+0x1c0>)
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	64da      	str	r2, [r3, #76]	; 0x4c
    cnc.m[1].step_port = ROTATE_STEP_GPIO_Port;
 8002e50:	4b17      	ldr	r3, [pc, #92]	; (8002eb0 <Init_CNC+0x1c0>)
 8002e52:	4a1a      	ldr	r2, [pc, #104]	; (8002ebc <Init_CNC+0x1cc>)
 8002e54:	63da      	str	r2, [r3, #60]	; 0x3c
    cnc.m[1].step_pin  = ROTATE_STEP_Pin;
 8002e56:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <Init_CNC+0x1c0>)
 8002e58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
//    cnc.m[1].limit     = HOME_Y;
//    cnc.m[1].limit_inv = 0;
    cnc.m[1].tim       = TIM_ROTATE;
 8002e60:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <Init_CNC+0x1c0>)
 8002e62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e66:	645a      	str	r2, [r3, #68]	; 0x44
    cnc.m[1].mm        = 444;  // pulses / degree
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <Init_CNC+0x1c0>)
 8002e6a:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8002e6e:	65da      	str	r2, [r3, #92]	; 0x5c
    cnc.m[1].home_ofs  = 200;
 8002e70:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <Init_CNC+0x1c0>)
 8002e72:	22c8      	movs	r2, #200	; 0xc8
 8002e74:	655a      	str	r2, [r3, #84]	; 0x54
    cnc.m[1].x_max     = 200000;//25000; // 0.01 mm/sec^2
 8002e76:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <Init_CNC+0x1c0>)
 8002e78:	4a11      	ldr	r2, [pc, #68]	; (8002ec0 <Init_CNC+0x1d0>)
 8002e7a:	659a      	str	r2, [r3, #88]	; 0x58
    cnc.m[1].Anom      = 50000; //100000; // 0.01 mm/sec^2
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <Init_CNC+0x1c0>)
 8002e7e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002e82:	661a      	str	r2, [r3, #96]	; 0x60
    cnc.m[1].Vnom/*[CNC_SPEED_NORMAL]*/ = 2000; //28000; // 0.01 mm/sec
 8002e84:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <Init_CNC+0x1c0>)
 8002e86:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002e8a:	665a      	str	r2, [r3, #100]	; 0x64
    //cnc.m[1].Vnom[CNC_SPEED_SLOW  ] = 1000; // 0.01 mm/sec



    CNC_Init();
 8002e8c:	f7fd fe1e 	bl	8000acc <CNC_Init>
}
 8002e90:	bf00      	nop
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40012c00 	.word	0x40012c00
 8002ea0:	431bde83 	.word	0x431bde83
 8002ea4:	e0042000 	.word	0xe0042000
 8002ea8:	40000400 	.word	0x40000400
 8002eac:	6b5fca6b 	.word	0x6b5fca6b
 8002eb0:	20000528 	.word	0x20000528
 8002eb4:	40010800 	.word	0x40010800
 8002eb8:	000186a0 	.word	0x000186a0
 8002ebc:	40011000 	.word	0x40011000
 8002ec0:	00030d40 	.word	0x00030d40

08002ec4 <Init_LCD>:
char scr[LCD_ROWS][LCD_COLS];

uint8_t lcd_buf[1000];

void Init_LCD()
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
	lcd.hi2c     = &LCD_HI2C;
 8002ec8:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <Init_LCD+0x40>)
 8002eca:	4a0f      	ldr	r2, [pc, #60]	; (8002f08 <Init_LCD+0x44>)
 8002ecc:	601a      	str	r2, [r3, #0]
	lcd.addr     = LCD_I2C_ADDR;
 8002ece:	4b0d      	ldr	r3, [pc, #52]	; (8002f04 <Init_LCD+0x40>)
 8002ed0:	224f      	movs	r2, #79	; 0x4f
 8002ed2:	711a      	strb	r2, [r3, #4]
	lcd.rows     = LCD_ROWS;
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <Init_LCD+0x40>)
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	719a      	strb	r2, [r3, #6]
	lcd.cols     = LCD_COLS;
 8002eda:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <Init_LCD+0x40>)
 8002edc:	2210      	movs	r2, #16
 8002ede:	715a      	strb	r2, [r3, #5]
	lcd.charsize = 0;
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <Init_LCD+0x40>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	71da      	strb	r2, [r3, #7]
	lcd.buf_ptr  = lcd_buf;
 8002ee6:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <Init_LCD+0x40>)
 8002ee8:	4a08      	ldr	r2, [pc, #32]	; (8002f0c <Init_LCD+0x48>)
 8002eea:	609a      	str	r2, [r3, #8]
	lcd.buf_size = sizeof(lcd_buf);
 8002eec:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <Init_LCD+0x40>)
 8002eee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ef2:	60da      	str	r2, [r3, #12]
//					a = a | 1;
//					while(1);
//				}
//			}

	LCD_I2C_Init     (&lcd);
 8002ef4:	4803      	ldr	r0, [pc, #12]	; (8002f04 <Init_LCD+0x40>)
 8002ef6:	f7fe ff67 	bl	8001dc8 <LCD_I2C_Init>
	LCD_I2C_backlight(&lcd);
 8002efa:	4802      	ldr	r0, [pc, #8]	; (8002f04 <Init_LCD+0x40>)
 8002efc:	f7fe ff2d 	bl	8001d5a <LCD_I2C_backlight>
}
 8002f00:	bf00      	nop
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	200011d0 	.word	0x200011d0
 8002f08:	20000d94 	.word	0x20000d94
 8002f0c:	20000de8 	.word	0x20000de8

08002f10 <lcd_refresh>:

void lcd_refresh()
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
	if (!LCD_I2C_Busy(&lcd))
 8002f16:	4836      	ldr	r0, [pc, #216]	; (8002ff0 <lcd_refresh+0xe0>)
 8002f18:	f7fe fe99 	bl	8001c4e <LCD_I2C_Busy>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d161      	bne.n	8002fe6 <lcd_refresh+0xd6>
	{
		lcd_to_refresh = 0;
 8002f22:	4b34      	ldr	r3, [pc, #208]	; (8002ff4 <lcd_refresh+0xe4>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

		// prepare chars
		for (int r=0; r<LCD_ROWS; r++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	e02e      	b.n	8002f8c <lcd_refresh+0x7c>
		{
			int i;

			// fill with chars from scr array
			for (i=0; i<LCD_COLS; i++)
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	e014      	b.n	8002f5e <lcd_refresh+0x4e>
			{
				char * c = &scr[r][i];
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	011a      	lsls	r2, r3, #4
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	4a2e      	ldr	r2, [pc, #184]	; (8002ff8 <lcd_refresh+0xe8>)
 8002f3e:	4413      	add	r3, r2
 8002f40:	607b      	str	r3, [r7, #4]
				if (*c == 0)   break; // the rest of the line will be empty
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00d      	beq.n	8002f66 <lcd_refresh+0x56>
				if (*c < 0x20) *c = ' ';
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b1f      	cmp	r3, #31
 8002f50:	d802      	bhi.n	8002f58 <lcd_refresh+0x48>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2220      	movs	r2, #32
 8002f56:	701a      	strb	r2, [r3, #0]
			for (i=0; i<LCD_COLS; i++)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	2b0f      	cmp	r3, #15
 8002f62:	dde7      	ble.n	8002f34 <lcd_refresh+0x24>
 8002f64:	e00c      	b.n	8002f80 <lcd_refresh+0x70>
				if (*c == 0)   break; // the rest of the line will be empty
 8002f66:	bf00      	nop
			}

			// rest of line fill with spaces
			for (; i<LCD_COLS; i++)
 8002f68:	e00a      	b.n	8002f80 <lcd_refresh+0x70>
			{
				scr[r][i] = ' ';
 8002f6a:	4a23      	ldr	r2, [pc, #140]	; (8002ff8 <lcd_refresh+0xe8>)
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	441a      	add	r2, r3
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4413      	add	r3, r2
 8002f76:	2220      	movs	r2, #32
 8002f78:	701a      	strb	r2, [r3, #0]
			for (; i<LCD_COLS; i++)
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	2b0f      	cmp	r3, #15
 8002f84:	ddf1      	ble.n	8002f6a <lcd_refresh+0x5a>
		for (int r=0; r<LCD_ROWS; r++)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	ddcd      	ble.n	8002f2e <lcd_refresh+0x1e>
			}
		}

		LCD_I2C_startAsyncWrite(&lcd);
 8002f92:	4817      	ldr	r0, [pc, #92]	; (8002ff0 <lcd_refresh+0xe0>)
 8002f94:	f7fe fe2f 	bl	8001bf6 <LCD_I2C_startAsyncWrite>
		{
			for (int r=0; r<LCD_ROWS; r++)
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	e01d      	b.n	8002fda <lcd_refresh+0xca>
			{
				LCD_I2C_setCursor(&lcd, 0, r);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4812      	ldr	r0, [pc, #72]	; (8002ff0 <lcd_refresh+0xe0>)
 8002fa8:	f7fe fe80 	bl	8001cac <LCD_I2C_setCursor>
				for (int c=0; c<LCD_COLS; c++)
 8002fac:	2300      	movs	r3, #0
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	e00d      	b.n	8002fce <lcd_refresh+0xbe>
				{
					LCD_I2C_write(&lcd, scr[r][c]);
 8002fb2:	4a11      	ldr	r2, [pc, #68]	; (8002ff8 <lcd_refresh+0xe8>)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	441a      	add	r2, r3
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	480b      	ldr	r0, [pc, #44]	; (8002ff0 <lcd_refresh+0xe0>)
 8002fc4:	f7fe fe07 	bl	8001bd6 <LCD_I2C_write>
				for (int c=0; c<LCD_COLS; c++)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b0f      	cmp	r3, #15
 8002fd2:	ddee      	ble.n	8002fb2 <lcd_refresh+0xa2>
			for (int r=0; r<LCD_ROWS; r++)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	ddde      	ble.n	8002f9e <lcd_refresh+0x8e>
				}
			}
		}
		LCD_I2C_sendAsyncData(&lcd);
 8002fe0:	4803      	ldr	r0, [pc, #12]	; (8002ff0 <lcd_refresh+0xe0>)
 8002fe2:	f7fe fe1f 	bl	8001c24 <LCD_I2C_sendAsyncData>
	}
}
 8002fe6:	bf00      	nop
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	200011d0 	.word	0x200011d0
 8002ff4:	20000274 	.word	0x20000274
 8002ff8:	200011f0 	.word	0x200011f0

08002ffc <cmd_update_rotate_turns>:
#define _ON_VALVE  HAL_GPIO_WritePin(VALVE_ON_GPIO_Port, VALVE_ON_Pin, GPIO_PIN_SET)
#define _OFF_VALVE HAL_GPIO_WritePin(VALVE_ON_GPIO_Port, VALVE_ON_Pin, GPIO_PIN_RESET)


void cmd_update_rotate_turns()
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
	int m = 1; // rotate stepper (Motor)
 8003002:	2301      	movs	r3, #1
 8003004:	607b      	str	r3, [r7, #4]
	if (CNC_TaskFinished_i(m) == 0) CNC_Stop_i(m);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fd ffd2 	bl	8000fb0 <CNC_TaskFinished_i>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d102      	bne.n	8003018 <cmd_update_rotate_turns+0x1c>
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fd ff6e 	bl	8000ef4 <CNC_Stop_i>

	if (rotate_turns >= 0)
 8003018:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <cmd_update_rotate_turns+0x98>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	db32      	blt.n	8003086 <cmd_update_rotate_turns+0x8a>
	{
		  CNC_ResetCoord(m);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7fd ff8d 	bl	8000f40 <CNC_ResetCoord>

		  TCoord c = (rotate_turns == 0) ?  2000000000/cnc.m[m].mm :
 8003026:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <cmd_update_rotate_turns+0x98>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10b      	bne.n	8003046 <cmd_update_rotate_turns+0x4a>
 800302e:	4a1a      	ldr	r2, [pc, #104]	; (8003098 <cmd_update_rotate_turns+0x9c>)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2134      	movs	r1, #52	; 0x34
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	4413      	add	r3, r2
 800303a:	3328      	adds	r3, #40	; 0x28
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a17      	ldr	r2, [pc, #92]	; (800309c <cmd_update_rotate_turns+0xa0>)
 8003040:	fb92 f3f3 	sdiv	r3, r2, r3
 8003044:	e005      	b.n	8003052 <cmd_update_rotate_turns+0x56>
 8003046:	4b13      	ldr	r3, [pc, #76]	; (8003094 <cmd_update_rotate_turns+0x98>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800304e:	fb02 f303 	mul.w	r3, r2, r3
 8003052:	603b      	str	r3, [r7, #0]
											rotate_turns * 360;

		  if (rotate_direction == 1) c = -c;
 8003054:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <cmd_update_rotate_turns+0xa4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d102      	bne.n	8003062 <cmd_update_rotate_turns+0x66>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	425b      	negs	r3, r3
 8003060:	603b      	str	r3, [r7, #0]

		  CNC_SetSpeed_i  (m, rotate_speed*360/60*2);
 8003062:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <cmd_update_rotate_turns+0xa8>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4613      	mov	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4619      	mov	r1, r3
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7fd fecd 	bl	8000e10 <CNC_SetSpeed_i>
		  CNC_Start_GoTo_i(m, &c);
 8003076:	463b      	mov	r3, r7
 8003078:	4619      	mov	r1, r3
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fd feba 	bl	8000df4 <CNC_Start_GoTo_i>
		  CNC_Update_i    (m); // start
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7fe fa21 	bl	80014c8 <CNC_Update_i>
	}

	user_cmd = CMD_IDLE;
 8003086:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <cmd_update_rotate_turns+0xac>)
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000048 	.word	0x20000048
 8003098:	20000528 	.word	0x20000528
 800309c:	77359400 	.word	0x77359400
 80030a0:	2000026c 	.word	0x2000026c
 80030a4:	20000044 	.word	0x20000044
 80030a8:	200012dc 	.word	0x200012dc

080030ac <cmd_move_with_arrows>:
////////////////////////////////////////////////////////////////////////////////

void cmd_move_with_arrows()
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
  int m = 0; // pump stepper (Motor)
 80030b2:	2300      	movs	r3, #0
 80030b4:	607b      	str	r3, [r7, #4]

  if (CNC_TaskFinished_i(m) == 0) CNC_Stop_i(m);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fd ff7a 	bl	8000fb0 <CNC_TaskFinished_i>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d102      	bne.n	80030c8 <cmd_move_with_arrows+0x1c>
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fd ff16 	bl	8000ef4 <CNC_Stop_i>

  CNC_ResetCoord(m);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7fd ff39 	bl	8000f40 <CNC_ResetCoord>

  TCoord c = 2000000000; // max
 80030ce:	4b26      	ldr	r3, [pc, #152]	; (8003168 <cmd_move_with_arrows+0xbc>)
 80030d0:	603b      	str	r3, [r7, #0]
  if (pump_direction == 1) c = -c;
 80030d2:	4b26      	ldr	r3, [pc, #152]	; (800316c <cmd_move_with_arrows+0xc0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d102      	bne.n	80030e0 <cmd_move_with_arrows+0x34>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	425b      	negs	r3, r3
 80030de:	603b      	str	r3, [r7, #0]

  if (!((pump_direction == 0) && _AT_HOME2) &&
 80030e0:	4b22      	ldr	r3, [pc, #136]	; (800316c <cmd_move_with_arrows+0xc0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d104      	bne.n	80030f2 <cmd_move_with_arrows+0x46>
 80030e8:	4b21      	ldr	r3, [pc, #132]	; (8003170 <cmd_move_with_arrows+0xc4>)
 80030ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d01e      	beq.n	8003130 <cmd_move_with_arrows+0x84>
	  !((pump_direction == 1) && _AT_HOME1))
 80030f2:	4b1e      	ldr	r3, [pc, #120]	; (800316c <cmd_move_with_arrows+0xc0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
  if (!((pump_direction == 0) && _AT_HOME2) &&
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d103      	bne.n	8003102 <cmd_move_with_arrows+0x56>
	  !((pump_direction == 1) && _AT_HOME1))
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <cmd_move_with_arrows+0xc4>)
 80030fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d016      	beq.n	8003130 <cmd_move_with_arrows+0x84>
  {
	  CNC_SetSpeed_i(m, pump_manual_speed);
 8003102:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <cmd_move_with_arrows+0xc8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4619      	mov	r1, r3
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7fd fe81 	bl	8000e10 <CNC_SetSpeed_i>
	  CNC_Start_GoTo_i(m, &c);
 800310e:	463b      	mov	r3, r7
 8003110:	4619      	mov	r1, r3
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fd fe6e 	bl	8000df4 <CNC_Start_GoTo_i>
	  CNC_Update_i (m); // start move
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7fe f9d5 	bl	80014c8 <CNC_Update_i>
  }

  while ((pump_cmd_timeout > 0) &&
 800311e:	e007      	b.n	8003130 <cmd_move_with_arrows+0x84>
		 !((pump_direction == 0) && _AT_HOME2) &&
		 !((pump_direction == 1) && _AT_HOME1))
  {
	  pump_cmd_timeout--; // wait until arrow key is released
 8003120:	4b15      	ldr	r3, [pc, #84]	; (8003178 <cmd_move_with_arrows+0xcc>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	3b01      	subs	r3, #1
 8003126:	4a14      	ldr	r2, [pc, #80]	; (8003178 <cmd_move_with_arrows+0xcc>)
 8003128:	6013      	str	r3, [r2, #0]
	  HAL_Delay(10);
 800312a:	200a      	movs	r0, #10
 800312c:	f001 f888 	bl	8004240 <HAL_Delay>
  while ((pump_cmd_timeout > 0) &&
 8003130:	4b11      	ldr	r3, [pc, #68]	; (8003178 <cmd_move_with_arrows+0xcc>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	dd10      	ble.n	800315a <cmd_move_with_arrows+0xae>
		 !((pump_direction == 0) && _AT_HOME2) &&
 8003138:	4b0c      	ldr	r3, [pc, #48]	; (800316c <cmd_move_with_arrows+0xc0>)
 800313a:	681b      	ldr	r3, [r3, #0]
  while ((pump_cmd_timeout > 0) &&
 800313c:	2b00      	cmp	r3, #0
 800313e:	d104      	bne.n	800314a <cmd_move_with_arrows+0x9e>
		 !((pump_direction == 0) && _AT_HOME2) &&
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <cmd_move_with_arrows+0xc4>)
 8003142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003146:	2b01      	cmp	r3, #1
 8003148:	d007      	beq.n	800315a <cmd_move_with_arrows+0xae>
		 !((pump_direction == 1) && _AT_HOME1))
 800314a:	4b08      	ldr	r3, [pc, #32]	; (800316c <cmd_move_with_arrows+0xc0>)
 800314c:	681b      	ldr	r3, [r3, #0]
		 !((pump_direction == 0) && _AT_HOME2) &&
 800314e:	2b01      	cmp	r3, #1
 8003150:	d1e6      	bne.n	8003120 <cmd_move_with_arrows+0x74>
		 !((pump_direction == 1) && _AT_HOME1))
 8003152:	4b07      	ldr	r3, [pc, #28]	; (8003170 <cmd_move_with_arrows+0xc4>)
 8003154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003156:	2b01      	cmp	r3, #1
 8003158:	d1e2      	bne.n	8003120 <cmd_move_with_arrows+0x74>
  }

  CNC_Stop_i(m);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7fd feca 	bl	8000ef4 <CNC_Stop_i>
}
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	77359400 	.word	0x77359400
 800316c:	20000264 	.word	0x20000264
 8003170:	20001210 	.word	0x20001210
 8003174:	200012d8 	.word	0x200012d8
 8003178:	200011ec 	.word	0x200011ec

0800317c <cmd_start_dozing>:
////////////////////////////////////////////////////////////////////////////////

void cmd_start_dozing()
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
	screen_to_refresh = 1;
 8003182:	4b66      	ldr	r3, [pc, #408]	; (800331c <cmd_start_dozing+0x1a0>)
 8003184:	2201      	movs	r2, #1
 8003186:	601a      	str	r2, [r3, #0]

	int p = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	613b      	str	r3, [r7, #16]
	int r = 1;
 800318c:	2301      	movs	r3, #1
 800318e:	60fb      	str	r3, [r7, #12]

	int dont_touch_rotate = CNC_TaskFinished_i(r) ? 0 : 1;
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f7fd ff0d 	bl	8000fb0 <CNC_TaskFinished_i>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	bf0c      	ite	eq
 800319c:	2301      	moveq	r3, #1
 800319e:	2300      	movne	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	60bb      	str	r3, [r7, #8]

	if (dont_touch_rotate)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <cmd_start_dozing+0x42>
	{
		if (CNC_TaskFinished_i(p) == 0) CNC_Stop_i(p);
 80031aa:	6938      	ldr	r0, [r7, #16]
 80031ac:	f7fd ff00 	bl	8000fb0 <CNC_TaskFinished_i>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10a      	bne.n	80031cc <cmd_start_dozing+0x50>
 80031b6:	6938      	ldr	r0, [r7, #16]
 80031b8:	f7fd fe9c 	bl	8000ef4 <CNC_Stop_i>
 80031bc:	e006      	b.n	80031cc <cmd_start_dozing+0x50>
	}
	else // stop all motors
		if (CNC_TaskFinished() == 0) CNC_Stop();
 80031be:	f7fd fed5 	bl	8000f6c <CNC_TaskFinished>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <cmd_start_dozing+0x50>
 80031c8:	f7fd fe5c 	bl	8000e84 <CNC_Stop>

	TCoord c;

	// On valve
	_ON_VALVE;
 80031cc:	2201      	movs	r2, #1
 80031ce:	2108      	movs	r1, #8
 80031d0:	4853      	ldr	r0, [pc, #332]	; (8003320 <cmd_start_dozing+0x1a4>)
 80031d2:	f001 fb84 	bl	80048de <HAL_GPIO_WritePin>

	// Delay
	if (valve_delay >= 0)   HAL_Delay(valve_delay);
 80031d6:	4b53      	ldr	r3, [pc, #332]	; (8003324 <cmd_start_dozing+0x1a8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	db04      	blt.n	80031e8 <cmd_start_dozing+0x6c>
 80031de:	4b51      	ldr	r3, [pc, #324]	; (8003324 <cmd_start_dozing+0x1a8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f001 f82c 	bl	8004240 <HAL_Delay>

	// Start rotating
	if (!dont_touch_rotate)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d122      	bne.n	8003234 <cmd_start_dozing+0xb8>
	{
		CNC_ResetCoord(r);
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f7fd fea6 	bl	8000f40 <CNC_ResetCoord>

		c = rotate_step * 360; // turns to degrees
 80031f4:	4b4c      	ldr	r3, [pc, #304]	; (8003328 <cmd_start_dozing+0x1ac>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80031fc:	fb02 f303 	mul.w	r3, r2, r3
 8003200:	603b      	str	r3, [r7, #0]
		if (rotate_direction == 1) c = -c;
 8003202:	4b4a      	ldr	r3, [pc, #296]	; (800332c <cmd_start_dozing+0x1b0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d102      	bne.n	8003210 <cmd_start_dozing+0x94>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	425b      	negs	r3, r3
 800320e:	603b      	str	r3, [r7, #0]

		CNC_SetSpeed_i  (r, rotate_speed*360/60*2);
 8003210:	4b47      	ldr	r3, [pc, #284]	; (8003330 <cmd_start_dozing+0x1b4>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4613      	mov	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4619      	mov	r1, r3
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f7fd fdf6 	bl	8000e10 <CNC_SetSpeed_i>
		CNC_Start_GoTo_i(r, &c);
 8003224:	463b      	mov	r3, r7
 8003226:	4619      	mov	r1, r3
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f7fd fde3 	bl	8000df4 <CNC_Start_GoTo_i>
		CNC_Update_i    (r); // start move
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f7fe f94a 	bl	80014c8 <CNC_Update_i>
	}


	int count = MOVES_COUNT; //TODO: take from settings
 8003234:	2305      	movs	r3, #5
 8003236:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < count; i++)
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	e049      	b.n	80032d2 <cmd_start_dozing+0x156>
	{
		if (pump_feed[i] == 0) continue; // skip empty feed
 800323e:	4a3d      	ldr	r2, [pc, #244]	; (8003334 <cmd_start_dozing+0x1b8>)
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d03f      	beq.n	80032ca <cmd_start_dozing+0x14e>

		if (_AT_HOME1 || _AT_HOME2) break;
 800324a:	4b3b      	ldr	r3, [pc, #236]	; (8003338 <cmd_start_dozing+0x1bc>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324e:	2b01      	cmp	r3, #1
 8003250:	d043      	beq.n	80032da <cmd_start_dozing+0x15e>
 8003252:	4b39      	ldr	r3, [pc, #228]	; (8003338 <cmd_start_dozing+0x1bc>)
 8003254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003258:	2b01      	cmp	r3, #1
 800325a:	d03e      	beq.n	80032da <cmd_start_dozing+0x15e>

		// Delay before pump move
		if (pump_delay[i] >= 0) HAL_Delay(pump_delay[i]); // df - delay before pump forward move after starting rotating
 800325c:	4a37      	ldr	r2, [pc, #220]	; (800333c <cmd_start_dozing+0x1c0>)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003264:	2b00      	cmp	r3, #0
 8003266:	db06      	blt.n	8003276 <cmd_start_dozing+0xfa>
 8003268:	4a34      	ldr	r2, [pc, #208]	; (800333c <cmd_start_dozing+0x1c0>)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003270:	4618      	mov	r0, r3
 8003272:	f000 ffe5 	bl	8004240 <HAL_Delay>

		// i-move
		CNC_ResetCoord(p);
 8003276:	6938      	ldr	r0, [r7, #16]
 8003278:	f7fd fe62 	bl	8000f40 <CNC_ResetCoord>

		c = pump_feed[i];
 800327c:	4a2d      	ldr	r2, [pc, #180]	; (8003334 <cmd_start_dozing+0x1b8>)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003284:	603b      	str	r3, [r7, #0]

		CNC_SetSpeed_i  (p, pump_speed[i]*2);
 8003286:	4a2e      	ldr	r2, [pc, #184]	; (8003340 <cmd_start_dozing+0x1c4>)
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4619      	mov	r1, r3
 8003292:	6938      	ldr	r0, [r7, #16]
 8003294:	f7fd fdbc 	bl	8000e10 <CNC_SetSpeed_i>
		CNC_Start_GoTo_i(p, &c);
 8003298:	463b      	mov	r3, r7
 800329a:	4619      	mov	r1, r3
 800329c:	6938      	ldr	r0, [r7, #16]
 800329e:	f7fd fda9 	bl	8000df4 <CNC_Start_GoTo_i>
		CNC_Update_i    (p); // start move
 80032a2:	6938      	ldr	r0, [r7, #16]
 80032a4:	f7fe f910 	bl	80014c8 <CNC_Update_i>

		while ((CNC_TaskFinished_i(p) == 0) && (!_AT_HOME1) && (!_AT_HOME2)) ;
 80032a8:	bf00      	nop
 80032aa:	6938      	ldr	r0, [r7, #16]
 80032ac:	f7fd fe80 	bl	8000fb0 <CNC_TaskFinished_i>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10a      	bne.n	80032cc <cmd_start_dozing+0x150>
 80032b6:	4b20      	ldr	r3, [pc, #128]	; (8003338 <cmd_start_dozing+0x1bc>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d006      	beq.n	80032cc <cmd_start_dozing+0x150>
 80032be:	4b1e      	ldr	r3, [pc, #120]	; (8003338 <cmd_start_dozing+0x1bc>)
 80032c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d1f0      	bne.n	80032aa <cmd_start_dozing+0x12e>
 80032c8:	e000      	b.n	80032cc <cmd_start_dozing+0x150>
		if (pump_feed[i] == 0) continue; // skip empty feed
 80032ca:	bf00      	nop
	for (int i = 0; i < count; i++)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	3301      	adds	r3, #1
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	dbb1      	blt.n	800323e <cmd_start_dozing+0xc2>
	}

	if (_AT_HOME1 || _AT_HOME2)  CNC_Stop(); //
 80032da:	4b17      	ldr	r3, [pc, #92]	; (8003338 <cmd_start_dozing+0x1bc>)
 80032dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d004      	beq.n	80032ec <cmd_start_dozing+0x170>
 80032e2:	4b15      	ldr	r3, [pc, #84]	; (8003338 <cmd_start_dozing+0x1bc>)
 80032e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <cmd_start_dozing+0x174>
 80032ec:	f7fd fdca 	bl	8000e84 <CNC_Stop>

	// 7. Wait for task completion
	if (!dont_touch_rotate)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d105      	bne.n	8003302 <cmd_start_dozing+0x186>
		while (CNC_TaskFinished() == 0) ;
 80032f6:	bf00      	nop
 80032f8:	f7fd fe38 	bl	8000f6c <CNC_TaskFinished>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0fa      	beq.n	80032f8 <cmd_start_dozing+0x17c>

	// Of valve
	_OFF_VALVE;
 8003302:	2200      	movs	r2, #0
 8003304:	2108      	movs	r1, #8
 8003306:	4806      	ldr	r0, [pc, #24]	; (8003320 <cmd_start_dozing+0x1a4>)
 8003308:	f001 fae9 	bl	80048de <HAL_GPIO_WritePin>

	screen_to_refresh = 1;
 800330c:	4b03      	ldr	r3, [pc, #12]	; (800331c <cmd_start_dozing+0x1a0>)
 800330e:	2201      	movs	r2, #1
 8003310:	601a      	str	r2, [r3, #0]
}
 8003312:	bf00      	nop
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20000270 	.word	0x20000270
 8003320:	40010800 	.word	0x40010800
 8003324:	20000034 	.word	0x20000034
 8003328:	20000040 	.word	0x20000040
 800332c:	2000026c 	.word	0x2000026c
 8003330:	20000044 	.word	0x20000044
 8003334:	20000004 	.word	0x20000004
 8003338:	20001210 	.word	0x20001210
 800333c:	20000250 	.word	0x20000250
 8003340:	20000018 	.word	0x20000018

08003344 <cmd_go_home>:
////////////////////////////////////////////////////////////////////////////////

void cmd_go_home()
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
	TCoord c;
	int p = 0;
 800334a:	2300      	movs	r3, #0
 800334c:	607b      	str	r3, [r7, #4]

	CNC_ResetCoord(p);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fd fdf6 	bl	8000f40 <CNC_ResetCoord>

	c = -pump_max_length;
 8003354:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <cmd_go_home+0x60>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	425b      	negs	r3, r3
 800335a:	603b      	str	r3, [r7, #0]

	CNC_SetSpeed_i  (p, pump_home_speed*2);
 800335c:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <cmd_go_home+0x64>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	4619      	mov	r1, r3
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7fd fd53 	bl	8000e10 <CNC_SetSpeed_i>
	CNC_Start_GoTo_i(p, &c);
 800336a:	463b      	mov	r3, r7
 800336c:	4619      	mov	r1, r3
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fd fd40 	bl	8000df4 <CNC_Start_GoTo_i>
	CNC_Update_i    (p); // start move
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7fe f8a7 	bl	80014c8 <CNC_Update_i>

	while ((CNC_TaskFinished_i(p) == 0) && (!_AT_HOME1)) ;
 800337a:	bf00      	nop
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7fd fe17 	bl	8000fb0 <CNC_TaskFinished_i>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d103      	bne.n	8003390 <cmd_go_home+0x4c>
 8003388:	4b08      	ldr	r3, [pc, #32]	; (80033ac <cmd_go_home+0x68>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	2b01      	cmp	r3, #1
 800338e:	d1f5      	bne.n	800337c <cmd_go_home+0x38>

	CNC_Stop(p);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7fd fd77 	bl	8000e84 <CNC_Stop>

	screen_to_refresh = 1;
 8003396:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <cmd_go_home+0x6c>)
 8003398:	2201      	movs	r2, #1
 800339a:	601a      	str	r2, [r3, #0]
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	2000002c 	.word	0x2000002c
 80033a8:	20000030 	.word	0x20000030
 80033ac:	20001210 	.word	0x20001210
 80033b0:	20000270 	.word	0x20000270

080033b4 <Loop>:
////////////////////////////////////////////////////////////////////////////////

void Loop()
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
	  if (user_cmd)
 80033b8:	4b12      	ldr	r3, [pc, #72]	; (8003404 <Loop+0x50>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d01e      	beq.n	8003400 <Loop+0x4c>
	  {
		  if (user_cmd == CMD_UPDATE_ROTATE_TURNS) cmd_update_rotate_turns();
 80033c2:	4b10      	ldr	r3, [pc, #64]	; (8003404 <Loop+0x50>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d101      	bne.n	80033d0 <Loop+0x1c>
 80033cc:	f7ff fe16 	bl	8002ffc <cmd_update_rotate_turns>
		  if (user_cmd == CMD_MOVE_WITH_ARROWS)    cmd_move_with_arrows();
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <Loop+0x50>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d101      	bne.n	80033de <Loop+0x2a>
 80033da:	f7ff fe67 	bl	80030ac <cmd_move_with_arrows>
		  if (user_cmd == CMD_START_DOZING)        cmd_start_dozing();
 80033de:	4b09      	ldr	r3, [pc, #36]	; (8003404 <Loop+0x50>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d101      	bne.n	80033ec <Loop+0x38>
 80033e8:	f7ff fec8 	bl	800317c <cmd_start_dozing>
		  if (user_cmd == CMD_GO_HOME)             cmd_go_home();
 80033ec:	4b05      	ldr	r3, [pc, #20]	; (8003404 <Loop+0x50>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <Loop+0x46>
 80033f6:	f7ff ffa5 	bl	8003344 <cmd_go_home>

		  user_cmd = CMD_IDLE;
 80033fa:	4b02      	ldr	r3, [pc, #8]	; (8003404 <Loop+0x50>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
	  }
}
 8003400:	bf00      	nop
 8003402:	bd80      	pop	{r7, pc}
 8003404:	200012dc 	.word	0x200012dc

08003408 <Setup>:
#include "main_loop.c"

////////////////////////////////////////////////////////////////////////////////

void Setup()
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
	Init_CNC();
 800340c:	f7ff fc70 	bl	8002cf0 <Init_CNC>
	Init_Console();
 8003410:	f7fe ff86 	bl	8002320 <Init_Console>
	Init_Keys();
 8003414:	f7fe fe40 	bl	8002098 <Init_Keys>
	Init_LCD();
 8003418:	f7ff fd54 	bl	8002ec4 <Init_LCD>

	pump_manual_speed = pump_manual_speed_set[cur_pump_manual_speed];
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <Setup+0x2c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a05      	ldr	r2, [pc, #20]	; (8003438 <Setup+0x30>)
 8003422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003426:	4a05      	ldr	r2, [pc, #20]	; (800343c <Setup+0x34>)
 8003428:	6013      	str	r3, [r2, #0]

	screen_to_refresh = 1;
 800342a:	4b05      	ldr	r3, [pc, #20]	; (8003440 <Setup+0x38>)
 800342c:	2201      	movs	r2, #1
 800342e:	601a      	str	r2, [r3, #0]
}
 8003430:	bf00      	nop
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20000268 	.word	0x20000268
 8003438:	20000038 	.word	0x20000038
 800343c:	200012d8 	.word	0x200012d8
 8003440:	20000270 	.word	0x20000270

08003444 <screen_refresh>:
#define _ADD_CHAR(L,C) do {\
	if (p<LCD_COLS) scr[L][p++] = C;\
	} while(0)

void screen_refresh()
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
	int r = 0;
 800344a:	2300      	movs	r3, #0
 800344c:	607b      	str	r3, [r7, #4]
	int p = 0;
 800344e:	2300      	movs	r3, #0
 8003450:	603b      	str	r3, [r7, #0]

	switch (screen_view)
 8003452:	4ba8      	ldr	r3, [pc, #672]	; (80036f4 <screen_refresh+0x2b0>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b03      	cmp	r3, #3
 800345a:	f200 8139 	bhi.w	80036d0 <screen_refresh+0x28c>
 800345e:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <screen_refresh+0x20>)
 8003460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003464:	08003475 	.word	0x08003475
 8003468:	0800351f 	.word	0x0800351f
 800346c:	08003599 	.word	0x08003599
 8003470:	08003607 	.word	0x08003607
	{
		case VW_DOZING:
		{
			// First row
			my_print_str(scr[r], "DOZING: ", &p, LCD_COLS);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	4a9f      	ldr	r2, [pc, #636]	; (80036f8 <screen_refresh+0x2b4>)
 800347a:	1898      	adds	r0, r3, r2
 800347c:	463a      	mov	r2, r7
 800347e:	2310      	movs	r3, #16
 8003480:	499e      	ldr	r1, [pc, #632]	; (80036fc <screen_refresh+0x2b8>)
 8003482:	f000 fc23 	bl	8003ccc <my_print_str>

			if (user_cmd == CMD_START_DOZING)
 8003486:	4b9e      	ldr	r3, [pc, #632]	; (8003700 <screen_refresh+0x2bc>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b04      	cmp	r3, #4
 800348e:	d109      	bne.n	80034a4 <screen_refresh+0x60>
			{
				my_print_str(scr[r], "Dozing..", &p, LCD_COLS);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	4a98      	ldr	r2, [pc, #608]	; (80036f8 <screen_refresh+0x2b4>)
 8003496:	1898      	adds	r0, r3, r2
 8003498:	463a      	mov	r2, r7
 800349a:	2310      	movs	r3, #16
 800349c:	4999      	ldr	r1, [pc, #612]	; (8003704 <screen_refresh+0x2c0>)
 800349e:	f000 fc15 	bl	8003ccc <my_print_str>
 80034a2:	e008      	b.n	80034b6 <screen_refresh+0x72>
			}
			else
			{
				my_print_str(scr[r], "Ready", &p, LCD_COLS);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	4a93      	ldr	r2, [pc, #588]	; (80036f8 <screen_refresh+0x2b4>)
 80034aa:	1898      	adds	r0, r3, r2
 80034ac:	463a      	mov	r2, r7
 80034ae:	2310      	movs	r3, #16
 80034b0:	4995      	ldr	r1, [pc, #596]	; (8003708 <screen_refresh+0x2c4>)
 80034b2:	f000 fc0b 	bl	8003ccc <my_print_str>
			}
			_ADD_CHAR(r, 0);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b0f      	cmp	r3, #15
 80034ba:	dc09      	bgt.n	80034d0 <screen_refresh+0x8c>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	603a      	str	r2, [r7, #0]
 80034c2:	498d      	ldr	r1, [pc, #564]	; (80036f8 <screen_refresh+0x2b4>)
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	0112      	lsls	r2, r2, #4
 80034c8:	440a      	add	r2, r1
 80034ca:	4413      	add	r3, r2
 80034cc:	2200      	movs	r2, #0
 80034ce:	701a      	strb	r2, [r3, #0]

			// Second row
			r++;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3301      	adds	r3, #1
 80034d4:	607b      	str	r3, [r7, #4]
			p = 0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	603b      	str	r3, [r7, #0]
			my_print_str(scr[r], P2F_NAME, &p, LCD_COLS);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	4a86      	ldr	r2, [pc, #536]	; (80036f8 <screen_refresh+0x2b4>)
 80034e0:	1898      	adds	r0, r3, r2
 80034e2:	463a      	mov	r2, r7
 80034e4:	2310      	movs	r3, #16
 80034e6:	4989      	ldr	r1, [pc, #548]	; (800370c <screen_refresh+0x2c8>)
 80034e8:	f000 fbf0 	bl	8003ccc <my_print_str>
			my_print_int(scr[r], pump_feed[P2F_INDEX-1], &p, LCD_COLS);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	4a81      	ldr	r2, [pc, #516]	; (80036f8 <screen_refresh+0x2b4>)
 80034f2:	1898      	adds	r0, r3, r2
 80034f4:	4b86      	ldr	r3, [pc, #536]	; (8003710 <screen_refresh+0x2cc>)
 80034f6:	6859      	ldr	r1, [r3, #4]
 80034f8:	463a      	mov	r2, r7
 80034fa:	2310      	movs	r3, #16
 80034fc:	f000 fc10 	bl	8003d20 <my_print_int>
			_ADD_CHAR(r, 0);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2b0f      	cmp	r3, #15
 8003504:	f300 80e5 	bgt.w	80036d2 <screen_refresh+0x28e>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	603a      	str	r2, [r7, #0]
 800350e:	497a      	ldr	r1, [pc, #488]	; (80036f8 <screen_refresh+0x2b4>)
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	0112      	lsls	r2, r2, #4
 8003514:	440a      	add	r2, r1
 8003516:	4413      	add	r3, r2
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
			break;
 800351c:	e0d9      	b.n	80036d2 <screen_refresh+0x28e>
		}

		case VW_MANUAL:
		{
			my_print_str(scr[r], "MANUAL:", &p, LCD_COLS);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	4a75      	ldr	r2, [pc, #468]	; (80036f8 <screen_refresh+0x2b4>)
 8003524:	1898      	adds	r0, r3, r2
 8003526:	463a      	mov	r2, r7
 8003528:	2310      	movs	r3, #16
 800352a:	497a      	ldr	r1, [pc, #488]	; (8003714 <screen_refresh+0x2d0>)
 800352c:	f000 fbce 	bl	8003ccc <my_print_str>
			_ADD_CHAR(r, 0);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b0f      	cmp	r3, #15
 8003534:	dc09      	bgt.n	800354a <screen_refresh+0x106>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	603a      	str	r2, [r7, #0]
 800353c:	496e      	ldr	r1, [pc, #440]	; (80036f8 <screen_refresh+0x2b4>)
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	0112      	lsls	r2, r2, #4
 8003542:	440a      	add	r2, r1
 8003544:	4413      	add	r3, r2
 8003546:	2200      	movs	r2, #0
 8003548:	701a      	strb	r2, [r3, #0]

			r++;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3301      	adds	r3, #1
 800354e:	607b      	str	r3, [r7, #4]
			p = 0;
 8003550:	2300      	movs	r3, #0
 8003552:	603b      	str	r3, [r7, #0]
			my_print_str(scr[r], "Speed ", &p, LCD_COLS);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	4a67      	ldr	r2, [pc, #412]	; (80036f8 <screen_refresh+0x2b4>)
 800355a:	1898      	adds	r0, r3, r2
 800355c:	463a      	mov	r2, r7
 800355e:	2310      	movs	r3, #16
 8003560:	496d      	ldr	r1, [pc, #436]	; (8003718 <screen_refresh+0x2d4>)
 8003562:	f000 fbb3 	bl	8003ccc <my_print_str>
			my_print_int(scr[r], pump_manual_speed, &p, LCD_COLS);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	4a63      	ldr	r2, [pc, #396]	; (80036f8 <screen_refresh+0x2b4>)
 800356c:	1898      	adds	r0, r3, r2
 800356e:	4b6b      	ldr	r3, [pc, #428]	; (800371c <screen_refresh+0x2d8>)
 8003570:	6819      	ldr	r1, [r3, #0]
 8003572:	463a      	mov	r2, r7
 8003574:	2310      	movs	r3, #16
 8003576:	f000 fbd3 	bl	8003d20 <my_print_int>
			_ADD_CHAR(r, 0);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b0f      	cmp	r3, #15
 800357e:	f300 80aa 	bgt.w	80036d6 <screen_refresh+0x292>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	603a      	str	r2, [r7, #0]
 8003588:	495b      	ldr	r1, [pc, #364]	; (80036f8 <screen_refresh+0x2b4>)
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	0112      	lsls	r2, r2, #4
 800358e:	440a      	add	r2, r1
 8003590:	4413      	add	r3, r2
 8003592:	2200      	movs	r2, #0
 8003594:	701a      	strb	r2, [r3, #0]
			break;
 8003596:	e09e      	b.n	80036d6 <screen_refresh+0x292>
		}

		case VW_CHANGE:
		{
			my_print_str(scr[r], "CHANGE:", &p, LCD_COLS);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	4a56      	ldr	r2, [pc, #344]	; (80036f8 <screen_refresh+0x2b4>)
 800359e:	1898      	adds	r0, r3, r2
 80035a0:	463a      	mov	r2, r7
 80035a2:	2310      	movs	r3, #16
 80035a4:	495e      	ldr	r1, [pc, #376]	; (8003720 <screen_refresh+0x2dc>)
 80035a6:	f000 fb91 	bl	8003ccc <my_print_str>

			if (user_cmd == CMD_GO_HOME)
 80035aa:	4b55      	ldr	r3, [pc, #340]	; (8003700 <screen_refresh+0x2bc>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d108      	bne.n	80035c6 <screen_refresh+0x182>
			{
				my_print_str(scr[r], " Homing..", &p, LCD_COLS);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	4a4f      	ldr	r2, [pc, #316]	; (80036f8 <screen_refresh+0x2b4>)
 80035ba:	1898      	adds	r0, r3, r2
 80035bc:	463a      	mov	r2, r7
 80035be:	2310      	movs	r3, #16
 80035c0:	4958      	ldr	r1, [pc, #352]	; (8003724 <screen_refresh+0x2e0>)
 80035c2:	f000 fb83 	bl	8003ccc <my_print_str>
			}
			_ADD_CHAR(r, 0);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b0f      	cmp	r3, #15
 80035ca:	dc09      	bgt.n	80035e0 <screen_refresh+0x19c>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	603a      	str	r2, [r7, #0]
 80035d2:	4949      	ldr	r1, [pc, #292]	; (80036f8 <screen_refresh+0x2b4>)
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	0112      	lsls	r2, r2, #4
 80035d8:	440a      	add	r2, r1
 80035da:	4413      	add	r3, r2
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]

			r++;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3301      	adds	r3, #1
 80035e4:	607b      	str	r3, [r7, #4]
			p = 0;
 80035e6:	2300      	movs	r3, #0
 80035e8:	603b      	str	r3, [r7, #0]
			_ADD_CHAR(r, 0);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b0f      	cmp	r3, #15
 80035ee:	dc74      	bgt.n	80036da <screen_refresh+0x296>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	603a      	str	r2, [r7, #0]
 80035f6:	4940      	ldr	r1, [pc, #256]	; (80036f8 <screen_refresh+0x2b4>)
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	0112      	lsls	r2, r2, #4
 80035fc:	440a      	add	r2, r1
 80035fe:	4413      	add	r3, r2
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
			break;
 8003604:	e069      	b.n	80036da <screen_refresh+0x296>
		}

		case VW_SETTINGS:
		{
			if (settings_level == 0)
 8003606:	4b48      	ldr	r3, [pc, #288]	; (8003728 <screen_refresh+0x2e4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d15b      	bne.n	80036c6 <screen_refresh+0x282>
			{
				my_print_int(scr[r], settings_item+1, &p, LCD_COLS);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	4a39      	ldr	r2, [pc, #228]	; (80036f8 <screen_refresh+0x2b4>)
 8003614:	1898      	adds	r0, r3, r2
 8003616:	4b45      	ldr	r3, [pc, #276]	; (800372c <screen_refresh+0x2e8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	1c59      	adds	r1, r3, #1
 800361c:	463a      	mov	r2, r7
 800361e:	2310      	movs	r3, #16
 8003620:	f000 fb7e 	bl	8003d20 <my_print_int>
				_ADD_CHAR(r, ' ');
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	2b0f      	cmp	r3, #15
 8003628:	dc09      	bgt.n	800363e <screen_refresh+0x1fa>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	603a      	str	r2, [r7, #0]
 8003630:	4931      	ldr	r1, [pc, #196]	; (80036f8 <screen_refresh+0x2b4>)
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	0112      	lsls	r2, r2, #4
 8003636:	440a      	add	r2, r1
 8003638:	4413      	add	r3, r2
 800363a:	2220      	movs	r2, #32
 800363c:	701a      	strb	r2, [r3, #0]
				my_print_str(scr[r], sett_item[settings_item].caption, &p, LCD_COLS);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	4a2d      	ldr	r2, [pc, #180]	; (80036f8 <screen_refresh+0x2b4>)
 8003644:	1898      	adds	r0, r3, r2
 8003646:	4b39      	ldr	r3, [pc, #228]	; (800372c <screen_refresh+0x2e8>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4939      	ldr	r1, [pc, #228]	; (8003730 <screen_refresh+0x2ec>)
 800364c:	4613      	mov	r3, r2
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	4413      	add	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	440b      	add	r3, r1
 8003656:	6819      	ldr	r1, [r3, #0]
 8003658:	463a      	mov	r2, r7
 800365a:	2310      	movs	r3, #16
 800365c:	f000 fb36 	bl	8003ccc <my_print_str>
				_ADD_CHAR(r, 0);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	2b0f      	cmp	r3, #15
 8003664:	dc09      	bgt.n	800367a <screen_refresh+0x236>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	603a      	str	r2, [r7, #0]
 800366c:	4922      	ldr	r1, [pc, #136]	; (80036f8 <screen_refresh+0x2b4>)
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	0112      	lsls	r2, r2, #4
 8003672:	440a      	add	r2, r1
 8003674:	4413      	add	r3, r2
 8003676:	2200      	movs	r2, #0
 8003678:	701a      	strb	r2, [r3, #0]

				r++;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3301      	adds	r3, #1
 800367e:	607b      	str	r3, [r7, #4]
				p = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	603b      	str	r3, [r7, #0]
				my_print_int(scr[r], *(sett_item[settings_item].value), &p, LCD_COLS);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	4a1b      	ldr	r2, [pc, #108]	; (80036f8 <screen_refresh+0x2b4>)
 800368a:	1898      	adds	r0, r3, r2
 800368c:	4b27      	ldr	r3, [pc, #156]	; (800372c <screen_refresh+0x2e8>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	4927      	ldr	r1, [pc, #156]	; (8003730 <screen_refresh+0x2ec>)
 8003692:	4613      	mov	r3, r2
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	4413      	add	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	440b      	add	r3, r1
 800369c:	3308      	adds	r3, #8
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6819      	ldr	r1, [r3, #0]
 80036a2:	463a      	mov	r2, r7
 80036a4:	2310      	movs	r3, #16
 80036a6:	f000 fb3b 	bl	8003d20 <my_print_int>
				_ADD_CHAR(r, 0);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b0f      	cmp	r3, #15
 80036ae:	dc16      	bgt.n	80036de <screen_refresh+0x29a>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	603a      	str	r2, [r7, #0]
 80036b6:	4910      	ldr	r1, [pc, #64]	; (80036f8 <screen_refresh+0x2b4>)
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	0112      	lsls	r2, r2, #4
 80036bc:	440a      	add	r2, r1
 80036be:	4413      	add	r3, r2
 80036c0:	2200      	movs	r2, #0
 80036c2:	701a      	strb	r2, [r3, #0]
			{

			}
			else while (1);

			break;
 80036c4:	e00b      	b.n	80036de <screen_refresh+0x29a>
			else if (settings_level == 1)
 80036c6:	4b18      	ldr	r3, [pc, #96]	; (8003728 <screen_refresh+0x2e4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d007      	beq.n	80036de <screen_refresh+0x29a>
			else while (1);
 80036ce:	e7fe      	b.n	80036ce <screen_refresh+0x28a>
		}

		default: while(1); // each view should be implemented
 80036d0:	e7fe      	b.n	80036d0 <screen_refresh+0x28c>
			break;
 80036d2:	bf00      	nop
 80036d4:	e004      	b.n	80036e0 <screen_refresh+0x29c>
			break;
 80036d6:	bf00      	nop
 80036d8:	e002      	b.n	80036e0 <screen_refresh+0x29c>
			break;
 80036da:	bf00      	nop
 80036dc:	e000      	b.n	80036e0 <screen_refresh+0x29c>
			break;
 80036de:	bf00      	nop
	} // switch (screen_view)

	screen_to_refresh = 0;
 80036e0:	4b14      	ldr	r3, [pc, #80]	; (8003734 <screen_refresh+0x2f0>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
	lcd_to_refresh = 1; // refresh display
 80036e6:	4b14      	ldr	r3, [pc, #80]	; (8003738 <screen_refresh+0x2f4>)
 80036e8:	2201      	movs	r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
}
 80036ec:	bf00      	nop
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20000284 	.word	0x20000284
 80036f8:	200011f0 	.word	0x200011f0
 80036fc:	0800daf8 	.word	0x0800daf8
 8003700:	200012dc 	.word	0x200012dc
 8003704:	0800db04 	.word	0x0800db04
 8003708:	0800db10 	.word	0x0800db10
 800370c:	0800db18 	.word	0x0800db18
 8003710:	20000004 	.word	0x20000004
 8003714:	0800db20 	.word	0x0800db20
 8003718:	0800db28 	.word	0x0800db28
 800371c:	200012d8 	.word	0x200012d8
 8003720:	0800db30 	.word	0x0800db30
 8003724:	0800db38 	.word	0x0800db38
 8003728:	20000278 	.word	0x20000278
 800372c:	2000027c 	.word	0x2000027c
 8003730:	0800db94 	.word	0x0800db94
 8003734:	20000270 	.word	0x20000270
 8003738:	20000274 	.word	0x20000274

0800373c <handle_esc_to_change_view>:
#define _KEY_LONG_DOWN(KEY) (key[KEY].down_time == KEY_REPEAT_DELAY)
#define _KEY_PRESSED_WITH_REPEAT_(KEY) (_KEY_PRESSED_(KEY) || \
             ((key[KEY].down_time > KEY_REPEAT_DELAY) && ((key[KEY].down_time - KEY_REPEAT_DELAY) % KEY_REPEAT_PERIOD == 0)))

int handle_esc_to_change_view()
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
	// Esc key
	if ((_KEY_PRESSED_(KEY_ESC)) && (user_cmd == CMD_IDLE))
 8003740:	4b23      	ldr	r3, [pc, #140]	; (80037d0 <handle_esc_to_change_view+0x94>)
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	2b01      	cmp	r3, #1
 8003746:	d13d      	bne.n	80037c4 <handle_esc_to_change_view+0x88>
 8003748:	4b22      	ldr	r3, [pc, #136]	; (80037d4 <handle_esc_to_change_view+0x98>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d138      	bne.n	80037c4 <handle_esc_to_change_view+0x88>
	{
		// OnExit Menu event
		if (screen_view == VW_MANUAL)
 8003752:	4b21      	ldr	r3, [pc, #132]	; (80037d8 <handle_esc_to_change_view+0x9c>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b01      	cmp	r3, #1
 800375a:	d10a      	bne.n	8003772 <handle_esc_to_change_view+0x36>
		{
			// reset manual speed
			cur_pump_manual_speed = 0;
 800375c:	4b1f      	ldr	r3, [pc, #124]	; (80037dc <handle_esc_to_change_view+0xa0>)
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
			pump_manual_speed     = pump_manual_speed_set[cur_pump_manual_speed];
 8003762:	4b1e      	ldr	r3, [pc, #120]	; (80037dc <handle_esc_to_change_view+0xa0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a1e      	ldr	r2, [pc, #120]	; (80037e0 <handle_esc_to_change_view+0xa4>)
 8003768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376c:	4a1d      	ldr	r2, [pc, #116]	; (80037e4 <handle_esc_to_change_view+0xa8>)
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	e00b      	b.n	800378a <handle_esc_to_change_view+0x4e>
		}
		else if (screen_view == VW_SETTINGS)
 8003772:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <handle_esc_to_change_view+0x9c>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b03      	cmp	r3, #3
 800377a:	d106      	bne.n	800378a <handle_esc_to_change_view+0x4e>
		{
			if (settings_changed)
 800377c:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <handle_esc_to_change_view+0xac>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <handle_esc_to_change_view+0x4e>
			{
				//TODO: save settings

				settings_changed = 0;
 8003784:	4b18      	ldr	r3, [pc, #96]	; (80037e8 <handle_esc_to_change_view+0xac>)
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
			}
		}

		if (screen_view+1 == VW_LAST) screen_view = 0;
 800378a:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <handle_esc_to_change_view+0x9c>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b03      	cmp	r3, #3
 8003792:	d103      	bne.n	800379c <handle_esc_to_change_view+0x60>
 8003794:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <handle_esc_to_change_view+0x9c>)
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	e006      	b.n	80037aa <handle_esc_to_change_view+0x6e>
		else                          screen_view++;
 800379c:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <handle_esc_to_change_view+0x9c>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	3301      	adds	r3, #1
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <handle_esc_to_change_view+0x9c>)
 80037a8:	701a      	strb	r2, [r3, #0]

		// OnEnter Menu event
		if (screen_view == VW_SETTINGS)
 80037aa:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <handle_esc_to_change_view+0x9c>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d102      	bne.n	80037ba <handle_esc_to_change_view+0x7e>
		{
			settings_level = 0;
 80037b4:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <handle_esc_to_change_view+0xb0>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
		}

		screen_to_refresh = 1;
 80037ba:	4b0d      	ldr	r3, [pc, #52]	; (80037f0 <handle_esc_to_change_view+0xb4>)
 80037bc:	2201      	movs	r2, #1
 80037be:	601a      	str	r2, [r3, #0]
		return 1;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <handle_esc_to_change_view+0x8a>
	}
	return 0;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	20001210 	.word	0x20001210
 80037d4:	200012dc 	.word	0x200012dc
 80037d8:	20000284 	.word	0x20000284
 80037dc:	20000268 	.word	0x20000268
 80037e0:	20000038 	.word	0x20000038
 80037e4:	200012d8 	.word	0x200012d8
 80037e8:	20000280 	.word	0x20000280
 80037ec:	20000278 	.word	0x20000278
 80037f0:	20000270 	.word	0x20000270

080037f4 <handle_key_events>:
////////////////////////////////////////////////////////////////////////////////

void handle_key_events()
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
	do
	{
		if (screen_view == VW_DOZING)
 80037fa:	4b99      	ldr	r3, [pc, #612]	; (8003a60 <handle_key_events+0x26c>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d165      	bne.n	80038d0 <handle_key_events+0xdc>
		{
			if (handle_esc_to_change_view()) break;
 8003804:	f7ff ff9a 	bl	800373c <handle_esc_to_change_view>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	f040 81a9 	bne.w	8003b62 <handle_key_events+0x36e>

			// PEDAL key
			if (_KEY_PRESSED_(KEY_PEDAL) || _KEY_PRESSED_(KEY_ENTER))
 8003810:	4b94      	ldr	r3, [pc, #592]	; (8003a64 <handle_key_events+0x270>)
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d003      	beq.n	8003820 <handle_key_events+0x2c>
 8003818:	4b92      	ldr	r3, [pc, #584]	; (8003a64 <handle_key_events+0x270>)
 800381a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800381c:	2b01      	cmp	r3, #1
 800381e:	d109      	bne.n	8003834 <handle_key_events+0x40>
			{
				if (user_cmd == CMD_IDLE)  user_cmd = CMD_START_DOZING;
 8003820:	4b91      	ldr	r3, [pc, #580]	; (8003a68 <handle_key_events+0x274>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	f040 81a6 	bne.w	8003b78 <handle_key_events+0x384>
 800382c:	4b8e      	ldr	r3, [pc, #568]	; (8003a68 <handle_key_events+0x274>)
 800382e:	2204      	movs	r2, #4
 8003830:	701a      	strb	r2, [r3, #0]
 8003832:	e1a1      	b.n	8003b78 <handle_key_events+0x384>
			}

			else if (_KEY_PRESSED_WITH_REPEAT_(KEY_DOWN))
 8003834:	4b8b      	ldr	r3, [pc, #556]	; (8003a64 <handle_key_events+0x270>)
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	2b01      	cmp	r3, #1
 800383a:	d014      	beq.n	8003866 <handle_key_events+0x72>
 800383c:	4b89      	ldr	r3, [pc, #548]	; (8003a64 <handle_key_events+0x270>)
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	2b64      	cmp	r3, #100	; 0x64
 8003842:	dd1c      	ble.n	800387e <handle_key_events+0x8a>
 8003844:	4b87      	ldr	r3, [pc, #540]	; (8003a64 <handle_key_events+0x270>)
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	f1a3 0164 	sub.w	r1, r3, #100	; 0x64
 800384c:	4b87      	ldr	r3, [pc, #540]	; (8003a6c <handle_key_events+0x278>)
 800384e:	fb83 2301 	smull	r2, r3, r3, r1
 8003852:	10da      	asrs	r2, r3, #3
 8003854:	17cb      	asrs	r3, r1, #31
 8003856:	1ad2      	subs	r2, r2, r3
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	1aca      	subs	r2, r1, r3
 8003862:	2a00      	cmp	r2, #0
 8003864:	d10b      	bne.n	800387e <handle_key_events+0x8a>
			{
				pump_feed[P2F_INDEX-1] = (pump_feed[P2F_INDEX-1] > P2F_CHANGE_STEP)  ? pump_feed[P2F_INDEX-1] - P2F_CHANGE_STEP : 0;
 8003866:	4b82      	ldr	r3, [pc, #520]	; (8003a70 <handle_key_events+0x27c>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b05      	cmp	r3, #5
 800386c:	bfb8      	it	lt
 800386e:	2305      	movlt	r3, #5
 8003870:	3b05      	subs	r3, #5
 8003872:	4a7f      	ldr	r2, [pc, #508]	; (8003a70 <handle_key_events+0x27c>)
 8003874:	6053      	str	r3, [r2, #4]
				screen_to_refresh = 1;
 8003876:	4b7f      	ldr	r3, [pc, #508]	; (8003a74 <handle_key_events+0x280>)
 8003878:	2201      	movs	r2, #1
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	e17c      	b.n	8003b78 <handle_key_events+0x384>
			}

			else if (_KEY_PRESSED_WITH_REPEAT_(KEY_UP))
 800387e:	4b79      	ldr	r3, [pc, #484]	; (8003a64 <handle_key_events+0x270>)
 8003880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003882:	2b01      	cmp	r3, #1
 8003884:	d016      	beq.n	80038b4 <handle_key_events+0xc0>
 8003886:	4b77      	ldr	r3, [pc, #476]	; (8003a64 <handle_key_events+0x270>)
 8003888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388a:	2b64      	cmp	r3, #100	; 0x64
 800388c:	f340 8174 	ble.w	8003b78 <handle_key_events+0x384>
 8003890:	4b74      	ldr	r3, [pc, #464]	; (8003a64 <handle_key_events+0x270>)
 8003892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003894:	f1a3 0164 	sub.w	r1, r3, #100	; 0x64
 8003898:	4b74      	ldr	r3, [pc, #464]	; (8003a6c <handle_key_events+0x278>)
 800389a:	fb83 2301 	smull	r2, r3, r3, r1
 800389e:	10da      	asrs	r2, r3, #3
 80038a0:	17cb      	asrs	r3, r1, #31
 80038a2:	1ad2      	subs	r2, r2, r3
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	1aca      	subs	r2, r1, r3
 80038ae:	2a00      	cmp	r2, #0
 80038b0:	f040 8162 	bne.w	8003b78 <handle_key_events+0x384>
			{
				pump_feed[2-1] = (pump_feed[P2F_INDEX-1] + P2F_CHANGE_STEP < P2F_CHANGE_MAX)  ? pump_feed[P2F_INDEX-1] + P2F_CHANGE_STEP : P2F_CHANGE_MAX;
 80038b4:	4b6e      	ldr	r3, [pc, #440]	; (8003a70 <handle_key_events+0x27c>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f241 3283 	movw	r2, #4995	; 0x1383
 80038bc:	4293      	cmp	r3, r2
 80038be:	bfa8      	it	ge
 80038c0:	4613      	movge	r3, r2
 80038c2:	3305      	adds	r3, #5
 80038c4:	4a6a      	ldr	r2, [pc, #424]	; (8003a70 <handle_key_events+0x27c>)
 80038c6:	6053      	str	r3, [r2, #4]
				screen_to_refresh = 1;
 80038c8:	4b6a      	ldr	r3, [pc, #424]	; (8003a74 <handle_key_events+0x280>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
				}
			}
		}

	} while(0);
}
 80038ce:	e153      	b.n	8003b78 <handle_key_events+0x384>
		else if (screen_view == VW_MANUAL)
 80038d0:	4b63      	ldr	r3, [pc, #396]	; (8003a60 <handle_key_events+0x26c>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d158      	bne.n	800398c <handle_key_events+0x198>
			if (handle_esc_to_change_view()) break;
 80038da:	f7ff ff2f 	bl	800373c <handle_esc_to_change_view>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f040 8140 	bne.w	8003b66 <handle_key_events+0x372>
			if (_KEY_DOWN_(KEY_DOWN) || _KEY_DOWN_(KEY_UP))
 80038e6:	4b5f      	ldr	r3, [pc, #380]	; (8003a64 <handle_key_events+0x270>)
 80038e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <handle_key_events+0x102>
 80038ee:	4b5d      	ldr	r3, [pc, #372]	; (8003a64 <handle_key_events+0x270>)
 80038f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d126      	bne.n	8003944 <handle_key_events+0x150>
				int desired_direction = _KEY_DOWN_(KEY_DOWN) ? 0 : 1;
 80038f6:	4b5b      	ldr	r3, [pc, #364]	; (8003a64 <handle_key_events+0x270>)
 80038f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	bf14      	ite	ne
 80038fe:	2301      	movne	r3, #1
 8003900:	2300      	moveq	r3, #0
 8003902:	b2db      	uxtb	r3, r3
 8003904:	603b      	str	r3, [r7, #0]
				if (user_cmd == CMD_IDLE)
 8003906:	4b58      	ldr	r3, [pc, #352]	; (8003a68 <handle_key_events+0x274>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d109      	bne.n	8003924 <handle_key_events+0x130>
					pump_direction = desired_direction;
 8003910:	4a59      	ldr	r2, [pc, #356]	; (8003a78 <handle_key_events+0x284>)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6013      	str	r3, [r2, #0]
					pump_cmd_timeout = 3; // in 10ms, e.g. 3 is equal 3*10ms = 30ms
 8003916:	4b59      	ldr	r3, [pc, #356]	; (8003a7c <handle_key_events+0x288>)
 8003918:	2203      	movs	r2, #3
 800391a:	601a      	str	r2, [r3, #0]
					user_cmd = CMD_MOVE_WITH_ARROWS;
 800391c:	4b52      	ldr	r3, [pc, #328]	; (8003a68 <handle_key_events+0x274>)
 800391e:	2203      	movs	r2, #3
 8003920:	701a      	strb	r2, [r3, #0]
			{
 8003922:	e122      	b.n	8003b6a <handle_key_events+0x376>
				else if ((user_cmd == CMD_MOVE_WITH_ARROWS) && (pump_direction == desired_direction)) // if is already moving in desired direction
 8003924:	4b50      	ldr	r3, [pc, #320]	; (8003a68 <handle_key_events+0x274>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b03      	cmp	r3, #3
 800392c:	f040 811d 	bne.w	8003b6a <handle_key_events+0x376>
 8003930:	4b51      	ldr	r3, [pc, #324]	; (8003a78 <handle_key_events+0x284>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	f040 8117 	bne.w	8003b6a <handle_key_events+0x376>
					pump_cmd_timeout = 3; // in 10ms, e.g. 3 is equal 3*10ms = 30ms
 800393c:	4b4f      	ldr	r3, [pc, #316]	; (8003a7c <handle_key_events+0x288>)
 800393e:	2203      	movs	r2, #3
 8003940:	601a      	str	r2, [r3, #0]
			{
 8003942:	e112      	b.n	8003b6a <handle_key_events+0x376>
			else if (_KEY_PRESSED_(KEY_PEDAL) || _KEY_PRESSED_(KEY_ENTER))
 8003944:	4b47      	ldr	r3, [pc, #284]	; (8003a64 <handle_key_events+0x270>)
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d004      	beq.n	8003956 <handle_key_events+0x162>
 800394c:	4b45      	ldr	r3, [pc, #276]	; (8003a64 <handle_key_events+0x270>)
 800394e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003950:	2b01      	cmp	r3, #1
 8003952:	f040 8111 	bne.w	8003b78 <handle_key_events+0x384>
				if (user_cmd == CMD_IDLE)
 8003956:	4b44      	ldr	r3, [pc, #272]	; (8003a68 <handle_key_events+0x274>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	f040 810b 	bne.w	8003b78 <handle_key_events+0x384>
					cur_pump_manual_speed = (cur_pump_manual_speed+1) % PMS_SET_COUNT;
 8003962:	4b47      	ldr	r3, [pc, #284]	; (8003a80 <handle_key_events+0x28c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3301      	adds	r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	bfb8      	it	lt
 8003970:	425b      	neglt	r3, r3
 8003972:	4a43      	ldr	r2, [pc, #268]	; (8003a80 <handle_key_events+0x28c>)
 8003974:	6013      	str	r3, [r2, #0]
					pump_manual_speed     = pump_manual_speed_set[cur_pump_manual_speed];
 8003976:	4b42      	ldr	r3, [pc, #264]	; (8003a80 <handle_key_events+0x28c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a42      	ldr	r2, [pc, #264]	; (8003a84 <handle_key_events+0x290>)
 800397c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003980:	4a41      	ldr	r2, [pc, #260]	; (8003a88 <handle_key_events+0x294>)
 8003982:	6013      	str	r3, [r2, #0]
					screen_to_refresh = 1;
 8003984:	4b3b      	ldr	r3, [pc, #236]	; (8003a74 <handle_key_events+0x280>)
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]
}
 800398a:	e0f5      	b.n	8003b78 <handle_key_events+0x384>
		else if (screen_view == VW_CHANGE)
 800398c:	4b34      	ldr	r3, [pc, #208]	; (8003a60 <handle_key_events+0x26c>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d146      	bne.n	8003a24 <handle_key_events+0x230>
			if (handle_esc_to_change_view()) break;
 8003996:	f7ff fed1 	bl	800373c <handle_esc_to_change_view>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	f040 80e6 	bne.w	8003b6e <handle_key_events+0x37a>
			if (_KEY_DOWN_(KEY_DOWN) || _KEY_DOWN_(KEY_UP))
 80039a2:	4b30      	ldr	r3, [pc, #192]	; (8003a64 <handle_key_events+0x270>)
 80039a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <handle_key_events+0x1be>
 80039aa:	4b2e      	ldr	r3, [pc, #184]	; (8003a64 <handle_key_events+0x270>)
 80039ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d126      	bne.n	8003a00 <handle_key_events+0x20c>
				int desired_direction = _KEY_DOWN_(KEY_DOWN) ? 0 : 1;
 80039b2:	4b2c      	ldr	r3, [pc, #176]	; (8003a64 <handle_key_events+0x270>)
 80039b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	bf14      	ite	ne
 80039ba:	2301      	movne	r3, #1
 80039bc:	2300      	moveq	r3, #0
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	607b      	str	r3, [r7, #4]
				if (user_cmd == CMD_IDLE)
 80039c2:	4b29      	ldr	r3, [pc, #164]	; (8003a68 <handle_key_events+0x274>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d109      	bne.n	80039e0 <handle_key_events+0x1ec>
					pump_direction = desired_direction;
 80039cc:	4a2a      	ldr	r2, [pc, #168]	; (8003a78 <handle_key_events+0x284>)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6013      	str	r3, [r2, #0]
					pump_cmd_timeout = 3; // in 10ms, e.g. 3 is equal 3*10ms = 30ms
 80039d2:	4b2a      	ldr	r3, [pc, #168]	; (8003a7c <handle_key_events+0x288>)
 80039d4:	2203      	movs	r2, #3
 80039d6:	601a      	str	r2, [r3, #0]
					user_cmd = CMD_MOVE_WITH_ARROWS;
 80039d8:	4b23      	ldr	r3, [pc, #140]	; (8003a68 <handle_key_events+0x274>)
 80039da:	2203      	movs	r2, #3
 80039dc:	701a      	strb	r2, [r3, #0]
			{
 80039de:	e0c8      	b.n	8003b72 <handle_key_events+0x37e>
				else if ((user_cmd == CMD_MOVE_WITH_ARROWS) && (pump_direction == desired_direction)) // if is already moving in desired direction
 80039e0:	4b21      	ldr	r3, [pc, #132]	; (8003a68 <handle_key_events+0x274>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	f040 80c3 	bne.w	8003b72 <handle_key_events+0x37e>
 80039ec:	4b22      	ldr	r3, [pc, #136]	; (8003a78 <handle_key_events+0x284>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	f040 80bd 	bne.w	8003b72 <handle_key_events+0x37e>
					pump_cmd_timeout = 3; // in 10ms, e.g. 3 is equal 3*10ms = 30ms
 80039f8:	4b20      	ldr	r3, [pc, #128]	; (8003a7c <handle_key_events+0x288>)
 80039fa:	2203      	movs	r2, #3
 80039fc:	601a      	str	r2, [r3, #0]
			{
 80039fe:	e0b8      	b.n	8003b72 <handle_key_events+0x37e>
			else if (_KEY_LONG_DOWN(KEY_ENTER))
 8003a00:	4b18      	ldr	r3, [pc, #96]	; (8003a64 <handle_key_events+0x270>)
 8003a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a04:	2b64      	cmp	r3, #100	; 0x64
 8003a06:	f040 80b7 	bne.w	8003b78 <handle_key_events+0x384>
				if (user_cmd == CMD_IDLE)
 8003a0a:	4b17      	ldr	r3, [pc, #92]	; (8003a68 <handle_key_events+0x274>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f040 80b1 	bne.w	8003b78 <handle_key_events+0x384>
					user_cmd = CMD_GO_HOME;
 8003a16:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <handle_key_events+0x274>)
 8003a18:	2201      	movs	r2, #1
 8003a1a:	701a      	strb	r2, [r3, #0]
					screen_to_refresh = 1;
 8003a1c:	4b15      	ldr	r3, [pc, #84]	; (8003a74 <handle_key_events+0x280>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	601a      	str	r2, [r3, #0]
}
 8003a22:	e0a9      	b.n	8003b78 <handle_key_events+0x384>
		else if (screen_view == VW_SETTINGS)
 8003a24:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <handle_key_events+0x26c>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	f040 80a4 	bne.w	8003b78 <handle_key_events+0x384>
			if (settings_level == 0) // Settings list
 8003a30:	4b16      	ldr	r3, [pc, #88]	; (8003a8c <handle_key_events+0x298>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f040 8080 	bne.w	8003b3a <handle_key_events+0x346>
				if (handle_esc_to_change_view()) break;
 8003a3a:	f7ff fe7f 	bl	800373c <handle_esc_to_change_view>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f040 8098 	bne.w	8003b76 <handle_key_events+0x382>
				if (_KEY_PRESSED_(KEY_ENTER)) // Enter to parameter changing
 8003a46:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <handle_key_events+0x270>)
 8003a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d120      	bne.n	8003a90 <handle_key_events+0x29c>
					settings_level++;
 8003a4e:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <handle_key_events+0x298>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3301      	adds	r3, #1
 8003a54:	4a0d      	ldr	r2, [pc, #52]	; (8003a8c <handle_key_events+0x298>)
 8003a56:	6013      	str	r3, [r2, #0]
					screen_to_refresh = 1;
 8003a58:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <handle_key_events+0x280>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
}
 8003a5e:	e08b      	b.n	8003b78 <handle_key_events+0x384>
 8003a60:	20000284 	.word	0x20000284
 8003a64:	20001210 	.word	0x20001210
 8003a68:	200012dc 	.word	0x200012dc
 8003a6c:	66666667 	.word	0x66666667
 8003a70:	20000004 	.word	0x20000004
 8003a74:	20000270 	.word	0x20000270
 8003a78:	20000264 	.word	0x20000264
 8003a7c:	200011ec 	.word	0x200011ec
 8003a80:	20000268 	.word	0x20000268
 8003a84:	20000038 	.word	0x20000038
 8003a88:	200012d8 	.word	0x200012d8
 8003a8c:	20000278 	.word	0x20000278
				else if (_KEY_PRESSED_WITH_REPEAT_(KEY_DOWN)) // previous item
 8003a90:	4b3b      	ldr	r3, [pc, #236]	; (8003b80 <handle_key_events+0x38c>)
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d014      	beq.n	8003ac2 <handle_key_events+0x2ce>
 8003a98:	4b39      	ldr	r3, [pc, #228]	; (8003b80 <handle_key_events+0x38c>)
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	2b64      	cmp	r3, #100	; 0x64
 8003a9e:	dd21      	ble.n	8003ae4 <handle_key_events+0x2f0>
 8003aa0:	4b37      	ldr	r3, [pc, #220]	; (8003b80 <handle_key_events+0x38c>)
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa4:	f1a3 0164 	sub.w	r1, r3, #100	; 0x64
 8003aa8:	4b36      	ldr	r3, [pc, #216]	; (8003b84 <handle_key_events+0x390>)
 8003aaa:	fb83 2301 	smull	r2, r3, r3, r1
 8003aae:	10da      	asrs	r2, r3, #3
 8003ab0:	17cb      	asrs	r3, r1, #31
 8003ab2:	1ad2      	subs	r2, r2, r3
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	1aca      	subs	r2, r1, r3
 8003abe:	2a00      	cmp	r2, #0
 8003ac0:	d110      	bne.n	8003ae4 <handle_key_events+0x2f0>
					settings_item = (settings_item-1 + SETTINGS_ITEMS_COUNT) % SETTINGS_ITEMS_COUNT;
 8003ac2:	4b31      	ldr	r3, [pc, #196]	; (8003b88 <handle_key_events+0x394>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	1c99      	adds	r1, r3, #2
 8003ac8:	4b30      	ldr	r3, [pc, #192]	; (8003b8c <handle_key_events+0x398>)
 8003aca:	fba3 2301 	umull	r2, r3, r3, r1
 8003ace:	085a      	lsrs	r2, r3, #1
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	4413      	add	r3, r2
 8003ad6:	1aca      	subs	r2, r1, r3
 8003ad8:	4b2b      	ldr	r3, [pc, #172]	; (8003b88 <handle_key_events+0x394>)
 8003ada:	601a      	str	r2, [r3, #0]
					screen_to_refresh = 1;
 8003adc:	4b2c      	ldr	r3, [pc, #176]	; (8003b90 <handle_key_events+0x39c>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	e049      	b.n	8003b78 <handle_key_events+0x384>
				else if (_KEY_PRESSED_WITH_REPEAT_(KEY_UP)) // next item
 8003ae4:	4b26      	ldr	r3, [pc, #152]	; (8003b80 <handle_key_events+0x38c>)
 8003ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d014      	beq.n	8003b16 <handle_key_events+0x322>
 8003aec:	4b24      	ldr	r3, [pc, #144]	; (8003b80 <handle_key_events+0x38c>)
 8003aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af0:	2b64      	cmp	r3, #100	; 0x64
 8003af2:	dd41      	ble.n	8003b78 <handle_key_events+0x384>
 8003af4:	4b22      	ldr	r3, [pc, #136]	; (8003b80 <handle_key_events+0x38c>)
 8003af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af8:	f1a3 0164 	sub.w	r1, r3, #100	; 0x64
 8003afc:	4b21      	ldr	r3, [pc, #132]	; (8003b84 <handle_key_events+0x390>)
 8003afe:	fb83 2301 	smull	r2, r3, r3, r1
 8003b02:	10da      	asrs	r2, r3, #3
 8003b04:	17cb      	asrs	r3, r1, #31
 8003b06:	1ad2      	subs	r2, r2, r3
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	1aca      	subs	r2, r1, r3
 8003b12:	2a00      	cmp	r2, #0
 8003b14:	d130      	bne.n	8003b78 <handle_key_events+0x384>
					settings_item = (settings_item+1) % SETTINGS_ITEMS_COUNT;
 8003b16:	4b1c      	ldr	r3, [pc, #112]	; (8003b88 <handle_key_events+0x394>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <handle_key_events+0x398>)
 8003b20:	fba3 2301 	umull	r2, r3, r3, r1
 8003b24:	085a      	lsrs	r2, r3, #1
 8003b26:	4613      	mov	r3, r2
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	4413      	add	r3, r2
 8003b2c:	1aca      	subs	r2, r1, r3
 8003b2e:	4b16      	ldr	r3, [pc, #88]	; (8003b88 <handle_key_events+0x394>)
 8003b30:	601a      	str	r2, [r3, #0]
					screen_to_refresh = 1;
 8003b32:	4b17      	ldr	r3, [pc, #92]	; (8003b90 <handle_key_events+0x39c>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
}
 8003b38:	e01e      	b.n	8003b78 <handle_key_events+0x384>
			else if (settings_level == 1) // Parameter changing
 8003b3a:	4b16      	ldr	r3, [pc, #88]	; (8003b94 <handle_key_events+0x3a0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d11a      	bne.n	8003b78 <handle_key_events+0x384>
				if (_KEY_PRESSED_(KEY_ENTER)) // apply parameter changes and exit
 8003b42:	4b0f      	ldr	r3, [pc, #60]	; (8003b80 <handle_key_events+0x38c>)
 8003b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d116      	bne.n	8003b78 <handle_key_events+0x384>
						settings_changed = 1;
 8003b4a:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <handle_key_events+0x3a4>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
					settings_level--;
 8003b50:	4b10      	ldr	r3, [pc, #64]	; (8003b94 <handle_key_events+0x3a0>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	4a0f      	ldr	r2, [pc, #60]	; (8003b94 <handle_key_events+0x3a0>)
 8003b58:	6013      	str	r3, [r2, #0]
					screen_to_refresh = 1;
 8003b5a:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <handle_key_events+0x39c>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
}
 8003b60:	e00a      	b.n	8003b78 <handle_key_events+0x384>
			if (handle_esc_to_change_view()) break;
 8003b62:	bf00      	nop
 8003b64:	e008      	b.n	8003b78 <handle_key_events+0x384>
			if (handle_esc_to_change_view()) break;
 8003b66:	bf00      	nop
 8003b68:	e006      	b.n	8003b78 <handle_key_events+0x384>
			{
 8003b6a:	bf00      	nop
 8003b6c:	e004      	b.n	8003b78 <handle_key_events+0x384>
			if (handle_esc_to_change_view()) break;
 8003b6e:	bf00      	nop
 8003b70:	e002      	b.n	8003b78 <handle_key_events+0x384>
			{
 8003b72:	bf00      	nop
 8003b74:	e000      	b.n	8003b78 <handle_key_events+0x384>
				if (handle_esc_to_change_view()) break;
 8003b76:	bf00      	nop
}
 8003b78:	bf00      	nop
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20001210 	.word	0x20001210
 8003b84:	66666667 	.word	0x66666667
 8003b88:	2000027c 	.word	0x2000027c
 8003b8c:	aaaaaaab 	.word	0xaaaaaaab
 8003b90:	20000270 	.word	0x20000270
 8003b94:	20000278 	.word	0x20000278
 8003b98:	20000280 	.word	0x20000280

08003b9c <Handle_1ms_Timer>:

void Handle_1ms_Timer() {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
	if (++tick_10ms == 10) { // each 10 ms
 8003ba0:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <Handle_1ms_Timer+0x40>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	4a0d      	ldr	r2, [pc, #52]	; (8003bdc <Handle_1ms_Timer+0x40>)
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <Handle_1ms_Timer+0x40>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b0a      	cmp	r3, #10
 8003bb0:	d106      	bne.n	8003bc0 <Handle_1ms_Timer+0x24>
		tick_10ms = 0;
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <Handle_1ms_Timer+0x40>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]

		handle_key_states();
 8003bb8:	f7fe f9f6 	bl	8001fa8 <handle_key_states>
		handle_key_events();
 8003bbc:	f7ff fe1a 	bl	80037f4 <handle_key_events>
	}

	if (screen_to_refresh)
 8003bc0:	4b07      	ldr	r3, [pc, #28]	; (8003be0 <Handle_1ms_Timer+0x44>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <Handle_1ms_Timer+0x30>
		screen_refresh();
 8003bc8:	f7ff fc3c 	bl	8003444 <screen_refresh>

	if (lcd_to_refresh)
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <Handle_1ms_Timer+0x48>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <Handle_1ms_Timer+0x3c>
		lcd_refresh();
 8003bd4:	f7ff f99c 	bl	8002f10 <lcd_refresh>
}
 8003bd8:	bf00      	nop
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000288 	.word	0x20000288
 8003be0:	20000270 	.word	0x20000270
 8003be4:	20000274 	.word	0x20000274

08003be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bec:	f000 fac6 	bl	800417c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003bf0:	f000 f80d 	bl	8003c0e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bf4:	f7fd fdce 	bl	8001794 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003bf8:	f000 fa0e 	bl	8004018 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003bfc:	f7fd fe6a 	bl	80018d4 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8003c00:	f009 f80e 	bl	800cc20 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  Setup();
 8003c04:	f7ff fc00 	bl	8003408 <Setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  Loop();
 8003c08:	f7ff fbd4 	bl	80033b4 <Loop>
 8003c0c:	e7fc      	b.n	8003c08 <main+0x20>

08003c0e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b094      	sub	sp, #80	; 0x50
 8003c12:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c18:	2228      	movs	r2, #40	; 0x28
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f009 fc9f 	bl	800d560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c22:	f107 0314 	add.w	r3, r7, #20
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	605a      	str	r2, [r3, #4]
 8003c2c:	609a      	str	r2, [r3, #8]
 8003c2e:	60da      	str	r2, [r3, #12]
 8003c30:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c32:	1d3b      	adds	r3, r7, #4
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	605a      	str	r2, [r3, #4]
 8003c3a:	609a      	str	r2, [r3, #8]
 8003c3c:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c50:	2302      	movs	r3, #2
 8003c52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003c5a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c64:	4618      	mov	r0, r3
 8003c66:	f004 fb8b 	bl	8008380 <HAL_RCC_OscConfig>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003c70:	f000 f827 	bl	8003cc2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c74:	230f      	movs	r3, #15
 8003c76:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c84:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c86:	2300      	movs	r3, #0
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c8a:	f107 0314 	add.w	r3, r7, #20
 8003c8e:	2102      	movs	r1, #2
 8003c90:	4618      	mov	r0, r3
 8003c92:	f004 fdf5 	bl	8008880 <HAL_RCC_ClockConfig>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8003c9c:	f000 f811 	bl	8003cc2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003ca0:	2310      	movs	r3, #16
 8003ca2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ca8:	1d3b      	adds	r3, r7, #4
 8003caa:	4618      	mov	r0, r3
 8003cac:	f004 ff82 	bl	8008bb4 <HAL_RCCEx_PeriphCLKConfig>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003cb6:	f000 f804 	bl	8003cc2 <Error_Handler>
  }
}
 8003cba:	bf00      	nop
 8003cbc:	3750      	adds	r7, #80	; 0x50
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cc6:	b672      	cpsid	i
}
 8003cc8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cca:	e7fe      	b.n	8003cca <Error_Handler+0x8>

08003ccc <my_print_str>:
 */

#include "my_print.h"

void my_print_str(char *dest_s, char *src_s, int *ptr, int ptr_max)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]
  int i=0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]
  while ((*ptr<ptr_max) && (src_s[i]))
 8003cde:	e00f      	b.n	8003d00 <my_print_str+0x34>
    dest_s[(*ptr)++] = src_s[i++];
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	617a      	str	r2, [r7, #20]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	441a      	add	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	1c58      	adds	r0, r3, #1
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	6008      	str	r0, [r1, #0]
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	440b      	add	r3, r1
 8003cfc:	7812      	ldrb	r2, [r2, #0]
 8003cfe:	701a      	strb	r2, [r3, #0]
  while ((*ptr<ptr_max) && (src_s[i]))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	dd05      	ble.n	8003d16 <my_print_str+0x4a>
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	4413      	add	r3, r2
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1e4      	bne.n	8003ce0 <my_print_str+0x14>
}
 8003d16:	bf00      	nop
 8003d18:	371c      	adds	r7, #28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr

08003d20 <my_print_int>:
////////////////////////////////////////////////////////////////////////////////

void my_print_int(char *out_s, int t, int *ptr, int ptr_max)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b08b      	sub	sp, #44	; 0x2c
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
      uint8_t s[11];
      int l = 0;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
      if (t<0) {
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	da11      	bge.n	8003d5c <my_print_int+0x3c>
        t *= -1;
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	425b      	negs	r3, r3
 8003d3c:	60bb      	str	r3, [r7, #8]
        if (*ptr<ptr_max) out_s[(*ptr)++] = '-';
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	dd09      	ble.n	8003d5c <my_print_int+0x3c>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	1c59      	adds	r1, r3, #1
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6011      	str	r1, [r2, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4413      	add	r3, r2
 8003d58:	222d      	movs	r2, #45	; 0x2d
 8003d5a:	701a      	strb	r2, [r3, #0]
      }
      do {
        s[l++] = (t%10)+'0';
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	4b23      	ldr	r3, [pc, #140]	; (8003dec <my_print_int+0xcc>)
 8003d60:	fb83 1302 	smull	r1, r3, r3, r2
 8003d64:	1099      	asrs	r1, r3, #2
 8003d66:	17d3      	asrs	r3, r2, #31
 8003d68:	1ac9      	subs	r1, r1, r3
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	1ad1      	subs	r1, r2, r3
 8003d74:	b2ca      	uxtb	r2, r1
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	1c59      	adds	r1, r3, #1
 8003d7a:	6279      	str	r1, [r7, #36]	; 0x24
 8003d7c:	3230      	adds	r2, #48	; 0x30
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003d84:	440b      	add	r3, r1
 8003d86:	f803 2c14 	strb.w	r2, [r3, #-20]
        t /= 10;
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	4a17      	ldr	r2, [pc, #92]	; (8003dec <my_print_int+0xcc>)
 8003d8e:	fb82 1203 	smull	r1, r2, r2, r3
 8003d92:	1092      	asrs	r2, r2, #2
 8003d94:	17db      	asrs	r3, r3, #31
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	60bb      	str	r3, [r7, #8]
      } while (t);
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1dd      	bne.n	8003d5c <my_print_int+0x3c>
      for (int j=0; (j<l) && (*ptr<ptr_max); j++) out_s[(*ptr)++] = s[l-j-1];
 8003da0:	2300      	movs	r3, #0
 8003da2:	623b      	str	r3, [r7, #32]
 8003da4:	e014      	b.n	8003dd0 <my_print_int+0xb0>
 8003da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	1e5a      	subs	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	1c58      	adds	r0, r3, #1
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	6008      	str	r0, [r1, #0]
 8003db8:	4619      	mov	r1, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	440b      	add	r3, r1
 8003dbe:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003dc2:	440a      	add	r2, r1
 8003dc4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003dc8:	701a      	strb	r2, [r3, #0]
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	623b      	str	r3, [r7, #32]
 8003dd0:	6a3a      	ldr	r2, [r7, #32]
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	da04      	bge.n	8003de2 <my_print_int+0xc2>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	dce1      	bgt.n	8003da6 <my_print_int+0x86>
}
 8003de2:	bf00      	nop
 8003de4:	372c      	adds	r7, #44	; 0x2c
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr
 8003dec:	66666667 	.word	0x66666667

08003df0 <my_print_int_a>:
////////////////////////////////////////////////////////////////////////////////

void my_print_int_a(char *out_s, int t, int align, int *ptr, int ptr_max)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b08d      	sub	sp, #52	; 0x34
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
 8003dfc:	603b      	str	r3, [r7, #0]
      uint8_t s[11];
      int l = 0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
      int negative;

      // check for negative value
      if (t<0)
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	da05      	bge.n	8003e14 <my_print_int_a+0x24>
      {
    	negative = 1;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
        t *= -1;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	425b      	negs	r3, r3
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	e001      	b.n	8003e18 <my_print_int_a+0x28>
      }
      else negative = 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	62bb      	str	r3, [r7, #40]	; 0x28

      // extract digits
      do {
        s[l++] = (t%10)+'0';
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	4b39      	ldr	r3, [pc, #228]	; (8003f00 <my_print_int_a+0x110>)
 8003e1c:	fb83 1302 	smull	r1, r3, r3, r2
 8003e20:	1099      	asrs	r1, r3, #2
 8003e22:	17d3      	asrs	r3, r2, #31
 8003e24:	1ac9      	subs	r1, r1, r3
 8003e26:	460b      	mov	r3, r1
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	1ad1      	subs	r1, r2, r3
 8003e30:	b2ca      	uxtb	r2, r1
 8003e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e34:	1c59      	adds	r1, r3, #1
 8003e36:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003e38:	3230      	adds	r2, #48	; 0x30
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003e40:	440b      	add	r3, r1
 8003e42:	f803 2c1c 	strb.w	r2, [r3, #-28]
        t /= 10;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	4a2d      	ldr	r2, [pc, #180]	; (8003f00 <my_print_int_a+0x110>)
 8003e4a:	fb82 1203 	smull	r1, r2, r2, r3
 8003e4e:	1092      	asrs	r2, r2, #2
 8003e50:	17db      	asrs	r3, r3, #31
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	60bb      	str	r3, [r7, #8]
      } while (t);
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1dd      	bne.n	8003e18 <my_print_int_a+0x28>

      // add sign
      if ((*ptr<ptr_max) && (negative)) s[l++] = '-';
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e62:	429a      	cmp	r2, r3
 8003e64:	dd0b      	ble.n	8003e7e <my_print_int_a+0x8e>
 8003e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <my_print_int_a+0x8e>
 8003e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e72:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003e76:	4413      	add	r3, r2
 8003e78:	222d      	movs	r2, #45	; 0x2d
 8003e7a:	f803 2c1c 	strb.w	r2, [r3, #-28]

      // add align spaces
      for (int j=0; (j<align-l) && (*ptr<ptr_max); j++)
 8003e7e:	2300      	movs	r3, #0
 8003e80:	627b      	str	r3, [r7, #36]	; 0x24
 8003e82:	e00c      	b.n	8003e9e <my_print_int_a+0xae>
    	  out_s[(*ptr)++] = ' ';
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	1c59      	adds	r1, r3, #1
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	6011      	str	r1, [r2, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4413      	add	r3, r2
 8003e94:	2220      	movs	r2, #32
 8003e96:	701a      	strb	r2, [r3, #0]
      for (int j=0; (j<align-l) && (*ptr<ptr_max); j++)
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	da04      	bge.n	8003eb4 <my_print_int_a+0xc4>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	dce7      	bgt.n	8003e84 <my_print_int_a+0x94>

      // out sign and digits
      for (int j=0; (j<l) && (*ptr<ptr_max); j++)
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	623b      	str	r3, [r7, #32]
 8003eb8:	e014      	b.n	8003ee4 <my_print_int_a+0xf4>
    	  out_s[(*ptr)++] = s[l-j-1];
 8003eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	1e5a      	subs	r2, r3, #1
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	1c58      	adds	r0, r3, #1
 8003ec8:	6839      	ldr	r1, [r7, #0]
 8003eca:	6008      	str	r0, [r1, #0]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	440b      	add	r3, r1
 8003ed2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003ed6:	440a      	add	r2, r1
 8003ed8:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8003edc:	701a      	strb	r2, [r3, #0]
      for (int j=0; (j<l) && (*ptr<ptr_max); j++)
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	623b      	str	r3, [r7, #32]
 8003ee4:	6a3a      	ldr	r2, [r7, #32]
 8003ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	da04      	bge.n	8003ef6 <my_print_int_a+0x106>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	dce1      	bgt.n	8003eba <my_print_int_a+0xca>
}
 8003ef6:	bf00      	nop
 8003ef8:	3734      	adds	r7, #52	; 0x34
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr
 8003f00:	66666667 	.word	0x66666667

08003f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003f0a:	4b15      	ldr	r3, [pc, #84]	; (8003f60 <HAL_MspInit+0x5c>)
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	4a14      	ldr	r2, [pc, #80]	; (8003f60 <HAL_MspInit+0x5c>)
 8003f10:	f043 0301 	orr.w	r3, r3, #1
 8003f14:	6193      	str	r3, [r2, #24]
 8003f16:	4b12      	ldr	r3, [pc, #72]	; (8003f60 <HAL_MspInit+0x5c>)
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f22:	4b0f      	ldr	r3, [pc, #60]	; (8003f60 <HAL_MspInit+0x5c>)
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	4a0e      	ldr	r2, [pc, #56]	; (8003f60 <HAL_MspInit+0x5c>)
 8003f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	61d3      	str	r3, [r2, #28]
 8003f2e:	4b0c      	ldr	r3, [pc, #48]	; (8003f60 <HAL_MspInit+0x5c>)
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f36:	607b      	str	r3, [r7, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <HAL_MspInit+0x60>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	4a04      	ldr	r2, [pc, #16]	; (8003f64 <HAL_MspInit+0x60>)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr
 8003f60:	40021000 	.word	0x40021000
 8003f64:	40010000 	.word	0x40010000

08003f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f6c:	e7fe      	b.n	8003f6c <NMI_Handler+0x4>

08003f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f72:	e7fe      	b.n	8003f72 <HardFault_Handler+0x4>

08003f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f78:	e7fe      	b.n	8003f78 <MemManage_Handler+0x4>

08003f7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f7e:	e7fe      	b.n	8003f7e <BusFault_Handler+0x4>

08003f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f84:	e7fe      	b.n	8003f84 <UsageFault_Handler+0x4>

08003f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f86:	b480      	push	{r7}
 8003f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f8a:	bf00      	nop
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr

08003f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f92:	b480      	push	{r7}
 8003f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f96:	bf00      	nop
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fa2:	bf00      	nop
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr

08003faa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fae:	f000 f92b 	bl	8004208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

void Handle_1ms_Timer();

  Handle_1ms_Timer();
 8003fb2:	f7ff fdf3 	bl	8003b9c <Handle_1ms_Timer>

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fb6:	bf00      	nop
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003fc0:	4802      	ldr	r0, [pc, #8]	; (8003fcc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003fc2:	f002 ff7c 	bl	8006ebe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003fc6:	bf00      	nop
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20001fb8 	.word	0x20001fb8

08003fd0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003fd4:	4802      	ldr	r0, [pc, #8]	; (8003fe0 <I2C1_EV_IRQHandler+0x10>)
 8003fd6:	f000 ff81 	bl	8004edc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003fda:	bf00      	nop
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000d94 	.word	0x20000d94

08003fe4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003fe8:	4802      	ldr	r0, [pc, #8]	; (8003ff4 <I2C1_ER_IRQHandler+0x10>)
 8003fea:	f001 f8e4 	bl	80051b6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003fee:	bf00      	nop
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000d94 	.word	0x20000d94

08003ff8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ffc:	4802      	ldr	r0, [pc, #8]	; (8004008 <USART1_IRQHandler+0x10>)
 8003ffe:	f004 ff75 	bl	8008eec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	200012e0 	.word	0x200012e0

0800400c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004010:	bf00      	nop
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr

08004018 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800401c:	4b11      	ldr	r3, [pc, #68]	; (8004064 <MX_USART1_UART_Init+0x4c>)
 800401e:	4a12      	ldr	r2, [pc, #72]	; (8004068 <MX_USART1_UART_Init+0x50>)
 8004020:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004022:	4b10      	ldr	r3, [pc, #64]	; (8004064 <MX_USART1_UART_Init+0x4c>)
 8004024:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004028:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800402a:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <MX_USART1_UART_Init+0x4c>)
 800402c:	2200      	movs	r2, #0
 800402e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004030:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <MX_USART1_UART_Init+0x4c>)
 8004032:	2200      	movs	r2, #0
 8004034:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004036:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <MX_USART1_UART_Init+0x4c>)
 8004038:	2200      	movs	r2, #0
 800403a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800403c:	4b09      	ldr	r3, [pc, #36]	; (8004064 <MX_USART1_UART_Init+0x4c>)
 800403e:	220c      	movs	r2, #12
 8004040:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004042:	4b08      	ldr	r3, [pc, #32]	; (8004064 <MX_USART1_UART_Init+0x4c>)
 8004044:	2200      	movs	r2, #0
 8004046:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004048:	4b06      	ldr	r3, [pc, #24]	; (8004064 <MX_USART1_UART_Init+0x4c>)
 800404a:	2200      	movs	r2, #0
 800404c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800404e:	4805      	ldr	r0, [pc, #20]	; (8004064 <MX_USART1_UART_Init+0x4c>)
 8004050:	f004 fe66 	bl	8008d20 <HAL_UART_Init>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800405a:	f7ff fe32 	bl	8003cc2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800405e:	bf00      	nop
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	200012e0 	.word	0x200012e0
 8004068:	40013800 	.word	0x40013800

0800406c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08a      	sub	sp, #40	; 0x28
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004074:	f107 0314 	add.w	r3, r7, #20
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	605a      	str	r2, [r3, #4]
 800407e:	609a      	str	r2, [r3, #8]
 8004080:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a26      	ldr	r2, [pc, #152]	; (8004120 <HAL_UART_MspInit+0xb4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d145      	bne.n	8004118 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800408c:	4b25      	ldr	r3, [pc, #148]	; (8004124 <HAL_UART_MspInit+0xb8>)
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	4a24      	ldr	r2, [pc, #144]	; (8004124 <HAL_UART_MspInit+0xb8>)
 8004092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004096:	6193      	str	r3, [r2, #24]
 8004098:	4b22      	ldr	r3, [pc, #136]	; (8004124 <HAL_UART_MspInit+0xb8>)
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040a4:	4b1f      	ldr	r3, [pc, #124]	; (8004124 <HAL_UART_MspInit+0xb8>)
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	4a1e      	ldr	r2, [pc, #120]	; (8004124 <HAL_UART_MspInit+0xb8>)
 80040aa:	f043 0308 	orr.w	r3, r3, #8
 80040ae:	6193      	str	r3, [r2, #24]
 80040b0:	4b1c      	ldr	r3, [pc, #112]	; (8004124 <HAL_UART_MspInit+0xb8>)
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CONSOLE_TX_Pin;
 80040bc:	2340      	movs	r3, #64	; 0x40
 80040be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c0:	2302      	movs	r3, #2
 80040c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040c4:	2303      	movs	r3, #3
 80040c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(CONSOLE_TX_GPIO_Port, &GPIO_InitStruct);
 80040c8:	f107 0314 	add.w	r3, r7, #20
 80040cc:	4619      	mov	r1, r3
 80040ce:	4816      	ldr	r0, [pc, #88]	; (8004128 <HAL_UART_MspInit+0xbc>)
 80040d0:	f000 fa6a 	bl	80045a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CONSOLE_RX_Pin;
 80040d4:	2380      	movs	r3, #128	; 0x80
 80040d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040d8:	2300      	movs	r3, #0
 80040da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040dc:	2300      	movs	r3, #0
 80040de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CONSOLE_RX_GPIO_Port, &GPIO_InitStruct);
 80040e0:	f107 0314 	add.w	r3, r7, #20
 80040e4:	4619      	mov	r1, r3
 80040e6:	4810      	ldr	r0, [pc, #64]	; (8004128 <HAL_UART_MspInit+0xbc>)
 80040e8:	f000 fa5e 	bl	80045a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80040ec:	4b0f      	ldr	r3, [pc, #60]	; (800412c <HAL_UART_MspInit+0xc0>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	627b      	str	r3, [r7, #36]	; 0x24
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	f043 0304 	orr.w	r3, r3, #4
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
 8004102:	4a0a      	ldr	r2, [pc, #40]	; (800412c <HAL_UART_MspInit+0xc0>)
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8004108:	2200      	movs	r2, #0
 800410a:	2101      	movs	r1, #1
 800410c:	2025      	movs	r0, #37	; 0x25
 800410e:	f000 f992 	bl	8004436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004112:	2025      	movs	r0, #37	; 0x25
 8004114:	f000 f9ab 	bl	800446e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004118:	bf00      	nop
 800411a:	3728      	adds	r7, #40	; 0x28
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40013800 	.word	0x40013800
 8004124:	40021000 	.word	0x40021000
 8004128:	40010c00 	.word	0x40010c00
 800412c:	40010000 	.word	0x40010000

08004130 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004130:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004132:	e003      	b.n	800413c <LoopCopyDataInit>

08004134 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004134:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004136:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004138:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800413a:	3104      	adds	r1, #4

0800413c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800413c:	480a      	ldr	r0, [pc, #40]	; (8004168 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800413e:	4b0b      	ldr	r3, [pc, #44]	; (800416c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004140:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004142:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004144:	d3f6      	bcc.n	8004134 <CopyDataInit>
  ldr r2, =_sbss
 8004146:	4a0a      	ldr	r2, [pc, #40]	; (8004170 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004148:	e002      	b.n	8004150 <LoopFillZerobss>

0800414a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800414a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800414c:	f842 3b04 	str.w	r3, [r2], #4

08004150 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004150:	4b08      	ldr	r3, [pc, #32]	; (8004174 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004152:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004154:	d3f9      	bcc.n	800414a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004156:	f7ff ff59 	bl	800400c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800415a:	f009 f9dd 	bl	800d518 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800415e:	f7ff fd43 	bl	8003be8 <main>
  bx lr
 8004162:	4770      	bx	lr
  ldr r3, =_sidata
 8004164:	0800dbfc 	.word	0x0800dbfc
  ldr r0, =_sdata
 8004168:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800416c:	20000234 	.word	0x20000234
  ldr r2, =_sbss
 8004170:	20000234 	.word	0x20000234
  ldr r3, = _ebss
 8004174:	200022a4 	.word	0x200022a4

08004178 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004178:	e7fe      	b.n	8004178 <ADC1_2_IRQHandler>
	...

0800417c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004180:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <HAL_Init+0x28>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a07      	ldr	r2, [pc, #28]	; (80041a4 <HAL_Init+0x28>)
 8004186:	f043 0310 	orr.w	r3, r3, #16
 800418a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800418c:	2003      	movs	r0, #3
 800418e:	f000 f947 	bl	8004420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004192:	2001      	movs	r0, #1
 8004194:	f000 f808 	bl	80041a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004198:	f7ff feb4 	bl	8003f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40022000 	.word	0x40022000

080041a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041b0:	4b12      	ldr	r3, [pc, #72]	; (80041fc <HAL_InitTick+0x54>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4b12      	ldr	r3, [pc, #72]	; (8004200 <HAL_InitTick+0x58>)
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	4619      	mov	r1, r3
 80041ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041be:	fbb3 f3f1 	udiv	r3, r3, r1
 80041c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 f95f 	bl	800448a <HAL_SYSTICK_Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e00e      	b.n	80041f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b0f      	cmp	r3, #15
 80041da:	d80a      	bhi.n	80041f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041dc:	2200      	movs	r2, #0
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	f04f 30ff 	mov.w	r0, #4294967295
 80041e4:	f000 f927 	bl	8004436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041e8:	4a06      	ldr	r2, [pc, #24]	; (8004204 <HAL_InitTick+0x5c>)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	e000      	b.n	80041f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	20000050 	.word	0x20000050
 8004200:	20000058 	.word	0x20000058
 8004204:	20000054 	.word	0x20000054

08004208 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800420c:	4b05      	ldr	r3, [pc, #20]	; (8004224 <HAL_IncTick+0x1c>)
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	4b05      	ldr	r3, [pc, #20]	; (8004228 <HAL_IncTick+0x20>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4413      	add	r3, r2
 8004218:	4a03      	ldr	r2, [pc, #12]	; (8004228 <HAL_IncTick+0x20>)
 800421a:	6013      	str	r3, [r2, #0]
}
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr
 8004224:	20000058 	.word	0x20000058
 8004228:	20001320 	.word	0x20001320

0800422c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  return uwTick;
 8004230:	4b02      	ldr	r3, [pc, #8]	; (800423c <HAL_GetTick+0x10>)
 8004232:	681b      	ldr	r3, [r3, #0]
}
 8004234:	4618      	mov	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr
 800423c:	20001320 	.word	0x20001320

08004240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004248:	f7ff fff0 	bl	800422c <HAL_GetTick>
 800424c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004258:	d005      	beq.n	8004266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800425a:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <HAL_Delay+0x44>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4413      	add	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004266:	bf00      	nop
 8004268:	f7ff ffe0 	bl	800422c <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	429a      	cmp	r2, r3
 8004276:	d8f7      	bhi.n	8004268 <HAL_Delay+0x28>
  {
  }
}
 8004278:	bf00      	nop
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20000058 	.word	0x20000058

08004288 <__NVIC_SetPriorityGrouping>:
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004298:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <__NVIC_SetPriorityGrouping+0x44>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042a4:	4013      	ands	r3, r2
 80042a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042ba:	4a04      	ldr	r2, [pc, #16]	; (80042cc <__NVIC_SetPriorityGrouping+0x44>)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	60d3      	str	r3, [r2, #12]
}
 80042c0:	bf00      	nop
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	e000ed00 	.word	0xe000ed00

080042d0 <__NVIC_GetPriorityGrouping>:
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042d4:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <__NVIC_GetPriorityGrouping+0x18>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	0a1b      	lsrs	r3, r3, #8
 80042da:	f003 0307 	and.w	r3, r3, #7
}
 80042de:	4618      	mov	r0, r3
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	e000ed00 	.word	0xe000ed00

080042ec <__NVIC_EnableIRQ>:
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	db0b      	blt.n	8004316 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	f003 021f 	and.w	r2, r3, #31
 8004304:	4906      	ldr	r1, [pc, #24]	; (8004320 <__NVIC_EnableIRQ+0x34>)
 8004306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	2001      	movs	r0, #1
 800430e:	fa00 f202 	lsl.w	r2, r0, r2
 8004312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr
 8004320:	e000e100 	.word	0xe000e100

08004324 <__NVIC_SetPriority>:
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	6039      	str	r1, [r7, #0]
 800432e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004334:	2b00      	cmp	r3, #0
 8004336:	db0a      	blt.n	800434e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	b2da      	uxtb	r2, r3
 800433c:	490c      	ldr	r1, [pc, #48]	; (8004370 <__NVIC_SetPriority+0x4c>)
 800433e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004342:	0112      	lsls	r2, r2, #4
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	440b      	add	r3, r1
 8004348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800434c:	e00a      	b.n	8004364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	b2da      	uxtb	r2, r3
 8004352:	4908      	ldr	r1, [pc, #32]	; (8004374 <__NVIC_SetPriority+0x50>)
 8004354:	79fb      	ldrb	r3, [r7, #7]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	3b04      	subs	r3, #4
 800435c:	0112      	lsls	r2, r2, #4
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	440b      	add	r3, r1
 8004362:	761a      	strb	r2, [r3, #24]
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	e000e100 	.word	0xe000e100
 8004374:	e000ed00 	.word	0xe000ed00

08004378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004378:	b480      	push	{r7}
 800437a:	b089      	sub	sp, #36	; 0x24
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f1c3 0307 	rsb	r3, r3, #7
 8004392:	2b04      	cmp	r3, #4
 8004394:	bf28      	it	cs
 8004396:	2304      	movcs	r3, #4
 8004398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	3304      	adds	r3, #4
 800439e:	2b06      	cmp	r3, #6
 80043a0:	d902      	bls.n	80043a8 <NVIC_EncodePriority+0x30>
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	3b03      	subs	r3, #3
 80043a6:	e000      	b.n	80043aa <NVIC_EncodePriority+0x32>
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043ac:	f04f 32ff 	mov.w	r2, #4294967295
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	43da      	mvns	r2, r3
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	401a      	ands	r2, r3
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043c0:	f04f 31ff 	mov.w	r1, #4294967295
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ca:	43d9      	mvns	r1, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d0:	4313      	orrs	r3, r2
         );
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3724      	adds	r7, #36	; 0x24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bc80      	pop	{r7}
 80043da:	4770      	bx	lr

080043dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043ec:	d301      	bcc.n	80043f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043ee:	2301      	movs	r3, #1
 80043f0:	e00f      	b.n	8004412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043f2:	4a0a      	ldr	r2, [pc, #40]	; (800441c <SysTick_Config+0x40>)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043fa:	210f      	movs	r1, #15
 80043fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004400:	f7ff ff90 	bl	8004324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004404:	4b05      	ldr	r3, [pc, #20]	; (800441c <SysTick_Config+0x40>)
 8004406:	2200      	movs	r2, #0
 8004408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800440a:	4b04      	ldr	r3, [pc, #16]	; (800441c <SysTick_Config+0x40>)
 800440c:	2207      	movs	r2, #7
 800440e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	e000e010 	.word	0xe000e010

08004420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff ff2d 	bl	8004288 <__NVIC_SetPriorityGrouping>
}
 800442e:	bf00      	nop
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004436:	b580      	push	{r7, lr}
 8004438:	b086      	sub	sp, #24
 800443a:	af00      	add	r7, sp, #0
 800443c:	4603      	mov	r3, r0
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	607a      	str	r2, [r7, #4]
 8004442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004448:	f7ff ff42 	bl	80042d0 <__NVIC_GetPriorityGrouping>
 800444c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	68b9      	ldr	r1, [r7, #8]
 8004452:	6978      	ldr	r0, [r7, #20]
 8004454:	f7ff ff90 	bl	8004378 <NVIC_EncodePriority>
 8004458:	4602      	mov	r2, r0
 800445a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800445e:	4611      	mov	r1, r2
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff ff5f 	bl	8004324 <__NVIC_SetPriority>
}
 8004466:	bf00      	nop
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	4603      	mov	r3, r0
 8004476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff ff35 	bl	80042ec <__NVIC_EnableIRQ>
}
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff ffa2 	bl	80043dc <SysTick_Config>
 8004498:	4603      	mov	r3, r0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d005      	beq.n	80044c6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2204      	movs	r2, #4
 80044be:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	73fb      	strb	r3, [r7, #15]
 80044c4:	e051      	b.n	800456a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 020e 	bic.w	r2, r2, #14
 80044d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0201 	bic.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a22      	ldr	r2, [pc, #136]	; (8004574 <HAL_DMA_Abort_IT+0xd0>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d029      	beq.n	8004544 <HAL_DMA_Abort_IT+0xa0>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a20      	ldr	r2, [pc, #128]	; (8004578 <HAL_DMA_Abort_IT+0xd4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d022      	beq.n	8004540 <HAL_DMA_Abort_IT+0x9c>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1f      	ldr	r2, [pc, #124]	; (800457c <HAL_DMA_Abort_IT+0xd8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d01a      	beq.n	800453a <HAL_DMA_Abort_IT+0x96>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1d      	ldr	r2, [pc, #116]	; (8004580 <HAL_DMA_Abort_IT+0xdc>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d012      	beq.n	8004534 <HAL_DMA_Abort_IT+0x90>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a1c      	ldr	r2, [pc, #112]	; (8004584 <HAL_DMA_Abort_IT+0xe0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d00a      	beq.n	800452e <HAL_DMA_Abort_IT+0x8a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a1a      	ldr	r2, [pc, #104]	; (8004588 <HAL_DMA_Abort_IT+0xe4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d102      	bne.n	8004528 <HAL_DMA_Abort_IT+0x84>
 8004522:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004526:	e00e      	b.n	8004546 <HAL_DMA_Abort_IT+0xa2>
 8004528:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800452c:	e00b      	b.n	8004546 <HAL_DMA_Abort_IT+0xa2>
 800452e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004532:	e008      	b.n	8004546 <HAL_DMA_Abort_IT+0xa2>
 8004534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004538:	e005      	b.n	8004546 <HAL_DMA_Abort_IT+0xa2>
 800453a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800453e:	e002      	b.n	8004546 <HAL_DMA_Abort_IT+0xa2>
 8004540:	2310      	movs	r3, #16
 8004542:	e000      	b.n	8004546 <HAL_DMA_Abort_IT+0xa2>
 8004544:	2301      	movs	r3, #1
 8004546:	4a11      	ldr	r2, [pc, #68]	; (800458c <HAL_DMA_Abort_IT+0xe8>)
 8004548:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	4798      	blx	r3
    } 
  }
  return status;
 800456a:	7bfb      	ldrb	r3, [r7, #15]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40020008 	.word	0x40020008
 8004578:	4002001c 	.word	0x4002001c
 800457c:	40020030 	.word	0x40020030
 8004580:	40020044 	.word	0x40020044
 8004584:	40020058 	.word	0x40020058
 8004588:	4002006c 	.word	0x4002006c
 800458c:	40020000 	.word	0x40020000

08004590 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800459e:	4618      	mov	r0, r3
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr

080045a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b08b      	sub	sp, #44	; 0x2c
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045b2:	2300      	movs	r3, #0
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80045b6:	2300      	movs	r3, #0
 80045b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045ba:	e169      	b.n	8004890 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80045bc:	2201      	movs	r2, #1
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69fa      	ldr	r2, [r7, #28]
 80045cc:	4013      	ands	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	f040 8158 	bne.w	800488a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	4a9a      	ldr	r2, [pc, #616]	; (8004848 <HAL_GPIO_Init+0x2a0>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d05e      	beq.n	80046a2 <HAL_GPIO_Init+0xfa>
 80045e4:	4a98      	ldr	r2, [pc, #608]	; (8004848 <HAL_GPIO_Init+0x2a0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d875      	bhi.n	80046d6 <HAL_GPIO_Init+0x12e>
 80045ea:	4a98      	ldr	r2, [pc, #608]	; (800484c <HAL_GPIO_Init+0x2a4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d058      	beq.n	80046a2 <HAL_GPIO_Init+0xfa>
 80045f0:	4a96      	ldr	r2, [pc, #600]	; (800484c <HAL_GPIO_Init+0x2a4>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d86f      	bhi.n	80046d6 <HAL_GPIO_Init+0x12e>
 80045f6:	4a96      	ldr	r2, [pc, #600]	; (8004850 <HAL_GPIO_Init+0x2a8>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d052      	beq.n	80046a2 <HAL_GPIO_Init+0xfa>
 80045fc:	4a94      	ldr	r2, [pc, #592]	; (8004850 <HAL_GPIO_Init+0x2a8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d869      	bhi.n	80046d6 <HAL_GPIO_Init+0x12e>
 8004602:	4a94      	ldr	r2, [pc, #592]	; (8004854 <HAL_GPIO_Init+0x2ac>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d04c      	beq.n	80046a2 <HAL_GPIO_Init+0xfa>
 8004608:	4a92      	ldr	r2, [pc, #584]	; (8004854 <HAL_GPIO_Init+0x2ac>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d863      	bhi.n	80046d6 <HAL_GPIO_Init+0x12e>
 800460e:	4a92      	ldr	r2, [pc, #584]	; (8004858 <HAL_GPIO_Init+0x2b0>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d046      	beq.n	80046a2 <HAL_GPIO_Init+0xfa>
 8004614:	4a90      	ldr	r2, [pc, #576]	; (8004858 <HAL_GPIO_Init+0x2b0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d85d      	bhi.n	80046d6 <HAL_GPIO_Init+0x12e>
 800461a:	2b12      	cmp	r3, #18
 800461c:	d82a      	bhi.n	8004674 <HAL_GPIO_Init+0xcc>
 800461e:	2b12      	cmp	r3, #18
 8004620:	d859      	bhi.n	80046d6 <HAL_GPIO_Init+0x12e>
 8004622:	a201      	add	r2, pc, #4	; (adr r2, 8004628 <HAL_GPIO_Init+0x80>)
 8004624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004628:	080046a3 	.word	0x080046a3
 800462c:	0800467d 	.word	0x0800467d
 8004630:	0800468f 	.word	0x0800468f
 8004634:	080046d1 	.word	0x080046d1
 8004638:	080046d7 	.word	0x080046d7
 800463c:	080046d7 	.word	0x080046d7
 8004640:	080046d7 	.word	0x080046d7
 8004644:	080046d7 	.word	0x080046d7
 8004648:	080046d7 	.word	0x080046d7
 800464c:	080046d7 	.word	0x080046d7
 8004650:	080046d7 	.word	0x080046d7
 8004654:	080046d7 	.word	0x080046d7
 8004658:	080046d7 	.word	0x080046d7
 800465c:	080046d7 	.word	0x080046d7
 8004660:	080046d7 	.word	0x080046d7
 8004664:	080046d7 	.word	0x080046d7
 8004668:	080046d7 	.word	0x080046d7
 800466c:	08004685 	.word	0x08004685
 8004670:	08004699 	.word	0x08004699
 8004674:	4a79      	ldr	r2, [pc, #484]	; (800485c <HAL_GPIO_Init+0x2b4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d013      	beq.n	80046a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800467a:	e02c      	b.n	80046d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	623b      	str	r3, [r7, #32]
          break;
 8004682:	e029      	b.n	80046d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	3304      	adds	r3, #4
 800468a:	623b      	str	r3, [r7, #32]
          break;
 800468c:	e024      	b.n	80046d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	3308      	adds	r3, #8
 8004694:	623b      	str	r3, [r7, #32]
          break;
 8004696:	e01f      	b.n	80046d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	330c      	adds	r3, #12
 800469e:	623b      	str	r3, [r7, #32]
          break;
 80046a0:	e01a      	b.n	80046d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d102      	bne.n	80046b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80046aa:	2304      	movs	r3, #4
 80046ac:	623b      	str	r3, [r7, #32]
          break;
 80046ae:	e013      	b.n	80046d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d105      	bne.n	80046c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046b8:	2308      	movs	r3, #8
 80046ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	611a      	str	r2, [r3, #16]
          break;
 80046c2:	e009      	b.n	80046d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046c4:	2308      	movs	r3, #8
 80046c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	69fa      	ldr	r2, [r7, #28]
 80046cc:	615a      	str	r2, [r3, #20]
          break;
 80046ce:	e003      	b.n	80046d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80046d0:	2300      	movs	r3, #0
 80046d2:	623b      	str	r3, [r7, #32]
          break;
 80046d4:	e000      	b.n	80046d8 <HAL_GPIO_Init+0x130>
          break;
 80046d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	2bff      	cmp	r3, #255	; 0xff
 80046dc:	d801      	bhi.n	80046e2 <HAL_GPIO_Init+0x13a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	e001      	b.n	80046e6 <HAL_GPIO_Init+0x13e>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3304      	adds	r3, #4
 80046e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	2bff      	cmp	r3, #255	; 0xff
 80046ec:	d802      	bhi.n	80046f4 <HAL_GPIO_Init+0x14c>
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	e002      	b.n	80046fa <HAL_GPIO_Init+0x152>
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	3b08      	subs	r3, #8
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	210f      	movs	r1, #15
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	fa01 f303 	lsl.w	r3, r1, r3
 8004708:	43db      	mvns	r3, r3
 800470a:	401a      	ands	r2, r3
 800470c:	6a39      	ldr	r1, [r7, #32]
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	fa01 f303 	lsl.w	r3, r1, r3
 8004714:	431a      	orrs	r2, r3
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 80b1 	beq.w	800488a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004728:	4b4d      	ldr	r3, [pc, #308]	; (8004860 <HAL_GPIO_Init+0x2b8>)
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	4a4c      	ldr	r2, [pc, #304]	; (8004860 <HAL_GPIO_Init+0x2b8>)
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	6193      	str	r3, [r2, #24]
 8004734:	4b4a      	ldr	r3, [pc, #296]	; (8004860 <HAL_GPIO_Init+0x2b8>)
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004740:	4a48      	ldr	r2, [pc, #288]	; (8004864 <HAL_GPIO_Init+0x2bc>)
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	089b      	lsrs	r3, r3, #2
 8004746:	3302      	adds	r3, #2
 8004748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800474c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	220f      	movs	r2, #15
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	43db      	mvns	r3, r3
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4013      	ands	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a40      	ldr	r2, [pc, #256]	; (8004868 <HAL_GPIO_Init+0x2c0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d013      	beq.n	8004794 <HAL_GPIO_Init+0x1ec>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a3f      	ldr	r2, [pc, #252]	; (800486c <HAL_GPIO_Init+0x2c4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d00d      	beq.n	8004790 <HAL_GPIO_Init+0x1e8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a3e      	ldr	r2, [pc, #248]	; (8004870 <HAL_GPIO_Init+0x2c8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d007      	beq.n	800478c <HAL_GPIO_Init+0x1e4>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a3d      	ldr	r2, [pc, #244]	; (8004874 <HAL_GPIO_Init+0x2cc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d101      	bne.n	8004788 <HAL_GPIO_Init+0x1e0>
 8004784:	2303      	movs	r3, #3
 8004786:	e006      	b.n	8004796 <HAL_GPIO_Init+0x1ee>
 8004788:	2304      	movs	r3, #4
 800478a:	e004      	b.n	8004796 <HAL_GPIO_Init+0x1ee>
 800478c:	2302      	movs	r3, #2
 800478e:	e002      	b.n	8004796 <HAL_GPIO_Init+0x1ee>
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <HAL_GPIO_Init+0x1ee>
 8004794:	2300      	movs	r3, #0
 8004796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004798:	f002 0203 	and.w	r2, r2, #3
 800479c:	0092      	lsls	r2, r2, #2
 800479e:	4093      	lsls	r3, r2
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80047a6:	492f      	ldr	r1, [pc, #188]	; (8004864 <HAL_GPIO_Init+0x2bc>)
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	089b      	lsrs	r3, r3, #2
 80047ac:	3302      	adds	r3, #2
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d006      	beq.n	80047ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80047c0:	4b2d      	ldr	r3, [pc, #180]	; (8004878 <HAL_GPIO_Init+0x2d0>)
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	492c      	ldr	r1, [pc, #176]	; (8004878 <HAL_GPIO_Init+0x2d0>)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	600b      	str	r3, [r1, #0]
 80047cc:	e006      	b.n	80047dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80047ce:	4b2a      	ldr	r3, [pc, #168]	; (8004878 <HAL_GPIO_Init+0x2d0>)
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	43db      	mvns	r3, r3
 80047d6:	4928      	ldr	r1, [pc, #160]	; (8004878 <HAL_GPIO_Init+0x2d0>)
 80047d8:	4013      	ands	r3, r2
 80047da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d006      	beq.n	80047f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80047e8:	4b23      	ldr	r3, [pc, #140]	; (8004878 <HAL_GPIO_Init+0x2d0>)
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	4922      	ldr	r1, [pc, #136]	; (8004878 <HAL_GPIO_Init+0x2d0>)
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	604b      	str	r3, [r1, #4]
 80047f4:	e006      	b.n	8004804 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80047f6:	4b20      	ldr	r3, [pc, #128]	; (8004878 <HAL_GPIO_Init+0x2d0>)
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	43db      	mvns	r3, r3
 80047fe:	491e      	ldr	r1, [pc, #120]	; (8004878 <HAL_GPIO_Init+0x2d0>)
 8004800:	4013      	ands	r3, r2
 8004802:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d006      	beq.n	800481e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004810:	4b19      	ldr	r3, [pc, #100]	; (8004878 <HAL_GPIO_Init+0x2d0>)
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	4918      	ldr	r1, [pc, #96]	; (8004878 <HAL_GPIO_Init+0x2d0>)
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	4313      	orrs	r3, r2
 800481a:	608b      	str	r3, [r1, #8]
 800481c:	e006      	b.n	800482c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800481e:	4b16      	ldr	r3, [pc, #88]	; (8004878 <HAL_GPIO_Init+0x2d0>)
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	43db      	mvns	r3, r3
 8004826:	4914      	ldr	r1, [pc, #80]	; (8004878 <HAL_GPIO_Init+0x2d0>)
 8004828:	4013      	ands	r3, r2
 800482a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d021      	beq.n	800487c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004838:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <HAL_GPIO_Init+0x2d0>)
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	490e      	ldr	r1, [pc, #56]	; (8004878 <HAL_GPIO_Init+0x2d0>)
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	4313      	orrs	r3, r2
 8004842:	60cb      	str	r3, [r1, #12]
 8004844:	e021      	b.n	800488a <HAL_GPIO_Init+0x2e2>
 8004846:	bf00      	nop
 8004848:	10320000 	.word	0x10320000
 800484c:	10310000 	.word	0x10310000
 8004850:	10220000 	.word	0x10220000
 8004854:	10210000 	.word	0x10210000
 8004858:	10120000 	.word	0x10120000
 800485c:	10110000 	.word	0x10110000
 8004860:	40021000 	.word	0x40021000
 8004864:	40010000 	.word	0x40010000
 8004868:	40010800 	.word	0x40010800
 800486c:	40010c00 	.word	0x40010c00
 8004870:	40011000 	.word	0x40011000
 8004874:	40011400 	.word	0x40011400
 8004878:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800487c:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <HAL_GPIO_Init+0x304>)
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	43db      	mvns	r3, r3
 8004884:	4909      	ldr	r1, [pc, #36]	; (80048ac <HAL_GPIO_Init+0x304>)
 8004886:	4013      	ands	r3, r2
 8004888:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	3301      	adds	r3, #1
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	fa22 f303 	lsr.w	r3, r2, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	f47f ae8e 	bne.w	80045bc <HAL_GPIO_Init+0x14>
  }
}
 80048a0:	bf00      	nop
 80048a2:	bf00      	nop
 80048a4:	372c      	adds	r7, #44	; 0x2c
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bc80      	pop	{r7}
 80048aa:	4770      	bx	lr
 80048ac:	40010400 	.word	0x40010400

080048b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	887b      	ldrh	r3, [r7, #2]
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048c8:	2301      	movs	r3, #1
 80048ca:	73fb      	strb	r3, [r7, #15]
 80048cc:	e001      	b.n	80048d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048ce:	2300      	movs	r3, #0
 80048d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr

080048de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	460b      	mov	r3, r1
 80048e8:	807b      	strh	r3, [r7, #2]
 80048ea:	4613      	mov	r3, r2
 80048ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048ee:	787b      	ldrb	r3, [r7, #1]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048f4:	887a      	ldrh	r2, [r7, #2]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80048fa:	e003      	b.n	8004904 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048fc:	887b      	ldrh	r3, [r7, #2]
 80048fe:	041a      	lsls	r2, r3, #16
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	611a      	str	r2, [r3, #16]
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr
	...

08004910 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e12b      	b.n	8004b7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fc fffa 	bl	8001930 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2224      	movs	r2, #36	; 0x24
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0201 	bic.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004962:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004972:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004974:	f004 f8d8 	bl	8008b28 <HAL_RCC_GetPCLK1Freq>
 8004978:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	4a81      	ldr	r2, [pc, #516]	; (8004b84 <HAL_I2C_Init+0x274>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d807      	bhi.n	8004994 <HAL_I2C_Init+0x84>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4a80      	ldr	r2, [pc, #512]	; (8004b88 <HAL_I2C_Init+0x278>)
 8004988:	4293      	cmp	r3, r2
 800498a:	bf94      	ite	ls
 800498c:	2301      	movls	r3, #1
 800498e:	2300      	movhi	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	e006      	b.n	80049a2 <HAL_I2C_Init+0x92>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4a7d      	ldr	r2, [pc, #500]	; (8004b8c <HAL_I2C_Init+0x27c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	bf94      	ite	ls
 800499c:	2301      	movls	r3, #1
 800499e:	2300      	movhi	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e0e7      	b.n	8004b7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4a78      	ldr	r2, [pc, #480]	; (8004b90 <HAL_I2C_Init+0x280>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	0c9b      	lsrs	r3, r3, #18
 80049b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	4a6a      	ldr	r2, [pc, #424]	; (8004b84 <HAL_I2C_Init+0x274>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d802      	bhi.n	80049e4 <HAL_I2C_Init+0xd4>
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	3301      	adds	r3, #1
 80049e2:	e009      	b.n	80049f8 <HAL_I2C_Init+0xe8>
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049ea:	fb02 f303 	mul.w	r3, r2, r3
 80049ee:	4a69      	ldr	r2, [pc, #420]	; (8004b94 <HAL_I2C_Init+0x284>)
 80049f0:	fba2 2303 	umull	r2, r3, r2, r3
 80049f4:	099b      	lsrs	r3, r3, #6
 80049f6:	3301      	adds	r3, #1
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6812      	ldr	r2, [r2, #0]
 80049fc:	430b      	orrs	r3, r1
 80049fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	495c      	ldr	r1, [pc, #368]	; (8004b84 <HAL_I2C_Init+0x274>)
 8004a14:	428b      	cmp	r3, r1
 8004a16:	d819      	bhi.n	8004a4c <HAL_I2C_Init+0x13c>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	1e59      	subs	r1, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a26:	1c59      	adds	r1, r3, #1
 8004a28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a2c:	400b      	ands	r3, r1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <HAL_I2C_Init+0x138>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1e59      	subs	r1, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a40:	3301      	adds	r3, #1
 8004a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a46:	e051      	b.n	8004aec <HAL_I2C_Init+0x1dc>
 8004a48:	2304      	movs	r3, #4
 8004a4a:	e04f      	b.n	8004aec <HAL_I2C_Init+0x1dc>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d111      	bne.n	8004a78 <HAL_I2C_Init+0x168>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	1e58      	subs	r0, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6859      	ldr	r1, [r3, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	440b      	add	r3, r1
 8004a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a66:	3301      	adds	r3, #1
 8004a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bf0c      	ite	eq
 8004a70:	2301      	moveq	r3, #1
 8004a72:	2300      	movne	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	e012      	b.n	8004a9e <HAL_I2C_Init+0x18e>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	1e58      	subs	r0, r3, #1
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6859      	ldr	r1, [r3, #4]
 8004a80:	460b      	mov	r3, r1
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	0099      	lsls	r1, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a8e:	3301      	adds	r3, #1
 8004a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bf0c      	ite	eq
 8004a98:	2301      	moveq	r3, #1
 8004a9a:	2300      	movne	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_I2C_Init+0x196>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e022      	b.n	8004aec <HAL_I2C_Init+0x1dc>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10e      	bne.n	8004acc <HAL_I2C_Init+0x1bc>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1e58      	subs	r0, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6859      	ldr	r1, [r3, #4]
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	440b      	add	r3, r1
 8004abc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aca:	e00f      	b.n	8004aec <HAL_I2C_Init+0x1dc>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	1e58      	subs	r0, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6859      	ldr	r1, [r3, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	440b      	add	r3, r1
 8004ada:	0099      	lsls	r1, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	6809      	ldr	r1, [r1, #0]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69da      	ldr	r2, [r3, #28]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6911      	ldr	r1, [r2, #16]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	68d2      	ldr	r2, [r2, #12]
 8004b26:	4311      	orrs	r1, r2
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6812      	ldr	r2, [r2, #0]
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	695a      	ldr	r2, [r3, #20]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	000186a0 	.word	0x000186a0
 8004b88:	001e847f 	.word	0x001e847f
 8004b8c:	003d08ff 	.word	0x003d08ff
 8004b90:	431bde83 	.word	0x431bde83
 8004b94:	10624dd3 	.word	0x10624dd3

08004b98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b088      	sub	sp, #32
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	607a      	str	r2, [r7, #4]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	817b      	strh	r3, [r7, #10]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bac:	f7ff fb3e 	bl	800422c <HAL_GetTick>
 8004bb0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	f040 80e0 	bne.w	8004d80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	2319      	movs	r3, #25
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	4970      	ldr	r1, [pc, #448]	; (8004d8c <HAL_I2C_Master_Transmit+0x1f4>)
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f001 fe74 	bl	80068b8 <I2C_WaitOnFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	e0d3      	b.n	8004d82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_I2C_Master_Transmit+0x50>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e0cc      	b.n	8004d82 <HAL_I2C_Master_Transmit+0x1ea>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d007      	beq.n	8004c0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0201 	orr.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2221      	movs	r2, #33	; 0x21
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2210      	movs	r2, #16
 8004c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	893a      	ldrh	r2, [r7, #8]
 8004c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4a50      	ldr	r2, [pc, #320]	; (8004d90 <HAL_I2C_Master_Transmit+0x1f8>)
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c50:	8979      	ldrh	r1, [r7, #10]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	6a3a      	ldr	r2, [r7, #32]
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f001 fd04 	bl	8006664 <I2C_MasterRequestWrite>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e08d      	b.n	8004d82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c66:	2300      	movs	r3, #0
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c7c:	e066      	b.n	8004d4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	6a39      	ldr	r1, [r7, #32]
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f001 feee 	bl	8006a64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00d      	beq.n	8004caa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d107      	bne.n	8004ca6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e06b      	b.n	8004d82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	781a      	ldrb	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d11b      	bne.n	8004d20 <HAL_I2C_Master_Transmit+0x188>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d017      	beq.n	8004d20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	781a      	ldrb	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	6a39      	ldr	r1, [r7, #32]
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f001 fede 	bl	8006ae6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00d      	beq.n	8004d4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d107      	bne.n	8004d48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e01a      	b.n	8004d82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d194      	bne.n	8004c7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	e000      	b.n	8004d82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d80:	2302      	movs	r3, #2
  }
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	00100002 	.word	0x00100002
 8004d90:	ffff0000 	.word	0xffff0000

08004d94 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	607a      	str	r2, [r7, #4]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	460b      	mov	r3, r1
 8004da2:	817b      	strh	r3, [r7, #10]
 8004da4:	4613      	mov	r3, r2
 8004da6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b20      	cmp	r3, #32
 8004db6:	f040 8085 	bne.w	8004ec4 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004dba:	4b45      	ldr	r3, [pc, #276]	; (8004ed0 <HAL_I2C_Master_Transmit_IT+0x13c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	08db      	lsrs	r3, r3, #3
 8004dc0:	4a44      	ldr	r2, [pc, #272]	; (8004ed4 <HAL_I2C_Master_Transmit_IT+0x140>)
 8004dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc6:	0a1a      	lsrs	r2, r3, #8
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	009a      	lsls	r2, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d116      	bne.n	8004e0e <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	f043 0220 	orr.w	r2, r3, #32
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e05b      	b.n	8004ec6 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d0db      	beq.n	8004dd4 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <HAL_I2C_Master_Transmit_IT+0x96>
 8004e26:	2302      	movs	r3, #2
 8004e28:	e04d      	b.n	8004ec6 <HAL_I2C_Master_Transmit_IT+0x132>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d007      	beq.n	8004e50 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0201 	orr.w	r2, r2, #1
 8004e4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2221      	movs	r2, #33	; 0x21
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2210      	movs	r2, #16
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	893a      	ldrh	r2, [r7, #8]
 8004e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4a12      	ldr	r2, [pc, #72]	; (8004ed8 <HAL_I2C_Master_Transmit_IT+0x144>)
 8004e90:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004e92:	897a      	ldrh	r2, [r7, #10]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ea6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004ebe:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	e000      	b.n	8004ec6 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8004ec4:	2302      	movs	r3, #2
  }
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	371c      	adds	r7, #28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bc80      	pop	{r7}
 8004ece:	4770      	bx	lr
 8004ed0:	20000050 	.word	0x20000050
 8004ed4:	14f8b589 	.word	0x14f8b589
 8004ed8:	ffff0000 	.word	0xffff0000

08004edc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004efc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f04:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
 8004f08:	2b10      	cmp	r3, #16
 8004f0a:	d003      	beq.n	8004f14 <HAL_I2C_EV_IRQHandler+0x38>
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	2b40      	cmp	r3, #64	; 0x40
 8004f10:	f040 80bd 	bne.w	800508e <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10d      	bne.n	8004f4a <HAL_I2C_EV_IRQHandler+0x6e>
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004f34:	d003      	beq.n	8004f3e <HAL_I2C_EV_IRQHandler+0x62>
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004f3c:	d101      	bne.n	8004f42 <HAL_I2C_EV_IRQHandler+0x66>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e000      	b.n	8004f44 <HAL_I2C_EV_IRQHandler+0x68>
 8004f42:	2300      	movs	r3, #0
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	f000 812e 	beq.w	80051a6 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00c      	beq.n	8004f6e <HAL_I2C_EV_IRQHandler+0x92>
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	0a5b      	lsrs	r3, r3, #9
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d006      	beq.n	8004f6e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f001 fe61 	bl	8006c28 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fd60 	bl	8005a2c <I2C_Master_SB>
 8004f6c:	e08e      	b.n	800508c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	08db      	lsrs	r3, r3, #3
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d009      	beq.n	8004f8e <HAL_I2C_EV_IRQHandler+0xb2>
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	0a5b      	lsrs	r3, r3, #9
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fdd5 	bl	8005b36 <I2C_Master_ADD10>
 8004f8c:	e07e      	b.n	800508c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	085b      	lsrs	r3, r3, #1
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d009      	beq.n	8004fae <HAL_I2C_EV_IRQHandler+0xd2>
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	0a5b      	lsrs	r3, r3, #9
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fdee 	bl	8005b88 <I2C_Master_ADDR>
 8004fac:	e06e      	b.n	800508c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	089b      	lsrs	r3, r3, #2
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d037      	beq.n	800502a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc8:	f000 80ef 	beq.w	80051aa <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	09db      	lsrs	r3, r3, #7
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00f      	beq.n	8004ff8 <HAL_I2C_EV_IRQHandler+0x11c>
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	0a9b      	lsrs	r3, r3, #10
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d009      	beq.n	8004ff8 <HAL_I2C_EV_IRQHandler+0x11c>
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	089b      	lsrs	r3, r3, #2
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d103      	bne.n	8004ff8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f9ed 	bl	80053d0 <I2C_MasterTransmit_TXE>
 8004ff6:	e049      	b.n	800508c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	089b      	lsrs	r3, r3, #2
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 80d2 	beq.w	80051aa <HAL_I2C_EV_IRQHandler+0x2ce>
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	0a5b      	lsrs	r3, r3, #9
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 80cb 	beq.w	80051aa <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	2b10      	cmp	r3, #16
 8005018:	d103      	bne.n	8005022 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fa74 	bl	8005508 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005020:	e0c3      	b.n	80051aa <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fad8 	bl	80055d8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005028:	e0bf      	b.n	80051aa <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005038:	f000 80b7 	beq.w	80051aa <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	099b      	lsrs	r3, r3, #6
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00f      	beq.n	8005068 <HAL_I2C_EV_IRQHandler+0x18c>
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	0a9b      	lsrs	r3, r3, #10
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d009      	beq.n	8005068 <HAL_I2C_EV_IRQHandler+0x18c>
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	089b      	lsrs	r3, r3, #2
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d103      	bne.n	8005068 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fb48 	bl	80056f6 <I2C_MasterReceive_RXNE>
 8005066:	e011      	b.n	800508c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	089b      	lsrs	r3, r3, #2
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 809a 	beq.w	80051aa <HAL_I2C_EV_IRQHandler+0x2ce>
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	0a5b      	lsrs	r3, r3, #9
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 8093 	beq.w	80051aa <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fbe7 	bl	8005858 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800508a:	e08e      	b.n	80051aa <HAL_I2C_EV_IRQHandler+0x2ce>
 800508c:	e08d      	b.n	80051aa <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	2b00      	cmp	r3, #0
 8005094:	d004      	beq.n	80050a0 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	61fb      	str	r3, [r7, #28]
 800509e:	e007      	b.n	80050b0 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	085b      	lsrs	r3, r3, #1
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d012      	beq.n	80050e2 <HAL_I2C_EV_IRQHandler+0x206>
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	0a5b      	lsrs	r3, r3, #9
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00c      	beq.n	80050e2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80050d8:	69b9      	ldr	r1, [r7, #24]
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 ffab 	bl	8006036 <I2C_Slave_ADDR>
 80050e0:	e066      	b.n	80051b0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	091b      	lsrs	r3, r3, #4
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d009      	beq.n	8005102 <HAL_I2C_EV_IRQHandler+0x226>
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	0a5b      	lsrs	r3, r3, #9
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 ffe0 	bl	80060c0 <I2C_Slave_STOPF>
 8005100:	e056      	b.n	80051b0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005102:	7bbb      	ldrb	r3, [r7, #14]
 8005104:	2b21      	cmp	r3, #33	; 0x21
 8005106:	d002      	beq.n	800510e <HAL_I2C_EV_IRQHandler+0x232>
 8005108:	7bbb      	ldrb	r3, [r7, #14]
 800510a:	2b29      	cmp	r3, #41	; 0x29
 800510c:	d125      	bne.n	800515a <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	09db      	lsrs	r3, r3, #7
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00f      	beq.n	800513a <HAL_I2C_EV_IRQHandler+0x25e>
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	0a9b      	lsrs	r3, r3, #10
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d009      	beq.n	800513a <HAL_I2C_EV_IRQHandler+0x25e>
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	089b      	lsrs	r3, r3, #2
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d103      	bne.n	800513a <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fec3 	bl	8005ebe <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005138:	e039      	b.n	80051ae <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	089b      	lsrs	r3, r3, #2
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d033      	beq.n	80051ae <HAL_I2C_EV_IRQHandler+0x2d2>
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	0a5b      	lsrs	r3, r3, #9
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d02d      	beq.n	80051ae <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fef0 	bl	8005f38 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005158:	e029      	b.n	80051ae <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	099b      	lsrs	r3, r3, #6
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00f      	beq.n	8005186 <HAL_I2C_EV_IRQHandler+0x2aa>
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	0a9b      	lsrs	r3, r3, #10
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d009      	beq.n	8005186 <HAL_I2C_EV_IRQHandler+0x2aa>
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	089b      	lsrs	r3, r3, #2
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d103      	bne.n	8005186 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fefa 	bl	8005f78 <I2C_SlaveReceive_RXNE>
 8005184:	e014      	b.n	80051b0 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	089b      	lsrs	r3, r3, #2
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00e      	beq.n	80051b0 <HAL_I2C_EV_IRQHandler+0x2d4>
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	0a5b      	lsrs	r3, r3, #9
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d008      	beq.n	80051b0 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 ff28 	bl	8005ff4 <I2C_SlaveReceive_BTF>
 80051a4:	e004      	b.n	80051b0 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80051a6:	bf00      	nop
 80051a8:	e002      	b.n	80051b0 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051aa:	bf00      	nop
 80051ac:	e000      	b.n	80051b0 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051ae:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80051b0:	3720      	adds	r7, #32
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b08a      	sub	sp, #40	; 0x28
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051d8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	0a1b      	lsrs	r3, r3, #8
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d016      	beq.n	8005214 <HAL_I2C_ER_IRQHandler+0x5e>
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	0a1b      	lsrs	r3, r3, #8
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d010      	beq.n	8005214 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	f043 0301 	orr.w	r3, r3, #1
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005202:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005212:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	0a5b      	lsrs	r3, r3, #9
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00e      	beq.n	800523e <HAL_I2C_ER_IRQHandler+0x88>
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	0a1b      	lsrs	r3, r3, #8
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d008      	beq.n	800523e <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	f043 0302 	orr.w	r3, r3, #2
 8005232:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800523c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	0a9b      	lsrs	r3, r3, #10
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d03f      	beq.n	80052ca <HAL_I2C_ER_IRQHandler+0x114>
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	0a1b      	lsrs	r3, r3, #8
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d039      	beq.n	80052ca <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8005256:	7efb      	ldrb	r3, [r7, #27]
 8005258:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525e:	b29b      	uxth	r3, r3
 8005260:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005268:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005270:	7ebb      	ldrb	r3, [r7, #26]
 8005272:	2b20      	cmp	r3, #32
 8005274:	d112      	bne.n	800529c <HAL_I2C_ER_IRQHandler+0xe6>
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10f      	bne.n	800529c <HAL_I2C_ER_IRQHandler+0xe6>
 800527c:	7cfb      	ldrb	r3, [r7, #19]
 800527e:	2b21      	cmp	r3, #33	; 0x21
 8005280:	d008      	beq.n	8005294 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005282:	7cfb      	ldrb	r3, [r7, #19]
 8005284:	2b29      	cmp	r3, #41	; 0x29
 8005286:	d005      	beq.n	8005294 <HAL_I2C_ER_IRQHandler+0xde>
 8005288:	7cfb      	ldrb	r3, [r7, #19]
 800528a:	2b28      	cmp	r3, #40	; 0x28
 800528c:	d106      	bne.n	800529c <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b21      	cmp	r3, #33	; 0x21
 8005292:	d103      	bne.n	800529c <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f001 f843 	bl	8006320 <I2C_Slave_AF>
 800529a:	e016      	b.n	80052ca <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052a4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	f043 0304 	orr.w	r3, r3, #4
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80052ae:	7efb      	ldrb	r3, [r7, #27]
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d002      	beq.n	80052ba <HAL_I2C_ER_IRQHandler+0x104>
 80052b4:	7efb      	ldrb	r3, [r7, #27]
 80052b6:	2b40      	cmp	r3, #64	; 0x40
 80052b8:	d107      	bne.n	80052ca <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052c8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	0adb      	lsrs	r3, r3, #11
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00e      	beq.n	80052f4 <HAL_I2C_ER_IRQHandler+0x13e>
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	0a1b      	lsrs	r3, r3, #8
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d008      	beq.n	80052f4 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	f043 0308 	orr.w	r3, r3, #8
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80052f2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d008      	beq.n	800530c <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	431a      	orrs	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f001 f87a 	bl	8006400 <I2C_ITError>
  }
}
 800530c:	bf00      	nop
 800530e:	3728      	adds	r7, #40	; 0x28
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	bc80      	pop	{r7}
 8005324:	4770      	bx	lr

08005326 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr

08005338 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	bc80      	pop	{r7}
 8005348:	4770      	bx	lr

0800534a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	bc80      	pop	{r7}
 800535a:	4770      	bx	lr

0800535c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	70fb      	strb	r3, [r7, #3]
 8005368:	4613      	mov	r3, r2
 800536a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	bc80      	pop	{r7}
 8005374:	4770      	bx	lr

08005376 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr

08005388 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr

0800539a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800539a:	b480      	push	{r7}
 800539c:	b083      	sub	sp, #12
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr

080053ac <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr

080053be <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bc80      	pop	{r7}
 80053ce:	4770      	bx	lr

080053d0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053e6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d150      	bne.n	8005498 <I2C_MasterTransmit_TXE+0xc8>
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
 80053f8:	2b21      	cmp	r3, #33	; 0x21
 80053fa:	d14d      	bne.n	8005498 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d01d      	beq.n	800543e <I2C_MasterTransmit_TXE+0x6e>
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b20      	cmp	r3, #32
 8005406:	d01a      	beq.n	800543e <I2C_MasterTransmit_TXE+0x6e>
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800540e:	d016      	beq.n	800543e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800541e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2211      	movs	r2, #17
 8005424:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7ff ff6c 	bl	8005314 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800543c:	e060      	b.n	8005500 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800544c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800545c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b40      	cmp	r3, #64	; 0x40
 8005476:	d107      	bne.n	8005488 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff ff81 	bl	8005388 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005486:	e03b      	b.n	8005500 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7ff ff3f 	bl	8005314 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005496:	e033      	b.n	8005500 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005498:	7bfb      	ldrb	r3, [r7, #15]
 800549a:	2b21      	cmp	r3, #33	; 0x21
 800549c:	d005      	beq.n	80054aa <I2C_MasterTransmit_TXE+0xda>
 800549e:	7bbb      	ldrb	r3, [r7, #14]
 80054a0:	2b40      	cmp	r3, #64	; 0x40
 80054a2:	d12d      	bne.n	8005500 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
 80054a6:	2b22      	cmp	r3, #34	; 0x22
 80054a8:	d12a      	bne.n	8005500 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d108      	bne.n	80054c6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054c2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80054c4:	e01c      	b.n	8005500 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b40      	cmp	r3, #64	; 0x40
 80054d0:	d103      	bne.n	80054da <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f880 	bl	80055d8 <I2C_MemoryTransmit_TXE_BTF>
}
 80054d8:	e012      	b.n	8005500 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	781a      	ldrb	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	1c5a      	adds	r2, r3, #1
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	3b01      	subs	r3, #1
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80054fe:	e7ff      	b.n	8005500 <I2C_MasterTransmit_TXE+0x130>
 8005500:	bf00      	nop
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b21      	cmp	r3, #33	; 0x21
 8005520:	d156      	bne.n	80055d0 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d012      	beq.n	8005552 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	781a      	ldrb	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	1c5a      	adds	r2, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005546:	b29b      	uxth	r3, r3
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005550:	e03e      	b.n	80055d0 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2b08      	cmp	r3, #8
 8005556:	d01d      	beq.n	8005594 <I2C_MasterTransmit_BTF+0x8c>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b20      	cmp	r3, #32
 800555c:	d01a      	beq.n	8005594 <I2C_MasterTransmit_BTF+0x8c>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005564:	d016      	beq.n	8005594 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005574:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2211      	movs	r2, #17
 800557a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2220      	movs	r2, #32
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff fec1 	bl	8005314 <HAL_I2C_MasterTxCpltCallback>
}
 8005592:	e01d      	b.n	80055d0 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055a2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055b2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff fea2 	bl	8005314 <HAL_I2C_MasterTxCpltCallback>
}
 80055d0:	bf00      	nop
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d11d      	bne.n	800562c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d10b      	bne.n	8005610 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005608:	1c9a      	adds	r2, r3, #2
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800560e:	e06e      	b.n	80056ee <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005614:	b29b      	uxth	r3, r3
 8005616:	121b      	asrs	r3, r3, #8
 8005618:	b2da      	uxtb	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	651a      	str	r2, [r3, #80]	; 0x50
}
 800562a:	e060      	b.n	80056ee <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005630:	2b01      	cmp	r3, #1
 8005632:	d10b      	bne.n	800564c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005638:	b2da      	uxtb	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005644:	1c5a      	adds	r2, r3, #1
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	651a      	str	r2, [r3, #80]	; 0x50
}
 800564a:	e050      	b.n	80056ee <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005650:	2b02      	cmp	r3, #2
 8005652:	d14c      	bne.n	80056ee <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005654:	7bfb      	ldrb	r3, [r7, #15]
 8005656:	2b22      	cmp	r3, #34	; 0x22
 8005658:	d108      	bne.n	800566c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005668:	601a      	str	r2, [r3, #0]
}
 800566a:	e040      	b.n	80056ee <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005670:	b29b      	uxth	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d015      	beq.n	80056a2 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8005676:	7bfb      	ldrb	r3, [r7, #15]
 8005678:	2b21      	cmp	r3, #33	; 0x21
 800567a:	d112      	bne.n	80056a2 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	781a      	ldrb	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005696:	b29b      	uxth	r3, r3
 8005698:	3b01      	subs	r3, #1
 800569a:	b29a      	uxth	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80056a0:	e025      	b.n	80056ee <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d120      	bne.n	80056ee <I2C_MemoryTransmit_TXE_BTF+0x116>
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	2b21      	cmp	r3, #33	; 0x21
 80056b0:	d11d      	bne.n	80056ee <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056c0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056d0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2220      	movs	r2, #32
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff fe4d 	bl	8005388 <HAL_I2C_MemTxCpltCallback>
}
 80056ee:	bf00      	nop
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b22      	cmp	r3, #34	; 0x22
 8005708:	f040 80a2 	bne.w	8005850 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005710:	b29b      	uxth	r3, r3
 8005712:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b03      	cmp	r3, #3
 8005718:	d921      	bls.n	800575e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005736:	b29b      	uxth	r3, r3
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b03      	cmp	r3, #3
 8005748:	f040 8082 	bne.w	8005850 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800575a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800575c:	e078      	b.n	8005850 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	2b02      	cmp	r3, #2
 8005764:	d074      	beq.n	8005850 <I2C_MasterReceive_RXNE+0x15a>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d002      	beq.n	8005772 <I2C_MasterReceive_RXNE+0x7c>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d16e      	bne.n	8005850 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f001 f9f8 	bl	8006b68 <I2C_WaitOnSTOPRequestThroughIT>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d142      	bne.n	8005804 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800579c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	b2d2      	uxtb	r2, r2
 80057aa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	3b01      	subs	r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b40      	cmp	r3, #64	; 0x40
 80057d6:	d10a      	bne.n	80057ee <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff fdd7 	bl	800539a <HAL_I2C_MemRxCpltCallback>
}
 80057ec:	e030      	b.n	8005850 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2212      	movs	r2, #18
 80057fa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff fd92 	bl	8005326 <HAL_I2C_MasterRxCpltCallback>
}
 8005802:	e025      	b.n	8005850 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005812:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	691a      	ldr	r2, [r3, #16]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2220      	movs	r2, #32
 800583e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7ff fdae 	bl	80053ac <HAL_I2C_ErrorCallback>
}
 8005850:	bf00      	nop
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005864:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586a:	b29b      	uxth	r3, r3
 800586c:	2b04      	cmp	r3, #4
 800586e:	d11b      	bne.n	80058a8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800587e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691a      	ldr	r2, [r3, #16]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800589c:	b29b      	uxth	r3, r3
 800589e:	3b01      	subs	r3, #1
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80058a6:	e0bd      	b.n	8005a24 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d129      	bne.n	8005906 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b04      	cmp	r3, #4
 80058c6:	d00a      	beq.n	80058de <I2C_MasterReceive_BTF+0x86>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d007      	beq.n	80058de <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058dc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005904:	e08e      	b.n	8005a24 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800590a:	b29b      	uxth	r3, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d176      	bne.n	80059fe <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d002      	beq.n	800591c <I2C_MasterReceive_BTF+0xc4>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2b10      	cmp	r3, #16
 800591a:	d108      	bne.n	800592e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	e019      	b.n	8005962 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2b04      	cmp	r3, #4
 8005932:	d002      	beq.n	800593a <I2C_MasterReceive_BTF+0xe2>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b02      	cmp	r3, #2
 8005938:	d108      	bne.n	800594c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	e00a      	b.n	8005962 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b10      	cmp	r3, #16
 8005950:	d007      	beq.n	8005962 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005960:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597e:	b29b      	uxth	r3, r3
 8005980:	3b01      	subs	r3, #1
 8005982:	b29a      	uxth	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	691a      	ldr	r2, [r3, #16]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80059bc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b40      	cmp	r3, #64	; 0x40
 80059d0:	d10a      	bne.n	80059e8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7ff fcda 	bl	800539a <HAL_I2C_MemRxCpltCallback>
}
 80059e6:	e01d      	b.n	8005a24 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2212      	movs	r2, #18
 80059f4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7ff fc95 	bl	8005326 <HAL_I2C_MasterRxCpltCallback>
}
 80059fc:	e012      	b.n	8005a24 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	691a      	ldr	r2, [r3, #16]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005a24:	bf00      	nop
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b40      	cmp	r3, #64	; 0x40
 8005a3e:	d117      	bne.n	8005a70 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d109      	bne.n	8005a5c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	461a      	mov	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a58:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005a5a:	e067      	b.n	8005b2c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	f043 0301 	orr.w	r3, r3, #1
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	611a      	str	r2, [r3, #16]
}
 8005a6e:	e05d      	b.n	8005b2c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a78:	d133      	bne.n	8005ae2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b21      	cmp	r3, #33	; 0x21
 8005a84:	d109      	bne.n	8005a9a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a96:	611a      	str	r2, [r3, #16]
 8005a98:	e008      	b.n	8005aac <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	f043 0301 	orr.w	r3, r3, #1
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d004      	beq.n	8005abe <I2C_Master_SB+0x92>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d108      	bne.n	8005ad0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d032      	beq.n	8005b2c <I2C_Master_SB+0x100>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d02d      	beq.n	8005b2c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ade:	605a      	str	r2, [r3, #4]
}
 8005ae0:	e024      	b.n	8005b2c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10e      	bne.n	8005b08 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	11db      	asrs	r3, r3, #7
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	f003 0306 	and.w	r3, r3, #6
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	f063 030f 	orn	r3, r3, #15
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	611a      	str	r2, [r3, #16]
}
 8005b06:	e011      	b.n	8005b2c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d10d      	bne.n	8005b2c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	11db      	asrs	r3, r3, #7
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	f003 0306 	and.w	r3, r3, #6
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	f063 030e 	orn	r3, r3, #14
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	611a      	str	r2, [r3, #16]
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bc80      	pop	{r7}
 8005b34:	4770      	bx	lr

08005b36 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b083      	sub	sp, #12
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d103      	bne.n	8005b5a <I2C_Master_ADD10+0x24>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d011      	beq.n	8005b7e <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d104      	bne.n	8005b6e <I2C_Master_ADD10+0x38>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d007      	beq.n	8005b7e <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b7c:	605a      	str	r2, [r3, #4]
    }
  }
}
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bc80      	pop	{r7}
 8005b86:	4770      	bx	lr

08005b88 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b091      	sub	sp, #68	; 0x44
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b22      	cmp	r3, #34	; 0x22
 8005bb0:	f040 8174 	bne.w	8005e9c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10f      	bne.n	8005bdc <I2C_Master_ADDR+0x54>
 8005bbc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005bc0:	2b40      	cmp	r3, #64	; 0x40
 8005bc2:	d10b      	bne.n	8005bdc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	633b      	str	r3, [r7, #48]	; 0x30
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	633b      	str	r3, [r7, #48]	; 0x30
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	e16b      	b.n	8005eb4 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d11d      	bne.n	8005c20 <I2C_Master_ADDR+0x98>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005bec:	d118      	bne.n	8005c20 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bee:	2300      	movs	r3, #0
 8005bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c12:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	651a      	str	r2, [r3, #80]	; 0x50
 8005c1e:	e149      	b.n	8005eb4 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d113      	bne.n	8005c52 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	e120      	b.n	8005e94 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	f040 808a 	bne.w	8005d72 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c64:	d137      	bne.n	8005cd6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c74:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c84:	d113      	bne.n	8005cae <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c94:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c96:	2300      	movs	r3, #0
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	e0f2      	b.n	8005e94 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cae:	2300      	movs	r3, #0
 8005cb0:	623b      	str	r3, [r7, #32]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	623b      	str	r3, [r7, #32]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	623b      	str	r3, [r7, #32]
 8005cc2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	e0de      	b.n	8005e94 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d02e      	beq.n	8005d3a <I2C_Master_ADDR+0x1b2>
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cde:	2b20      	cmp	r3, #32
 8005ce0:	d02b      	beq.n	8005d3a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce4:	2b12      	cmp	r3, #18
 8005ce6:	d102      	bne.n	8005cee <I2C_Master_ADDR+0x166>
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d125      	bne.n	8005d3a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf0:	2b04      	cmp	r3, #4
 8005cf2:	d00e      	beq.n	8005d12 <I2C_Master_ADDR+0x18a>
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d00b      	beq.n	8005d12 <I2C_Master_ADDR+0x18a>
 8005cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfc:	2b10      	cmp	r3, #16
 8005cfe:	d008      	beq.n	8005d12 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	e007      	b.n	8005d22 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d20:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d22:	2300      	movs	r3, #0
 8005d24:	61fb      	str	r3, [r7, #28]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	61fb      	str	r3, [r7, #28]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	61fb      	str	r3, [r7, #28]
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	e0ac      	b.n	8005e94 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d48:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	61bb      	str	r3, [r7, #24]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	61bb      	str	r3, [r7, #24]
 8005d5e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	e090      	b.n	8005e94 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d158      	bne.n	8005e2e <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d021      	beq.n	8005dc6 <I2C_Master_ADDR+0x23e>
 8005d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d01e      	beq.n	8005dc6 <I2C_Master_ADDR+0x23e>
 8005d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8a:	2b10      	cmp	r3, #16
 8005d8c:	d01b      	beq.n	8005dc6 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d9c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d9e:	2300      	movs	r3, #0
 8005da0:	617b      	str	r3, [r7, #20]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	617b      	str	r3, [r7, #20]
 8005db2:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	e012      	b.n	8005dec <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dd4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	613b      	str	r3, [r7, #16]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	613b      	str	r3, [r7, #16]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	613b      	str	r3, [r7, #16]
 8005dea:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dfa:	d14b      	bne.n	8005e94 <I2C_Master_ADDR+0x30c>
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e02:	d00b      	beq.n	8005e1c <I2C_Master_ADDR+0x294>
 8005e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d008      	beq.n	8005e1c <I2C_Master_ADDR+0x294>
 8005e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d005      	beq.n	8005e1c <I2C_Master_ADDR+0x294>
 8005e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e12:	2b10      	cmp	r3, #16
 8005e14:	d002      	beq.n	8005e1c <I2C_Master_ADDR+0x294>
 8005e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d13b      	bne.n	8005e94 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e2a:	605a      	str	r2, [r3, #4]
 8005e2c:	e032      	b.n	8005e94 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e3c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e4c:	d117      	bne.n	8005e7e <I2C_Master_ADDR+0x2f6>
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e54:	d00b      	beq.n	8005e6e <I2C_Master_ADDR+0x2e6>
 8005e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d008      	beq.n	8005e6e <I2C_Master_ADDR+0x2e6>
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5e:	2b08      	cmp	r3, #8
 8005e60:	d005      	beq.n	8005e6e <I2C_Master_ADDR+0x2e6>
 8005e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e64:	2b10      	cmp	r3, #16
 8005e66:	d002      	beq.n	8005e6e <I2C_Master_ADDR+0x2e6>
 8005e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6a:	2b20      	cmp	r3, #32
 8005e6c:	d107      	bne.n	8005e7e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e7c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	60fb      	str	r3, [r7, #12]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005e9a:	e00b      	b.n	8005eb4 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60bb      	str	r3, [r7, #8]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	60bb      	str	r3, [r7, #8]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	60bb      	str	r3, [r7, #8]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
}
 8005eb2:	e7ff      	b.n	8005eb4 <I2C_Master_ADDR+0x32c>
 8005eb4:	bf00      	nop
 8005eb6:	3744      	adds	r7, #68	; 0x44
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bc80      	pop	{r7}
 8005ebc:	4770      	bx	lr

08005ebe <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ecc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d02b      	beq.n	8005f30 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	781a      	ldrb	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d114      	bne.n	8005f30 <I2C_SlaveTransmit_TXE+0x72>
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
 8005f08:	2b29      	cmp	r3, #41	; 0x29
 8005f0a:	d111      	bne.n	8005f30 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f1a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2221      	movs	r2, #33	; 0x21
 8005f20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2228      	movs	r2, #40	; 0x28
 8005f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7ff fa04 	bl	8005338 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005f30:	bf00      	nop
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d011      	beq.n	8005f6e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	781a      	ldrb	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	3b01      	subs	r3, #1
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005f6e:	bf00      	nop
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bc80      	pop	{r7}
 8005f76:	4770      	bx	lr

08005f78 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f86:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d02c      	beq.n	8005fec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa4:	1c5a      	adds	r2, r3, #1
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d114      	bne.n	8005fec <I2C_SlaveReceive_RXNE+0x74>
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8005fc6:	d111      	bne.n	8005fec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fd6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2222      	movs	r2, #34	; 0x22
 8005fdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2228      	movs	r2, #40	; 0x28
 8005fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7ff f9af 	bl	800534a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005fec:	bf00      	nop
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d012      	beq.n	800602c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006022:	b29b      	uxth	r3, r3
 8006024:	3b01      	subs	r3, #1
 8006026:	b29a      	uxth	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	bc80      	pop	{r7}
 8006034:	4770      	bx	lr

08006036 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006040:	2300      	movs	r3, #0
 8006042:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800604a:	b2db      	uxtb	r3, r3
 800604c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006050:	2b28      	cmp	r3, #40	; 0x28
 8006052:	d127      	bne.n	80060a4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006062:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	089b      	lsrs	r3, r3, #2
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006070:	2301      	movs	r3, #1
 8006072:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	09db      	lsrs	r3, r3, #7
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	d103      	bne.n	8006088 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	81bb      	strh	r3, [r7, #12]
 8006086:	e002      	b.n	800608e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006096:	89ba      	ldrh	r2, [r7, #12]
 8006098:	7bfb      	ldrb	r3, [r7, #15]
 800609a:	4619      	mov	r1, r3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7ff f95d 	bl	800535c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80060a2:	e008      	b.n	80060b6 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f06f 0202 	mvn.w	r2, #2
 80060ac:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80060b6:	bf00      	nop
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ce:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060de:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80060e0:	2300      	movs	r3, #0
 80060e2:	60bb      	str	r3, [r7, #8]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	60bb      	str	r3, [r7, #8]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0201 	orr.w	r2, r2, #1
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800610c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800611c:	d172      	bne.n	8006204 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800611e:	7bfb      	ldrb	r3, [r7, #15]
 8006120:	2b22      	cmp	r3, #34	; 0x22
 8006122:	d002      	beq.n	800612a <I2C_Slave_STOPF+0x6a>
 8006124:	7bfb      	ldrb	r3, [r7, #15]
 8006126:	2b2a      	cmp	r3, #42	; 0x2a
 8006128:	d135      	bne.n	8006196 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	b29a      	uxth	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613c:	b29b      	uxth	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d005      	beq.n	800614e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006146:	f043 0204 	orr.w	r2, r3, #4
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800615c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006162:	4618      	mov	r0, r3
 8006164:	f7fe fa14 	bl	8004590 <HAL_DMA_GetState>
 8006168:	4603      	mov	r3, r0
 800616a:	2b01      	cmp	r3, #1
 800616c:	d049      	beq.n	8006202 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006172:	4a69      	ldr	r2, [pc, #420]	; (8006318 <I2C_Slave_STOPF+0x258>)
 8006174:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617a:	4618      	mov	r0, r3
 800617c:	f7fe f992 	bl	80044a4 <HAL_DMA_Abort_IT>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d03d      	beq.n	8006202 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006190:	4610      	mov	r0, r2
 8006192:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006194:	e035      	b.n	8006202 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	b29a      	uxth	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d005      	beq.n	80061ba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	f043 0204 	orr.w	r2, r3, #4
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fe f9de 	bl	8004590 <HAL_DMA_GetState>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d014      	beq.n	8006204 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061de:	4a4e      	ldr	r2, [pc, #312]	; (8006318 <I2C_Slave_STOPF+0x258>)
 80061e0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fe f95c 	bl	80044a4 <HAL_DMA_Abort_IT>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d008      	beq.n	8006204 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061fc:	4610      	mov	r0, r2
 80061fe:	4798      	blx	r3
 8006200:	e000      	b.n	8006204 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006202:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006208:	b29b      	uxth	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d03e      	beq.n	800628c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b04      	cmp	r3, #4
 800621a:	d112      	bne.n	8006242 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	691a      	ldr	r2, [r3, #16]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006238:	b29b      	uxth	r3, r3
 800623a:	3b01      	subs	r3, #1
 800623c:	b29a      	uxth	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624c:	2b40      	cmp	r3, #64	; 0x40
 800624e:	d112      	bne.n	8006276 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691a      	ldr	r2, [r3, #16]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006262:	1c5a      	adds	r2, r3, #1
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800626c:	b29b      	uxth	r3, r3
 800626e:	3b01      	subs	r3, #1
 8006270:	b29a      	uxth	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800627a:	b29b      	uxth	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	d005      	beq.n	800628c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006284:	f043 0204 	orr.w	r2, r3, #4
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f8b3 	bl	8006400 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800629a:	e039      	b.n	8006310 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800629c:	7bfb      	ldrb	r3, [r7, #15]
 800629e:	2b2a      	cmp	r3, #42	; 0x2a
 80062a0:	d109      	bne.n	80062b6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2228      	movs	r2, #40	; 0x28
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7ff f84a 	bl	800534a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b28      	cmp	r3, #40	; 0x28
 80062c0:	d111      	bne.n	80062e6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a15      	ldr	r2, [pc, #84]	; (800631c <I2C_Slave_STOPF+0x25c>)
 80062c6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7ff f849 	bl	8005376 <HAL_I2C_ListenCpltCallback>
}
 80062e4:	e014      	b.n	8006310 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ea:	2b22      	cmp	r3, #34	; 0x22
 80062ec:	d002      	beq.n	80062f4 <I2C_Slave_STOPF+0x234>
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
 80062f0:	2b22      	cmp	r3, #34	; 0x22
 80062f2:	d10d      	bne.n	8006310 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7ff f81d 	bl	800534a <HAL_I2C_SlaveRxCpltCallback>
}
 8006310:	bf00      	nop
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	08006769 	.word	0x08006769
 800631c:	ffff0000 	.word	0xffff0000

08006320 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800632e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006334:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b08      	cmp	r3, #8
 800633a:	d002      	beq.n	8006342 <I2C_Slave_AF+0x22>
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2b20      	cmp	r3, #32
 8006340:	d129      	bne.n	8006396 <I2C_Slave_AF+0x76>
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	2b28      	cmp	r3, #40	; 0x28
 8006346:	d126      	bne.n	8006396 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a2c      	ldr	r2, [pc, #176]	; (80063fc <I2C_Slave_AF+0xdc>)
 800634c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800635c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006366:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006376:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2220      	movs	r2, #32
 8006382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7fe fff1 	bl	8005376 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006394:	e02e      	b.n	80063f4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006396:	7bfb      	ldrb	r3, [r7, #15]
 8006398:	2b21      	cmp	r3, #33	; 0x21
 800639a:	d126      	bne.n	80063ea <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a17      	ldr	r2, [pc, #92]	; (80063fc <I2C_Slave_AF+0xdc>)
 80063a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2221      	movs	r2, #33	; 0x21
 80063a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063c6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063d0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7fe ffa8 	bl	8005338 <HAL_I2C_SlaveTxCpltCallback>
}
 80063e8:	e004      	b.n	80063f4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063f2:	615a      	str	r2, [r3, #20]
}
 80063f4:	bf00      	nop
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	ffff0000 	.word	0xffff0000

08006400 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800640e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006416:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006418:	7bbb      	ldrb	r3, [r7, #14]
 800641a:	2b10      	cmp	r3, #16
 800641c:	d002      	beq.n	8006424 <I2C_ITError+0x24>
 800641e:	7bbb      	ldrb	r3, [r7, #14]
 8006420:	2b40      	cmp	r3, #64	; 0x40
 8006422:	d10a      	bne.n	800643a <I2C_ITError+0x3a>
 8006424:	7bfb      	ldrb	r3, [r7, #15]
 8006426:	2b22      	cmp	r3, #34	; 0x22
 8006428:	d107      	bne.n	800643a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006438:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800643a:	7bfb      	ldrb	r3, [r7, #15]
 800643c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006440:	2b28      	cmp	r3, #40	; 0x28
 8006442:	d107      	bne.n	8006454 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2228      	movs	r2, #40	; 0x28
 800644e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006452:	e015      	b.n	8006480 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800645e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006462:	d00a      	beq.n	800647a <I2C_ITError+0x7a>
 8006464:	7bfb      	ldrb	r3, [r7, #15]
 8006466:	2b60      	cmp	r3, #96	; 0x60
 8006468:	d007      	beq.n	800647a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2220      	movs	r2, #32
 800646e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800648a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800648e:	d161      	bne.n	8006554 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800649e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d020      	beq.n	80064ee <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b0:	4a6a      	ldr	r2, [pc, #424]	; (800665c <I2C_ITError+0x25c>)
 80064b2:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7fd fff3 	bl	80044a4 <HAL_DMA_Abort_IT>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 8089 	beq.w	80065d8 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0201 	bic.w	r2, r2, #1
 80064d4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2220      	movs	r2, #32
 80064da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80064e8:	4610      	mov	r0, r2
 80064ea:	4798      	blx	r3
 80064ec:	e074      	b.n	80065d8 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f2:	4a5a      	ldr	r2, [pc, #360]	; (800665c <I2C_ITError+0x25c>)
 80064f4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fd ffd2 	bl	80044a4 <HAL_DMA_Abort_IT>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d068      	beq.n	80065d8 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006510:	2b40      	cmp	r3, #64	; 0x40
 8006512:	d10b      	bne.n	800652c <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691a      	ldr	r2, [r3, #16]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	b2d2      	uxtb	r2, r2
 8006520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 0201 	bic.w	r2, r2, #1
 800653a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2220      	movs	r2, #32
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800654e:	4610      	mov	r0, r2
 8006550:	4798      	blx	r3
 8006552:	e041      	b.n	80065d8 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b60      	cmp	r3, #96	; 0x60
 800655e:	d125      	bne.n	80065ac <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2220      	movs	r2, #32
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006578:	2b40      	cmp	r3, #64	; 0x40
 800657a:	d10b      	bne.n	8006594 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	691a      	ldr	r2, [r3, #16]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	b2d2      	uxtb	r2, r2
 8006588:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	1c5a      	adds	r2, r3, #1
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0201 	bic.w	r2, r2, #1
 80065a2:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7fe ff0a 	bl	80053be <HAL_I2C_AbortCpltCallback>
 80065aa:	e015      	b.n	80065d8 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b6:	2b40      	cmp	r3, #64	; 0x40
 80065b8:	d10b      	bne.n	80065d2 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	b2d2      	uxtb	r2, r2
 80065c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7fe feea 	bl	80053ac <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065dc:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10e      	bne.n	8006606 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d109      	bne.n	8006606 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d104      	bne.n	8006606 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006602:	2b00      	cmp	r3, #0
 8006604:	d007      	beq.n	8006616 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006614:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800661c:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	f003 0304 	and.w	r3, r3, #4
 8006626:	2b04      	cmp	r3, #4
 8006628:	d113      	bne.n	8006652 <I2C_ITError+0x252>
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	2b28      	cmp	r3, #40	; 0x28
 800662e:	d110      	bne.n	8006652 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a0b      	ldr	r2, [pc, #44]	; (8006660 <I2C_ITError+0x260>)
 8006634:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2220      	movs	r2, #32
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7fe fe92 	bl	8005376 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006652:	bf00      	nop
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	08006769 	.word	0x08006769
 8006660:	ffff0000 	.word	0xffff0000

08006664 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af02      	add	r7, sp, #8
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	607a      	str	r2, [r7, #4]
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	460b      	mov	r3, r1
 8006672:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006678:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2b08      	cmp	r3, #8
 800667e:	d006      	beq.n	800668e <I2C_MasterRequestWrite+0x2a>
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d003      	beq.n	800668e <I2C_MasterRequestWrite+0x2a>
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800668c:	d108      	bne.n	80066a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	e00b      	b.n	80066b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a4:	2b12      	cmp	r3, #18
 80066a6:	d107      	bne.n	80066b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 f8f7 	bl	80068b8 <I2C_WaitOnFlagUntilTimeout>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00d      	beq.n	80066ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066de:	d103      	bne.n	80066e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e035      	b.n	8006758 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066f4:	d108      	bne.n	8006708 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066f6:	897b      	ldrh	r3, [r7, #10]
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	461a      	mov	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006704:	611a      	str	r2, [r3, #16]
 8006706:	e01b      	b.n	8006740 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006708:	897b      	ldrh	r3, [r7, #10]
 800670a:	11db      	asrs	r3, r3, #7
 800670c:	b2db      	uxtb	r3, r3
 800670e:	f003 0306 	and.w	r3, r3, #6
 8006712:	b2db      	uxtb	r3, r3
 8006714:	f063 030f 	orn	r3, r3, #15
 8006718:	b2da      	uxtb	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	490e      	ldr	r1, [pc, #56]	; (8006760 <I2C_MasterRequestWrite+0xfc>)
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 f91d 	bl	8006966 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e010      	b.n	8006758 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006736:	897b      	ldrh	r3, [r7, #10]
 8006738:	b2da      	uxtb	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	4907      	ldr	r1, [pc, #28]	; (8006764 <I2C_MasterRequestWrite+0x100>)
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 f90d 	bl	8006966 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d001      	beq.n	8006756 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e000      	b.n	8006758 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	00010008 	.word	0x00010008
 8006764:	00010002 	.word	0x00010002

08006768 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006780:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006782:	4b4b      	ldr	r3, [pc, #300]	; (80068b0 <I2C_DMAAbort+0x148>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	08db      	lsrs	r3, r3, #3
 8006788:	4a4a      	ldr	r2, [pc, #296]	; (80068b4 <I2C_DMAAbort+0x14c>)
 800678a:	fba2 2303 	umull	r2, r3, r2, r3
 800678e:	0a1a      	lsrs	r2, r3, #8
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	00da      	lsls	r2, r3, #3
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d106      	bne.n	80067b0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	f043 0220 	orr.w	r2, r3, #32
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80067ae:	e00a      	b.n	80067c6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c4:	d0ea      	beq.n	800679c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d2:	2200      	movs	r2, #0
 80067d4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e2:	2200      	movs	r2, #0
 80067e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067f4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2200      	movs	r2, #0
 80067fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006808:	2200      	movs	r2, #0
 800680a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006810:	2b00      	cmp	r3, #0
 8006812:	d003      	beq.n	800681c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006818:	2200      	movs	r2, #0
 800681a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 0201 	bic.w	r2, r2, #1
 800682a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b60      	cmp	r3, #96	; 0x60
 8006836:	d10e      	bne.n	8006856 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	2220      	movs	r2, #32
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2200      	movs	r2, #0
 800684c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800684e:	6978      	ldr	r0, [r7, #20]
 8006850:	f7fe fdb5 	bl	80053be <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006854:	e027      	b.n	80068a6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006856:	7cfb      	ldrb	r3, [r7, #19]
 8006858:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800685c:	2b28      	cmp	r3, #40	; 0x28
 800685e:	d117      	bne.n	8006890 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0201 	orr.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800687e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2200      	movs	r2, #0
 8006884:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	2228      	movs	r2, #40	; 0x28
 800688a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800688e:	e007      	b.n	80068a0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	2220      	movs	r2, #32
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80068a0:	6978      	ldr	r0, [r7, #20]
 80068a2:	f7fe fd83 	bl	80053ac <HAL_I2C_ErrorCallback>
}
 80068a6:	bf00      	nop
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	20000050 	.word	0x20000050
 80068b4:	14f8b589 	.word	0x14f8b589

080068b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	603b      	str	r3, [r7, #0]
 80068c4:	4613      	mov	r3, r2
 80068c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068c8:	e025      	b.n	8006916 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d0:	d021      	beq.n	8006916 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068d2:	f7fd fcab 	bl	800422c <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d302      	bcc.n	80068e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d116      	bne.n	8006916 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2220      	movs	r2, #32
 80068f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	f043 0220 	orr.w	r2, r3, #32
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e023      	b.n	800695e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	0c1b      	lsrs	r3, r3, #16
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b01      	cmp	r3, #1
 800691e:	d10d      	bne.n	800693c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	43da      	mvns	r2, r3
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	4013      	ands	r3, r2
 800692c:	b29b      	uxth	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	bf0c      	ite	eq
 8006932:	2301      	moveq	r3, #1
 8006934:	2300      	movne	r3, #0
 8006936:	b2db      	uxtb	r3, r3
 8006938:	461a      	mov	r2, r3
 800693a:	e00c      	b.n	8006956 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	43da      	mvns	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	4013      	ands	r3, r2
 8006948:	b29b      	uxth	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	bf0c      	ite	eq
 800694e:	2301      	moveq	r3, #1
 8006950:	2300      	movne	r3, #0
 8006952:	b2db      	uxtb	r3, r3
 8006954:	461a      	mov	r2, r3
 8006956:	79fb      	ldrb	r3, [r7, #7]
 8006958:	429a      	cmp	r2, r3
 800695a:	d0b6      	beq.n	80068ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	60f8      	str	r0, [r7, #12]
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	607a      	str	r2, [r7, #4]
 8006972:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006974:	e051      	b.n	8006a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006984:	d123      	bne.n	80069ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006994:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800699e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2220      	movs	r2, #32
 80069aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	f043 0204 	orr.w	r2, r3, #4
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e046      	b.n	8006a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d4:	d021      	beq.n	8006a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069d6:	f7fd fc29 	bl	800422c <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d302      	bcc.n	80069ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d116      	bne.n	8006a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2220      	movs	r2, #32
 80069f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a06:	f043 0220 	orr.w	r2, r3, #32
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e020      	b.n	8006a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	0c1b      	lsrs	r3, r3, #16
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d10c      	bne.n	8006a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	43da      	mvns	r2, r3
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	4013      	ands	r3, r2
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	bf14      	ite	ne
 8006a36:	2301      	movne	r3, #1
 8006a38:	2300      	moveq	r3, #0
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	e00b      	b.n	8006a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	43da      	mvns	r2, r3
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	4013      	ands	r3, r2
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	bf14      	ite	ne
 8006a50:	2301      	movne	r3, #1
 8006a52:	2300      	moveq	r3, #0
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d18d      	bne.n	8006976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a70:	e02d      	b.n	8006ace <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f8aa 	bl	8006bcc <I2C_IsAcknowledgeFailed>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e02d      	b.n	8006ade <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a88:	d021      	beq.n	8006ace <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a8a:	f7fd fbcf 	bl	800422c <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d302      	bcc.n	8006aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d116      	bne.n	8006ace <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aba:	f043 0220 	orr.w	r2, r3, #32
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e007      	b.n	8006ade <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad8:	2b80      	cmp	r3, #128	; 0x80
 8006ada:	d1ca      	bne.n	8006a72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b084      	sub	sp, #16
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	60f8      	str	r0, [r7, #12]
 8006aee:	60b9      	str	r1, [r7, #8]
 8006af0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006af2:	e02d      	b.n	8006b50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 f869 	bl	8006bcc <I2C_IsAcknowledgeFailed>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e02d      	b.n	8006b60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0a:	d021      	beq.n	8006b50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b0c:	f7fd fb8e 	bl	800422c <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d302      	bcc.n	8006b22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d116      	bne.n	8006b50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3c:	f043 0220 	orr.w	r2, r3, #32
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e007      	b.n	8006b60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	f003 0304 	and.w	r3, r3, #4
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	d1ca      	bne.n	8006af4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006b74:	4b13      	ldr	r3, [pc, #76]	; (8006bc4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	08db      	lsrs	r3, r3, #3
 8006b7a:	4a13      	ldr	r2, [pc, #76]	; (8006bc8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b80:	0a1a      	lsrs	r2, r3, #8
 8006b82:	4613      	mov	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d107      	bne.n	8006ba6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	f043 0220 	orr.w	r2, r3, #32
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e008      	b.n	8006bb8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bb4:	d0e9      	beq.n	8006b8a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3714      	adds	r7, #20
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bc80      	pop	{r7}
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	20000050 	.word	0x20000050
 8006bc8:	14f8b589 	.word	0x14f8b589

08006bcc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006be2:	d11b      	bne.n	8006c1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006bec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c08:	f043 0204 	orr.w	r2, r3, #4
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e000      	b.n	8006c1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bc80      	pop	{r7}
 8006c26:	4770      	bx	lr

08006c28 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006c38:	d103      	bne.n	8006c42 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006c40:	e007      	b.n	8006c52 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c46:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006c4a:	d102      	bne.n	8006c52 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2208      	movs	r2, #8
 8006c50:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006c52:	bf00      	nop
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bc80      	pop	{r7}
 8006c5a:	4770      	bx	lr

08006c5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c5e:	b08b      	sub	sp, #44	; 0x2c
 8006c60:	af06      	add	r7, sp, #24
 8006c62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d101      	bne.n	8006c6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e0fd      	b.n	8006e6a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d106      	bne.n	8006c88 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f006 f998 	bl	800cfb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2203      	movs	r2, #3
 8006c8c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f002 fbf5 	bl	8009484 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	603b      	str	r3, [r7, #0]
 8006ca0:	687e      	ldr	r6, [r7, #4]
 8006ca2:	466d      	mov	r5, sp
 8006ca4:	f106 0410 	add.w	r4, r6, #16
 8006ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	602b      	str	r3, [r5, #0]
 8006cb0:	1d33      	adds	r3, r6, #4
 8006cb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cb4:	6838      	ldr	r0, [r7, #0]
 8006cb6:	f002 fbbf 	bl	8009438 <USB_CoreInit>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d005      	beq.n	8006ccc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e0ce      	b.n	8006e6a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f002 fbf0 	bl	80094b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cd8:	2300      	movs	r3, #0
 8006cda:	73fb      	strb	r3, [r7, #15]
 8006cdc:	e04c      	b.n	8006d78 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	440b      	add	r3, r1
 8006cee:	3301      	adds	r3, #1
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	6879      	ldr	r1, [r7, #4]
 8006cf8:	1c5a      	adds	r2, r3, #1
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	440b      	add	r3, r1
 8006d04:	7bfa      	ldrb	r2, [r7, #15]
 8006d06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006d08:	7bfa      	ldrb	r2, [r7, #15]
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
 8006d0c:	b298      	uxth	r0, r3
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	4613      	mov	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	00db      	lsls	r3, r3, #3
 8006d18:	440b      	add	r3, r1
 8006d1a:	3336      	adds	r3, #54	; 0x36
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
 8006d22:	6879      	ldr	r1, [r7, #4]
 8006d24:	1c5a      	adds	r2, r3, #1
 8006d26:	4613      	mov	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	00db      	lsls	r3, r3, #3
 8006d2e:	440b      	add	r3, r1
 8006d30:	3303      	adds	r3, #3
 8006d32:	2200      	movs	r2, #0
 8006d34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006d36:	7bfa      	ldrb	r2, [r7, #15]
 8006d38:	6879      	ldr	r1, [r7, #4]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	00db      	lsls	r3, r3, #3
 8006d42:	440b      	add	r3, r1
 8006d44:	3338      	adds	r3, #56	; 0x38
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006d4a:	7bfa      	ldrb	r2, [r7, #15]
 8006d4c:	6879      	ldr	r1, [r7, #4]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	00db      	lsls	r3, r3, #3
 8006d56:	440b      	add	r3, r1
 8006d58:	333c      	adds	r3, #60	; 0x3c
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006d5e:	7bfa      	ldrb	r2, [r7, #15]
 8006d60:	6879      	ldr	r1, [r7, #4]
 8006d62:	4613      	mov	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	00db      	lsls	r3, r3, #3
 8006d6a:	440b      	add	r3, r1
 8006d6c:	3340      	adds	r3, #64	; 0x40
 8006d6e:	2200      	movs	r2, #0
 8006d70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	3301      	adds	r3, #1
 8006d76:	73fb      	strb	r3, [r7, #15]
 8006d78:	7bfa      	ldrb	r2, [r7, #15]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d3ad      	bcc.n	8006cde <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d82:	2300      	movs	r3, #0
 8006d84:	73fb      	strb	r3, [r7, #15]
 8006d86:	e044      	b.n	8006e12 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006d88:	7bfa      	ldrb	r2, [r7, #15]
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	440b      	add	r3, r1
 8006d96:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006d9e:	7bfa      	ldrb	r2, [r7, #15]
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	4613      	mov	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	00db      	lsls	r3, r3, #3
 8006daa:	440b      	add	r3, r1
 8006dac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006db0:	7bfa      	ldrb	r2, [r7, #15]
 8006db2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006db4:	7bfa      	ldrb	r2, [r7, #15]
 8006db6:	6879      	ldr	r1, [r7, #4]
 8006db8:	4613      	mov	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	00db      	lsls	r3, r3, #3
 8006dc0:	440b      	add	r3, r1
 8006dc2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006dca:	7bfa      	ldrb	r2, [r7, #15]
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	00db      	lsls	r3, r3, #3
 8006dd6:	440b      	add	r3, r1
 8006dd8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006de0:	7bfa      	ldrb	r2, [r7, #15]
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	00db      	lsls	r3, r3, #3
 8006dec:	440b      	add	r3, r1
 8006dee:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006df6:	7bfa      	ldrb	r2, [r7, #15]
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	00db      	lsls	r3, r3, #3
 8006e02:	440b      	add	r3, r1
 8006e04:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006e08:	2200      	movs	r2, #0
 8006e0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	73fb      	strb	r3, [r7, #15]
 8006e12:	7bfa      	ldrb	r2, [r7, #15]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d3b5      	bcc.n	8006d88 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	603b      	str	r3, [r7, #0]
 8006e22:	687e      	ldr	r6, [r7, #4]
 8006e24:	466d      	mov	r5, sp
 8006e26:	f106 0410 	add.w	r4, r6, #16
 8006e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	602b      	str	r3, [r5, #0]
 8006e32:	1d33      	adds	r3, r6, #4
 8006e34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e36:	6838      	ldr	r0, [r7, #0]
 8006e38:	f002 fb4a 	bl	80094d0 <USB_DevInit>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d005      	beq.n	8006e4e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2202      	movs	r2, #2
 8006e46:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e00d      	b.n	8006e6a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f004 fae4 	bl	800b430 <USB_DevDisconnect>

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e72 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d101      	bne.n	8006e88 <HAL_PCD_Start+0x16>
 8006e84:	2302      	movs	r3, #2
 8006e86:	e016      	b.n	8006eb6 <HAL_PCD_Start+0x44>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f002 fadf 	bl	8009458 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f006 fafe 	bl	800d49e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f004 fab8 	bl	800b41c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b088      	sub	sp, #32
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f004 faba 	bl	800b444 <USB_ReadInterrupts>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eda:	d102      	bne.n	8006ee2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fb61 	bl	80075a4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f004 faac 	bl	800b444 <USB_ReadInterrupts>
 8006eec:	4603      	mov	r3, r0
 8006eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ef6:	d112      	bne.n	8006f1e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f0a:	b292      	uxth	r2, r2
 8006f0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f006 f8cc 	bl	800d0ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006f16:	2100      	movs	r1, #0
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f925 	bl	8007168 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f004 fa8e 	bl	800b444 <USB_ReadInterrupts>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f32:	d10b      	bne.n	8006f4c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f46:	b292      	uxth	r2, r2
 8006f48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f004 fa77 	bl	800b444 <USB_ReadInterrupts>
 8006f56:	4603      	mov	r3, r0
 8006f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f60:	d10b      	bne.n	8006f7a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f74:	b292      	uxth	r2, r2
 8006f76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f004 fa60 	bl	800b444 <USB_ReadInterrupts>
 8006f84:	4603      	mov	r3, r0
 8006f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f8e:	d126      	bne.n	8006fde <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0204 	bic.w	r2, r2, #4
 8006fa2:	b292      	uxth	r2, r2
 8006fa4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 0208 	bic.w	r2, r2, #8
 8006fba:	b292      	uxth	r2, r2
 8006fbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f006 f8ad 	bl	800d120 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006fd8:	b292      	uxth	r2, r2
 8006fda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f004 fa2e 	bl	800b444 <USB_ReadInterrupts>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ff2:	f040 8084 	bne.w	80070fe <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	77fb      	strb	r3, [r7, #31]
 8006ffa:	e011      	b.n	8007020 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	461a      	mov	r2, r3
 8007002:	7ffb      	ldrb	r3, [r7, #31]
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	441a      	add	r2, r3
 8007008:	7ffb      	ldrb	r3, [r7, #31]
 800700a:	8812      	ldrh	r2, [r2, #0]
 800700c:	b292      	uxth	r2, r2
 800700e:	005b      	lsls	r3, r3, #1
 8007010:	f107 0120 	add.w	r1, r7, #32
 8007014:	440b      	add	r3, r1
 8007016:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800701a:	7ffb      	ldrb	r3, [r7, #31]
 800701c:	3301      	adds	r3, #1
 800701e:	77fb      	strb	r3, [r7, #31]
 8007020:	7ffb      	ldrb	r3, [r7, #31]
 8007022:	2b07      	cmp	r3, #7
 8007024:	d9ea      	bls.n	8006ffc <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800702e:	b29a      	uxth	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f042 0201 	orr.w	r2, r2, #1
 8007038:	b292      	uxth	r2, r2
 800703a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007046:	b29a      	uxth	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0201 	bic.w	r2, r2, #1
 8007050:	b292      	uxth	r2, r2
 8007052:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8007056:	bf00      	nop
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007060:	b29b      	uxth	r3, r3
 8007062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0f6      	beq.n	8007058 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007072:	b29a      	uxth	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800707c:	b292      	uxth	r2, r2
 800707e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8007082:	2300      	movs	r3, #0
 8007084:	77fb      	strb	r3, [r7, #31]
 8007086:	e010      	b.n	80070aa <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8007088:	7ffb      	ldrb	r3, [r7, #31]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	6812      	ldr	r2, [r2, #0]
 800708e:	4611      	mov	r1, r2
 8007090:	7ffa      	ldrb	r2, [r7, #31]
 8007092:	0092      	lsls	r2, r2, #2
 8007094:	440a      	add	r2, r1
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	f107 0120 	add.w	r1, r7, #32
 800709c:	440b      	add	r3, r1
 800709e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80070a2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80070a4:	7ffb      	ldrb	r3, [r7, #31]
 80070a6:	3301      	adds	r3, #1
 80070a8:	77fb      	strb	r3, [r7, #31]
 80070aa:	7ffb      	ldrb	r3, [r7, #31]
 80070ac:	2b07      	cmp	r3, #7
 80070ae:	d9eb      	bls.n	8007088 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f042 0208 	orr.w	r2, r2, #8
 80070c2:	b292      	uxth	r2, r2
 80070c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070da:	b292      	uxth	r2, r2
 80070dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0204 	orr.w	r2, r2, #4
 80070f2:	b292      	uxth	r2, r2
 80070f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f005 fff7 	bl	800d0ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4618      	mov	r0, r3
 8007104:	f004 f99e 	bl	800b444 <USB_ReadInterrupts>
 8007108:	4603      	mov	r3, r0
 800710a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800710e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007112:	d10e      	bne.n	8007132 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800711c:	b29a      	uxth	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007126:	b292      	uxth	r2, r2
 8007128:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f005 ffb0 	bl	800d092 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4618      	mov	r0, r3
 8007138:	f004 f984 	bl	800b444 <USB_ReadInterrupts>
 800713c:	4603      	mov	r3, r0
 800713e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007146:	d10b      	bne.n	8007160 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007150:	b29a      	uxth	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800715a:	b292      	uxth	r2, r2
 800715c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8007160:	bf00      	nop
 8007162:	3720      	adds	r7, #32
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	460b      	mov	r3, r1
 8007172:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800717a:	2b01      	cmp	r3, #1
 800717c:	d101      	bne.n	8007182 <HAL_PCD_SetAddress+0x1a>
 800717e:	2302      	movs	r3, #2
 8007180:	e013      	b.n	80071aa <HAL_PCD_SetAddress+0x42>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	78fa      	ldrb	r2, [r7, #3]
 800718e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	78fa      	ldrb	r2, [r7, #3]
 8007198:	4611      	mov	r1, r2
 800719a:	4618      	mov	r0, r3
 800719c:	f004 f92b 	bl	800b3f6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	4608      	mov	r0, r1
 80071bc:	4611      	mov	r1, r2
 80071be:	461a      	mov	r2, r3
 80071c0:	4603      	mov	r3, r0
 80071c2:	70fb      	strb	r3, [r7, #3]
 80071c4:	460b      	mov	r3, r1
 80071c6:	803b      	strh	r3, [r7, #0]
 80071c8:	4613      	mov	r3, r2
 80071ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80071d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	da0e      	bge.n	80071f6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071d8:	78fb      	ldrb	r3, [r7, #3]
 80071da:	f003 0307 	and.w	r3, r3, #7
 80071de:	1c5a      	adds	r2, r3, #1
 80071e0:	4613      	mov	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	00db      	lsls	r3, r3, #3
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	4413      	add	r3, r2
 80071ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2201      	movs	r2, #1
 80071f2:	705a      	strb	r2, [r3, #1]
 80071f4:	e00e      	b.n	8007214 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071f6:	78fb      	ldrb	r3, [r7, #3]
 80071f8:	f003 0207 	and.w	r2, r3, #7
 80071fc:	4613      	mov	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	4413      	add	r3, r2
 800720c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007214:	78fb      	ldrb	r3, [r7, #3]
 8007216:	f003 0307 	and.w	r3, r3, #7
 800721a:	b2da      	uxtb	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007220:	883a      	ldrh	r2, [r7, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	78ba      	ldrb	r2, [r7, #2]
 800722a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	785b      	ldrb	r3, [r3, #1]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d004      	beq.n	800723e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	b29a      	uxth	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800723e:	78bb      	ldrb	r3, [r7, #2]
 8007240:	2b02      	cmp	r3, #2
 8007242:	d102      	bne.n	800724a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007250:	2b01      	cmp	r3, #1
 8007252:	d101      	bne.n	8007258 <HAL_PCD_EP_Open+0xa6>
 8007254:	2302      	movs	r3, #2
 8007256:	e00e      	b.n	8007276 <HAL_PCD_EP_Open+0xc4>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68f9      	ldr	r1, [r7, #12]
 8007266:	4618      	mov	r0, r3
 8007268:	f002 f952 	bl	8009510 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8007274:	7afb      	ldrb	r3, [r7, #11]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b084      	sub	sp, #16
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	460b      	mov	r3, r1
 8007288:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800728a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800728e:	2b00      	cmp	r3, #0
 8007290:	da0e      	bge.n	80072b0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007292:	78fb      	ldrb	r3, [r7, #3]
 8007294:	f003 0307 	and.w	r3, r3, #7
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	4613      	mov	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	00db      	lsls	r3, r3, #3
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	4413      	add	r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2201      	movs	r2, #1
 80072ac:	705a      	strb	r2, [r3, #1]
 80072ae:	e00e      	b.n	80072ce <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072b0:	78fb      	ldrb	r3, [r7, #3]
 80072b2:	f003 0207 	and.w	r2, r3, #7
 80072b6:	4613      	mov	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	00db      	lsls	r3, r3, #3
 80072be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	4413      	add	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80072ce:	78fb      	ldrb	r3, [r7, #3]
 80072d0:	f003 0307 	and.w	r3, r3, #7
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d101      	bne.n	80072e8 <HAL_PCD_EP_Close+0x6a>
 80072e4:	2302      	movs	r3, #2
 80072e6:	e00e      	b.n	8007306 <HAL_PCD_EP_Close+0x88>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68f9      	ldr	r1, [r7, #12]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f002 fc74 	bl	8009be4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b086      	sub	sp, #24
 8007312:	af00      	add	r7, sp, #0
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	603b      	str	r3, [r7, #0]
 800731a:	460b      	mov	r3, r1
 800731c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800731e:	7afb      	ldrb	r3, [r7, #11]
 8007320:	f003 0207 	and.w	r2, r3, #7
 8007324:	4613      	mov	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	00db      	lsls	r3, r3, #3
 800732c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	4413      	add	r3, r2
 8007334:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2200      	movs	r2, #0
 8007346:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2200      	movs	r2, #0
 800734c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800734e:	7afb      	ldrb	r3, [r7, #11]
 8007350:	f003 0307 	and.w	r3, r3, #7
 8007354:	b2da      	uxtb	r2, r3
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800735a:	7afb      	ldrb	r3, [r7, #11]
 800735c:	f003 0307 	and.w	r3, r3, #7
 8007360:	2b00      	cmp	r3, #0
 8007362:	d106      	bne.n	8007372 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6979      	ldr	r1, [r7, #20]
 800736a:	4618      	mov	r0, r3
 800736c:	f002 fe26 	bl	8009fbc <USB_EPStartXfer>
 8007370:	e005      	b.n	800737e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6979      	ldr	r1, [r7, #20]
 8007378:	4618      	mov	r0, r3
 800737a:	f002 fe1f 	bl	8009fbc <USB_EPStartXfer>
  }

  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3718      	adds	r7, #24
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	460b      	mov	r3, r1
 8007392:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007394:	78fb      	ldrb	r3, [r7, #3]
 8007396:	f003 0207 	and.w	r2, r3, #7
 800739a:	6879      	ldr	r1, [r7, #4]
 800739c:	4613      	mov	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	440b      	add	r3, r1
 80073a6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80073aa:	681b      	ldr	r3, [r3, #0]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bc80      	pop	{r7}
 80073b4:	4770      	bx	lr

080073b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b086      	sub	sp, #24
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	607a      	str	r2, [r7, #4]
 80073c0:	603b      	str	r3, [r7, #0]
 80073c2:	460b      	mov	r3, r1
 80073c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073c6:	7afb      	ldrb	r3, [r7, #11]
 80073c8:	f003 0307 	and.w	r3, r3, #7
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	4613      	mov	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	00db      	lsls	r3, r3, #3
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	4413      	add	r3, r2
 80073da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	2200      	movs	r2, #0
 80073fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	2201      	movs	r2, #1
 8007400:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007402:	7afb      	ldrb	r3, [r7, #11]
 8007404:	f003 0307 	and.w	r3, r3, #7
 8007408:	b2da      	uxtb	r2, r3
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800740e:	7afb      	ldrb	r3, [r7, #11]
 8007410:	f003 0307 	and.w	r3, r3, #7
 8007414:	2b00      	cmp	r3, #0
 8007416:	d106      	bne.n	8007426 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6979      	ldr	r1, [r7, #20]
 800741e:	4618      	mov	r0, r3
 8007420:	f002 fdcc 	bl	8009fbc <USB_EPStartXfer>
 8007424:	e005      	b.n	8007432 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6979      	ldr	r1, [r7, #20]
 800742c:	4618      	mov	r0, r3
 800742e:	f002 fdc5 	bl	8009fbc <USB_EPStartXfer>
  }

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	460b      	mov	r3, r1
 8007446:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007448:	78fb      	ldrb	r3, [r7, #3]
 800744a:	f003 0207 	and.w	r2, r3, #7
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	429a      	cmp	r2, r3
 8007454:	d901      	bls.n	800745a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e04c      	b.n	80074f4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800745a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800745e:	2b00      	cmp	r3, #0
 8007460:	da0e      	bge.n	8007480 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007462:	78fb      	ldrb	r3, [r7, #3]
 8007464:	f003 0307 	and.w	r3, r3, #7
 8007468:	1c5a      	adds	r2, r3, #1
 800746a:	4613      	mov	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	00db      	lsls	r3, r3, #3
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	4413      	add	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2201      	movs	r2, #1
 800747c:	705a      	strb	r2, [r3, #1]
 800747e:	e00c      	b.n	800749a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007480:	78fa      	ldrb	r2, [r7, #3]
 8007482:	4613      	mov	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	00db      	lsls	r3, r3, #3
 800748a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	4413      	add	r3, r2
 8007492:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2201      	movs	r2, #1
 800749e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80074a0:	78fb      	ldrb	r3, [r7, #3]
 80074a2:	f003 0307 	and.w	r3, r3, #7
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d101      	bne.n	80074ba <HAL_PCD_EP_SetStall+0x7e>
 80074b6:	2302      	movs	r3, #2
 80074b8:	e01c      	b.n	80074f4 <HAL_PCD_EP_SetStall+0xb8>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68f9      	ldr	r1, [r7, #12]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f003 fe97 	bl	800b1fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80074ce:	78fb      	ldrb	r3, [r7, #3]
 80074d0:	f003 0307 	and.w	r3, r3, #7
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d108      	bne.n	80074ea <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80074e2:	4619      	mov	r1, r3
 80074e4:	4610      	mov	r0, r2
 80074e6:	f003 ffbc 	bl	800b462 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007508:	78fb      	ldrb	r3, [r7, #3]
 800750a:	f003 020f 	and.w	r2, r3, #15
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	429a      	cmp	r2, r3
 8007514:	d901      	bls.n	800751a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e040      	b.n	800759c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800751a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800751e:	2b00      	cmp	r3, #0
 8007520:	da0e      	bge.n	8007540 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007522:	78fb      	ldrb	r3, [r7, #3]
 8007524:	f003 0307 	and.w	r3, r3, #7
 8007528:	1c5a      	adds	r2, r3, #1
 800752a:	4613      	mov	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	00db      	lsls	r3, r3, #3
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	4413      	add	r3, r2
 8007536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2201      	movs	r2, #1
 800753c:	705a      	strb	r2, [r3, #1]
 800753e:	e00e      	b.n	800755e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	f003 0207 	and.w	r2, r3, #7
 8007546:	4613      	mov	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4413      	add	r3, r2
 800754c:	00db      	lsls	r3, r3, #3
 800754e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	4413      	add	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007564:	78fb      	ldrb	r3, [r7, #3]
 8007566:	f003 0307 	and.w	r3, r3, #7
 800756a:	b2da      	uxtb	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007576:	2b01      	cmp	r3, #1
 8007578:	d101      	bne.n	800757e <HAL_PCD_EP_ClrStall+0x82>
 800757a:	2302      	movs	r3, #2
 800757c:	e00e      	b.n	800759c <HAL_PCD_EP_ClrStall+0xa0>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68f9      	ldr	r1, [r7, #12]
 800758c:	4618      	mov	r0, r3
 800758e:	f003 fe85 	bl	800b29c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b08e      	sub	sp, #56	; 0x38
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80075ac:	e2df      	b.n	8007b6e <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80075b6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80075b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	f003 030f 	and.w	r3, r3, #15
 80075c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80075c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f040 8158 	bne.w	800787e <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80075ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80075d0:	f003 0310 	and.w	r3, r3, #16
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d152      	bne.n	800767e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80075e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e8:	81fb      	strh	r3, [r7, #14]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	89fb      	ldrh	r3, [r7, #14]
 80075f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3328      	adds	r3, #40	; 0x28
 8007600:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800760a:	b29b      	uxth	r3, r3
 800760c:	461a      	mov	r2, r3
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	00db      	lsls	r3, r3, #3
 8007614:	4413      	add	r3, r2
 8007616:	3302      	adds	r3, #2
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	6812      	ldr	r2, [r2, #0]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007624:	881b      	ldrh	r3, [r3, #0]
 8007626:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	695a      	ldr	r2, [r3, #20]
 8007632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007634:	69db      	ldr	r3, [r3, #28]
 8007636:	441a      	add	r2, r3
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800763c:	2100      	movs	r1, #0
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f005 fd0d 	bl	800d05e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 828e 	beq.w	8007b6e <PCD_EP_ISR_Handler+0x5ca>
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	2b00      	cmp	r3, #0
 8007658:	f040 8289 	bne.w	8007b6e <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007662:	b2db      	uxtb	r3, r3
 8007664:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007668:	b2da      	uxtb	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	b292      	uxth	r2, r2
 8007670:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800767c:	e277      	b.n	8007b6e <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007684:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800768e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007694:	2b00      	cmp	r3, #0
 8007696:	d034      	beq.n	8007702 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	461a      	mov	r2, r3
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	00db      	lsls	r3, r3, #3
 80076aa:	4413      	add	r3, r2
 80076ac:	3306      	adds	r3, #6
 80076ae:	005b      	lsls	r3, r3, #1
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	6812      	ldr	r2, [r2, #0]
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6818      	ldr	r0, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	f003 ff13 	bl	800b502 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80076e8:	4013      	ands	r3, r2
 80076ea:	823b      	strh	r3, [r7, #16]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	8a3a      	ldrh	r2, [r7, #16]
 80076f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076f6:	b292      	uxth	r2, r2
 80076f8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f005 fc82 	bl	800d004 <HAL_PCD_SetupStageCallback>
 8007700:	e235      	b.n	8007b6e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007702:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007706:	2b00      	cmp	r3, #0
 8007708:	f280 8231 	bge.w	8007b6e <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	b29a      	uxth	r2, r3
 8007714:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007718:	4013      	ands	r3, r2
 800771a:	83bb      	strh	r3, [r7, #28]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	8bba      	ldrh	r2, [r7, #28]
 8007722:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007726:	b292      	uxth	r2, r2
 8007728:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007732:	b29b      	uxth	r3, r3
 8007734:	461a      	mov	r2, r3
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	4413      	add	r3, r2
 800773e:	3306      	adds	r3, #6
 8007740:	005b      	lsls	r3, r3, #1
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	6812      	ldr	r2, [r2, #0]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800774c:	881b      	ldrh	r3, [r3, #0]
 800774e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d019      	beq.n	8007792 <PCD_EP_ISR_Handler+0x1ee>
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d015      	beq.n	8007792 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6818      	ldr	r0, [r3, #0]
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	6959      	ldr	r1, [r3, #20]
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007776:	b29b      	uxth	r3, r3
 8007778:	f003 fec3 	bl	800b502 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	695a      	ldr	r2, [r3, #20]
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	441a      	add	r2, r3
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007788:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800778a:	2100      	movs	r1, #0
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f005 fc4b 	bl	800d028 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	61bb      	str	r3, [r7, #24]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	461a      	mov	r2, r3
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	4413      	add	r3, r2
 80077a8:	61bb      	str	r3, [r7, #24]
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077b0:	617b      	str	r3, [r7, #20]
 80077b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d112      	bne.n	80077e0 <PCD_EP_ISR_Handler+0x23c>
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	b29b      	uxth	r3, r3
 80077c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	801a      	strh	r2, [r3, #0]
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	881b      	ldrh	r3, [r3, #0]
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077d8:	b29a      	uxth	r2, r3
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	801a      	strh	r2, [r3, #0]
 80077de:	e02f      	b.n	8007840 <PCD_EP_ISR_Handler+0x29c>
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	2b3e      	cmp	r3, #62	; 0x3e
 80077e6:	d813      	bhi.n	8007810 <PCD_EP_ISR_Handler+0x26c>
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	085b      	lsrs	r3, r3, #1
 80077ee:	633b      	str	r3, [r7, #48]	; 0x30
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	f003 0301 	and.w	r3, r3, #1
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <PCD_EP_ISR_Handler+0x25e>
 80077fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fe:	3301      	adds	r3, #1
 8007800:	633b      	str	r3, [r7, #48]	; 0x30
 8007802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007804:	b29b      	uxth	r3, r3
 8007806:	029b      	lsls	r3, r3, #10
 8007808:	b29a      	uxth	r2, r3
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	801a      	strh	r2, [r3, #0]
 800780e:	e017      	b.n	8007840 <PCD_EP_ISR_Handler+0x29c>
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	095b      	lsrs	r3, r3, #5
 8007816:	633b      	str	r3, [r7, #48]	; 0x30
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	f003 031f 	and.w	r3, r3, #31
 8007820:	2b00      	cmp	r3, #0
 8007822:	d102      	bne.n	800782a <PCD_EP_ISR_Handler+0x286>
 8007824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007826:	3b01      	subs	r3, #1
 8007828:	633b      	str	r3, [r7, #48]	; 0x30
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	b29b      	uxth	r3, r3
 800782e:	029b      	lsls	r3, r3, #10
 8007830:	b29b      	uxth	r3, r3
 8007832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800783a:	b29a      	uxth	r2, r3
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	b29b      	uxth	r3, r3
 8007848:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800784c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007850:	827b      	strh	r3, [r7, #18]
 8007852:	8a7b      	ldrh	r3, [r7, #18]
 8007854:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007858:	827b      	strh	r3, [r7, #18]
 800785a:	8a7b      	ldrh	r3, [r7, #18]
 800785c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007860:	827b      	strh	r3, [r7, #18]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	8a7b      	ldrh	r3, [r7, #18]
 8007868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800786c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007878:	b29b      	uxth	r3, r3
 800787a:	8013      	strh	r3, [r2, #0]
 800787c:	e177      	b.n	8007b6e <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	461a      	mov	r2, r3
 8007884:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007890:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007894:	2b00      	cmp	r3, #0
 8007896:	f280 80ea 	bge.w	8007a6e <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	881b      	ldrh	r3, [r3, #0]
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80078b0:	4013      	ands	r3, r2
 80078b2:	853b      	strh	r3, [r7, #40]	; 0x28
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	461a      	mov	r2, r3
 80078ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4413      	add	r3, r2
 80078c2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80078c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80078c8:	b292      	uxth	r2, r2
 80078ca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80078cc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80078d0:	4613      	mov	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4413      	add	r3, r2
 80078d6:	00db      	lsls	r3, r3, #3
 80078d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	4413      	add	r3, r2
 80078e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	7b1b      	ldrb	r3, [r3, #12]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d122      	bne.n	8007930 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	461a      	mov	r2, r3
 80078f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	4413      	add	r3, r2
 80078fe:	3306      	adds	r3, #6
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	6812      	ldr	r2, [r2, #0]
 8007906:	4413      	add	r3, r2
 8007908:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800790c:	881b      	ldrh	r3, [r3, #0]
 800790e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007912:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8007914:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007916:	2b00      	cmp	r3, #0
 8007918:	f000 8087 	beq.w	8007a2a <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6818      	ldr	r0, [r3, #0]
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	6959      	ldr	r1, [r3, #20]
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	88da      	ldrh	r2, [r3, #6]
 8007928:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800792a:	f003 fdea 	bl	800b502 <USB_ReadPMA>
 800792e:	e07c      	b.n	8007a2a <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	78db      	ldrb	r3, [r3, #3]
 8007934:	2b02      	cmp	r3, #2
 8007936:	d108      	bne.n	800794a <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007938:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800793a:	461a      	mov	r2, r3
 800793c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f923 	bl	8007b8a <HAL_PCD_EP_DB_Receive>
 8007944:	4603      	mov	r3, r0
 8007946:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007948:	e06f      	b.n	8007a2a <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	881b      	ldrh	r3, [r3, #0]
 800795a:	b29b      	uxth	r3, r3
 800795c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007964:	847b      	strh	r3, [r7, #34]	; 0x22
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	461a      	mov	r2, r3
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	441a      	add	r2, r3
 8007974:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800797a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800797e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007982:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007986:	b29b      	uxth	r3, r3
 8007988:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	461a      	mov	r2, r3
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	b29b      	uxth	r3, r3
 800799c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d021      	beq.n	80079e8 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	461a      	mov	r2, r3
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	00db      	lsls	r3, r3, #3
 80079b6:	4413      	add	r3, r2
 80079b8:	3302      	adds	r3, #2
 80079ba:	005b      	lsls	r3, r3, #1
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	6812      	ldr	r2, [r2, #0]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079c6:	881b      	ldrh	r3, [r3, #0]
 80079c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079cc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80079ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d02a      	beq.n	8007a2a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6818      	ldr	r0, [r3, #0]
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	6959      	ldr	r1, [r3, #20]
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	891a      	ldrh	r2, [r3, #8]
 80079e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80079e2:	f003 fd8e 	bl	800b502 <USB_ReadPMA>
 80079e6:	e020      	b.n	8007a2a <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	461a      	mov	r2, r3
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	00db      	lsls	r3, r3, #3
 80079fa:	4413      	add	r3, r2
 80079fc:	3306      	adds	r3, #6
 80079fe:	005b      	lsls	r3, r3, #1
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	6812      	ldr	r2, [r2, #0]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a10:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8007a12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d008      	beq.n	8007a2a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6818      	ldr	r0, [r3, #0]
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1e:	6959      	ldr	r1, [r3, #20]
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	895a      	ldrh	r2, [r3, #10]
 8007a24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a26:	f003 fd6c 	bl	800b502 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	69da      	ldr	r2, [r3, #28]
 8007a2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a30:	441a      	add	r2, r3
 8007a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a34:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a38:	695a      	ldr	r2, [r3, #20]
 8007a3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a3c:	441a      	add	r2, r3
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a40:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d004      	beq.n	8007a54 <PCD_EP_ISR_Handler+0x4b0>
 8007a4a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d206      	bcs.n	8007a62 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f005 fae4 	bl	800d028 <HAL_PCD_DataOutStageCallback>
 8007a60:	e005      	b.n	8007a6e <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f002 faa7 	bl	8009fbc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007a6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d07a      	beq.n	8007b6e <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8007a78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007a7c:	1c5a      	adds	r2, r3, #1
 8007a7e:	4613      	mov	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	00db      	lsls	r3, r3, #3
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	4413      	add	r3, r2
 8007a8a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	461a      	mov	r2, r3
 8007a92:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa6:	843b      	strh	r3, [r7, #32]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	461a      	mov	r2, r3
 8007aae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	441a      	add	r2, r3
 8007ab6:	8c3b      	ldrh	r3, [r7, #32]
 8007ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	78db      	ldrb	r3, [r3, #3]
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d108      	bne.n	8007ade <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d146      	bne.n	8007b62 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8007ad4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d141      	bne.n	8007b62 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	461a      	mov	r2, r3
 8007aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	4413      	add	r3, r2
 8007af2:	3302      	adds	r3, #2
 8007af4:	005b      	lsls	r3, r3, #1
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	6812      	ldr	r2, [r2, #0]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b00:	881b      	ldrh	r3, [r3, #0]
 8007b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b06:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	699a      	ldr	r2, [r3, #24]
 8007b0c:	8bfb      	ldrh	r3, [r7, #30]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d906      	bls.n	8007b20 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8007b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b14:	699a      	ldr	r2, [r3, #24]
 8007b16:	8bfb      	ldrh	r3, [r7, #30]
 8007b18:	1ad2      	subs	r2, r2, r3
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	619a      	str	r2, [r3, #24]
 8007b1e:	e002      	b.n	8007b26 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	2200      	movs	r2, #0
 8007b24:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d106      	bne.n	8007b3c <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	4619      	mov	r1, r3
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f005 fa92 	bl	800d05e <HAL_PCD_DataInStageCallback>
 8007b3a:	e018      	b.n	8007b6e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	695a      	ldr	r2, [r3, #20]
 8007b40:	8bfb      	ldrh	r3, [r7, #30]
 8007b42:	441a      	add	r2, r3
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8007b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4a:	69da      	ldr	r2, [r3, #28]
 8007b4c:	8bfb      	ldrh	r3, [r7, #30]
 8007b4e:	441a      	add	r2, r3
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f002 fa2e 	bl	8009fbc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8007b60:	e005      	b.n	8007b6e <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007b62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007b64:	461a      	mov	r2, r3
 8007b66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f91b 	bl	8007da4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	b21b      	sxth	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f6ff ad17 	blt.w	80075ae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3738      	adds	r7, #56	; 0x38
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b088      	sub	sp, #32
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	60f8      	str	r0, [r7, #12]
 8007b92:	60b9      	str	r1, [r7, #8]
 8007b94:	4613      	mov	r3, r2
 8007b96:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007b98:	88fb      	ldrh	r3, [r7, #6]
 8007b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d07e      	beq.n	8007ca0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	461a      	mov	r2, r3
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	00db      	lsls	r3, r3, #3
 8007bb4:	4413      	add	r3, r2
 8007bb6:	3302      	adds	r3, #2
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	6812      	ldr	r2, [r2, #0]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	699a      	ldr	r2, [r3, #24]
 8007bd0:	8b7b      	ldrh	r3, [r7, #26]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d306      	bcc.n	8007be4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	699a      	ldr	r2, [r3, #24]
 8007bda:	8b7b      	ldrh	r3, [r7, #26]
 8007bdc:	1ad2      	subs	r2, r2, r3
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	619a      	str	r2, [r3, #24]
 8007be2:	e002      	b.n	8007bea <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	2200      	movs	r2, #0
 8007be8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d123      	bne.n	8007c3a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0c:	833b      	strh	r3, [r7, #24]
 8007c0e:	8b3b      	ldrh	r3, [r7, #24]
 8007c10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c14:	833b      	strh	r3, [r7, #24]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	441a      	add	r2, r3
 8007c24:	8b3b      	ldrh	r3, [r7, #24]
 8007c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007c3a:	88fb      	ldrh	r3, [r7, #6]
 8007c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d01f      	beq.n	8007c84 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c5e:	82fb      	strh	r3, [r7, #22]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	461a      	mov	r2, r3
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	441a      	add	r2, r3
 8007c6e:	8afb      	ldrh	r3, [r7, #22]
 8007c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007c84:	8b7b      	ldrh	r3, [r7, #26]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 8087 	beq.w	8007d9a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6818      	ldr	r0, [r3, #0]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	6959      	ldr	r1, [r3, #20]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	891a      	ldrh	r2, [r3, #8]
 8007c98:	8b7b      	ldrh	r3, [r7, #26]
 8007c9a:	f003 fc32 	bl	800b502 <USB_ReadPMA>
 8007c9e:	e07c      	b.n	8007d9a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	461a      	mov	r2, r3
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	00db      	lsls	r3, r3, #3
 8007cb2:	4413      	add	r3, r2
 8007cb4:	3306      	adds	r3, #6
 8007cb6:	005b      	lsls	r3, r3, #1
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	6812      	ldr	r2, [r2, #0]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cc2:	881b      	ldrh	r3, [r3, #0]
 8007cc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cc8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	699a      	ldr	r2, [r3, #24]
 8007cce:	8b7b      	ldrh	r3, [r7, #26]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d306      	bcc.n	8007ce2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	699a      	ldr	r2, [r3, #24]
 8007cd8:	8b7b      	ldrh	r3, [r7, #26]
 8007cda:	1ad2      	subs	r2, r2, r3
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	619a      	str	r2, [r3, #24]
 8007ce0:	e002      	b.n	8007ce8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d123      	bne.n	8007d38 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	881b      	ldrh	r3, [r3, #0]
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d0a:	83fb      	strh	r3, [r7, #30]
 8007d0c:	8bfb      	ldrh	r3, [r7, #30]
 8007d0e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d12:	83fb      	strh	r3, [r7, #30]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	441a      	add	r2, r3
 8007d22:	8bfb      	ldrh	r3, [r7, #30]
 8007d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007d38:	88fb      	ldrh	r3, [r7, #6]
 8007d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d11f      	bne.n	8007d82 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	461a      	mov	r2, r3
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	881b      	ldrh	r3, [r3, #0]
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d5c:	83bb      	strh	r3, [r7, #28]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	461a      	mov	r2, r3
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	441a      	add	r2, r3
 8007d6c:	8bbb      	ldrh	r3, [r7, #28]
 8007d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007d82:	8b7b      	ldrh	r3, [r7, #26]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d008      	beq.n	8007d9a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6818      	ldr	r0, [r3, #0]
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	6959      	ldr	r1, [r3, #20]
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	895a      	ldrh	r2, [r3, #10]
 8007d94:	8b7b      	ldrh	r3, [r7, #26]
 8007d96:	f003 fbb4 	bl	800b502 <USB_ReadPMA>
    }
  }

  return count;
 8007d9a:	8b7b      	ldrh	r3, [r7, #26]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3720      	adds	r7, #32
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b094      	sub	sp, #80	; 0x50
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	4613      	mov	r3, r2
 8007db0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007db2:	88fb      	ldrh	r3, [r7, #6]
 8007db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 8138 	beq.w	800802e <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	461a      	mov	r2, r3
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	00db      	lsls	r3, r3, #3
 8007dd0:	4413      	add	r3, r2
 8007dd2:	3302      	adds	r3, #2
 8007dd4:	005b      	lsls	r3, r3, #1
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	6812      	ldr	r2, [r2, #0]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007de6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	699a      	ldr	r2, [r3, #24]
 8007dee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d907      	bls.n	8007e06 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	699a      	ldr	r2, [r3, #24]
 8007dfa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007dfe:	1ad2      	subs	r2, r2, r3
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	619a      	str	r2, [r3, #24]
 8007e04:	e002      	b.n	8007e0c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d12c      	bne.n	8007e6e <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	4619      	mov	r1, r3
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f005 f91f 	bl	800d05e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007e20:	88fb      	ldrh	r3, [r7, #6]
 8007e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 823a 	beq.w	80082a0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	461a      	mov	r2, r3
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e46:	82fb      	strh	r3, [r7, #22]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	441a      	add	r2, r3
 8007e56:	8afb      	ldrh	r3, [r7, #22]
 8007e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	8013      	strh	r3, [r2, #0]
 8007e6c:	e218      	b.n	80082a0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007e6e:	88fb      	ldrh	r3, [r7, #6]
 8007e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d01f      	beq.n	8007eb8 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	881b      	ldrh	r3, [r3, #0]
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e92:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	441a      	add	r2, r3
 8007ea2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	f040 81ee 	bne.w	80082a0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	695a      	ldr	r2, [r3, #20]
 8007ec8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007ecc:	441a      	add	r2, r3
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	69da      	ldr	r2, [r3, #28]
 8007ed6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007eda:	441a      	add	r2, r3
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	6a1a      	ldr	r2, [r3, #32]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d309      	bcc.n	8007f00 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	6a1a      	ldr	r2, [r3, #32]
 8007ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ef8:	1ad2      	subs	r2, r2, r3
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	621a      	str	r2, [r3, #32]
 8007efe:	e015      	b.n	8007f2c <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	6a1b      	ldr	r3, [r3, #32]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d107      	bne.n	8007f18 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8007f08:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007f0c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007f16:	e009      	b.n	8007f2c <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	6a1b      	ldr	r3, [r3, #32]
 8007f24:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	785b      	ldrb	r3, [r3, #1]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d155      	bne.n	8007fe0 <HAL_PCD_EP_DB_Transmit+0x23c>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	61fb      	str	r3, [r7, #28]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	461a      	mov	r2, r3
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	4413      	add	r3, r2
 8007f4a:	61fb      	str	r3, [r7, #28]
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	011a      	lsls	r2, r3, #4
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	4413      	add	r3, r2
 8007f56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f5a:	61bb      	str	r3, [r7, #24]
 8007f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d112      	bne.n	8007f88 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	881b      	ldrh	r3, [r3, #0]
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	801a      	strh	r2, [r3, #0]
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	881b      	ldrh	r3, [r3, #0]
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	801a      	strh	r2, [r3, #0]
 8007f86:	e047      	b.n	8008018 <HAL_PCD_EP_DB_Transmit+0x274>
 8007f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f8a:	2b3e      	cmp	r3, #62	; 0x3e
 8007f8c:	d811      	bhi.n	8007fb2 <HAL_PCD_EP_DB_Transmit+0x20e>
 8007f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f90:	085b      	lsrs	r3, r3, #1
 8007f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d002      	beq.n	8007fa4 <HAL_PCD_EP_DB_Transmit+0x200>
 8007f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	029b      	lsls	r3, r3, #10
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	801a      	strh	r2, [r3, #0]
 8007fb0:	e032      	b.n	8008018 <HAL_PCD_EP_DB_Transmit+0x274>
 8007fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fb4:	095b      	lsrs	r3, r3, #5
 8007fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fba:	f003 031f 	and.w	r3, r3, #31
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d102      	bne.n	8007fc8 <HAL_PCD_EP_DB_Transmit+0x224>
 8007fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	029b      	lsls	r3, r3, #10
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	801a      	strh	r2, [r3, #0]
 8007fde:	e01b      	b.n	8008018 <HAL_PCD_EP_DB_Transmit+0x274>
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	785b      	ldrb	r3, [r3, #1]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d117      	bne.n	8008018 <HAL_PCD_EP_DB_Transmit+0x274>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	627b      	str	r3, [r7, #36]	; 0x24
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffc:	4413      	add	r3, r2
 8007ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	011a      	lsls	r2, r3, #4
 8008006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008008:	4413      	add	r3, r2
 800800a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800800e:	623b      	str	r3, [r7, #32]
 8008010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008012:	b29a      	uxth	r2, r3
 8008014:	6a3b      	ldr	r3, [r7, #32]
 8008016:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6818      	ldr	r0, [r3, #0]
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	6959      	ldr	r1, [r3, #20]
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	891a      	ldrh	r2, [r3, #8]
 8008024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008026:	b29b      	uxth	r3, r3
 8008028:	f003 fa26 	bl	800b478 <USB_WritePMA>
 800802c:	e138      	b.n	80082a0 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008036:	b29b      	uxth	r3, r3
 8008038:	461a      	mov	r2, r3
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	00db      	lsls	r3, r3, #3
 8008040:	4413      	add	r3, r2
 8008042:	3306      	adds	r3, #6
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	6812      	ldr	r2, [r2, #0]
 800804a:	4413      	add	r3, r2
 800804c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008050:	881b      	ldrh	r3, [r3, #0]
 8008052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008056:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	699a      	ldr	r2, [r3, #24]
 800805e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008062:	429a      	cmp	r2, r3
 8008064:	d307      	bcc.n	8008076 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	699a      	ldr	r2, [r3, #24]
 800806a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800806e:	1ad2      	subs	r2, r2, r3
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	619a      	str	r2, [r3, #24]
 8008074:	e002      	b.n	800807c <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2200      	movs	r2, #0
 800807a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d12e      	bne.n	80080e2 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	4619      	mov	r1, r3
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f004 ffe7 	bl	800d05e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008090:	88fb      	ldrh	r3, [r7, #6]
 8008092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008096:	2b00      	cmp	r3, #0
 8008098:	f040 8102 	bne.w	80082a0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	461a      	mov	r2, r3
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080b6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	441a      	add	r2, r3
 80080c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80080cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080dc:	b29b      	uxth	r3, r3
 80080de:	8013      	strh	r3, [r2, #0]
 80080e0:	e0de      	b.n	80082a0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80080e2:	88fb      	ldrh	r3, [r7, #6]
 80080e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d11f      	bne.n	800812c <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	461a      	mov	r2, r3
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008106:	867b      	strh	r3, [r7, #50]	; 0x32
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	461a      	mov	r2, r3
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	441a      	add	r2, r3
 8008116:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800811c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008120:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008128:	b29b      	uxth	r3, r3
 800812a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008132:	2b01      	cmp	r3, #1
 8008134:	f040 80b4 	bne.w	80082a0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	695a      	ldr	r2, [r3, #20]
 800813c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008140:	441a      	add	r2, r3
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	69da      	ldr	r2, [r3, #28]
 800814a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800814e:	441a      	add	r2, r3
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	6a1a      	ldr	r2, [r3, #32]
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	429a      	cmp	r2, r3
 800815e:	d309      	bcc.n	8008174 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	6a1a      	ldr	r2, [r3, #32]
 800816a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800816c:	1ad2      	subs	r2, r2, r3
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	621a      	str	r2, [r3, #32]
 8008172:	e015      	b.n	80081a0 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	6a1b      	ldr	r3, [r3, #32]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d107      	bne.n	800818c <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 800817c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008180:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800818a:	e009      	b.n	80081a0 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	6a1b      	ldr	r3, [r3, #32]
 8008190:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	2200      	movs	r2, #0
 8008196:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	643b      	str	r3, [r7, #64]	; 0x40
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	785b      	ldrb	r3, [r3, #1]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d155      	bne.n	800825a <HAL_PCD_EP_DB_Transmit+0x4b6>
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081bc:	b29b      	uxth	r3, r3
 80081be:	461a      	mov	r2, r3
 80081c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c2:	4413      	add	r3, r2
 80081c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	011a      	lsls	r2, r3, #4
 80081cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ce:	4413      	add	r3, r2
 80081d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081d4:	637b      	str	r3, [r7, #52]	; 0x34
 80081d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d112      	bne.n	8008202 <HAL_PCD_EP_DB_Transmit+0x45e>
 80081dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081de:	881b      	ldrh	r3, [r3, #0]
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ea:	801a      	strh	r2, [r3, #0]
 80081ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081fe:	801a      	strh	r2, [r3, #0]
 8008200:	e044      	b.n	800828c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8008202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008204:	2b3e      	cmp	r3, #62	; 0x3e
 8008206:	d811      	bhi.n	800822c <HAL_PCD_EP_DB_Transmit+0x488>
 8008208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800820a:	085b      	lsrs	r3, r3, #1
 800820c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800820e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008210:	f003 0301 	and.w	r3, r3, #1
 8008214:	2b00      	cmp	r3, #0
 8008216:	d002      	beq.n	800821e <HAL_PCD_EP_DB_Transmit+0x47a>
 8008218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800821a:	3301      	adds	r3, #1
 800821c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800821e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008220:	b29b      	uxth	r3, r3
 8008222:	029b      	lsls	r3, r3, #10
 8008224:	b29a      	uxth	r2, r3
 8008226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008228:	801a      	strh	r2, [r3, #0]
 800822a:	e02f      	b.n	800828c <HAL_PCD_EP_DB_Transmit+0x4e8>
 800822c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800822e:	095b      	lsrs	r3, r3, #5
 8008230:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008234:	f003 031f 	and.w	r3, r3, #31
 8008238:	2b00      	cmp	r3, #0
 800823a:	d102      	bne.n	8008242 <HAL_PCD_EP_DB_Transmit+0x49e>
 800823c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800823e:	3b01      	subs	r3, #1
 8008240:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008244:	b29b      	uxth	r3, r3
 8008246:	029b      	lsls	r3, r3, #10
 8008248:	b29b      	uxth	r3, r3
 800824a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800824e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008252:	b29a      	uxth	r2, r3
 8008254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008256:	801a      	strh	r2, [r3, #0]
 8008258:	e018      	b.n	800828c <HAL_PCD_EP_DB_Transmit+0x4e8>
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	785b      	ldrb	r3, [r3, #1]
 800825e:	2b01      	cmp	r3, #1
 8008260:	d114      	bne.n	800828c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800826a:	b29b      	uxth	r3, r3
 800826c:	461a      	mov	r2, r3
 800826e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008270:	4413      	add	r3, r2
 8008272:	643b      	str	r3, [r7, #64]	; 0x40
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	011a      	lsls	r2, r3, #4
 800827a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800827c:	4413      	add	r3, r2
 800827e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008286:	b29a      	uxth	r2, r3
 8008288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800828a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6818      	ldr	r0, [r3, #0]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	6959      	ldr	r1, [r3, #20]
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	895a      	ldrh	r2, [r3, #10]
 8008298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800829a:	b29b      	uxth	r3, r3
 800829c:	f003 f8ec 	bl	800b478 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	461a      	mov	r2, r3
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4413      	add	r3, r2
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ba:	82bb      	strh	r3, [r7, #20]
 80082bc:	8abb      	ldrh	r3, [r7, #20]
 80082be:	f083 0310 	eor.w	r3, r3, #16
 80082c2:	82bb      	strh	r3, [r7, #20]
 80082c4:	8abb      	ldrh	r3, [r7, #20]
 80082c6:	f083 0320 	eor.w	r3, r3, #32
 80082ca:	82bb      	strh	r3, [r7, #20]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	461a      	mov	r2, r3
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	441a      	add	r2, r3
 80082da:	8abb      	ldrh	r3, [r7, #20]
 80082dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3750      	adds	r7, #80	; 0x50
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80082fa:	b480      	push	{r7}
 80082fc:	b087      	sub	sp, #28
 80082fe:	af00      	add	r7, sp, #0
 8008300:	60f8      	str	r0, [r7, #12]
 8008302:	607b      	str	r3, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	817b      	strh	r3, [r7, #10]
 8008308:	4613      	mov	r3, r2
 800830a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800830c:	897b      	ldrh	r3, [r7, #10]
 800830e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008312:	b29b      	uxth	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00b      	beq.n	8008330 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008318:	897b      	ldrh	r3, [r7, #10]
 800831a:	f003 0307 	and.w	r3, r3, #7
 800831e:	1c5a      	adds	r2, r3, #1
 8008320:	4613      	mov	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4413      	add	r3, r2
 8008326:	00db      	lsls	r3, r3, #3
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	4413      	add	r3, r2
 800832c:	617b      	str	r3, [r7, #20]
 800832e:	e009      	b.n	8008344 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008330:	897a      	ldrh	r2, [r7, #10]
 8008332:	4613      	mov	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	00db      	lsls	r3, r3, #3
 800833a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	4413      	add	r3, r2
 8008342:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008344:	893b      	ldrh	r3, [r7, #8]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d107      	bne.n	800835a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2200      	movs	r2, #0
 800834e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	b29a      	uxth	r2, r3
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	80da      	strh	r2, [r3, #6]
 8008358:	e00b      	b.n	8008372 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	2201      	movs	r2, #1
 800835e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	b29a      	uxth	r2, r3
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	0c1b      	lsrs	r3, r3, #16
 800836c:	b29a      	uxth	r2, r3
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	371c      	adds	r7, #28
 8008378:	46bd      	mov	sp, r7
 800837a:	bc80      	pop	{r7}
 800837c:	4770      	bx	lr
	...

08008380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d101      	bne.n	8008392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e26c      	b.n	800886c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 8087 	beq.w	80084ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80083a0:	4b92      	ldr	r3, [pc, #584]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	f003 030c 	and.w	r3, r3, #12
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	d00c      	beq.n	80083c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80083ac:	4b8f      	ldr	r3, [pc, #572]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	f003 030c 	and.w	r3, r3, #12
 80083b4:	2b08      	cmp	r3, #8
 80083b6:	d112      	bne.n	80083de <HAL_RCC_OscConfig+0x5e>
 80083b8:	4b8c      	ldr	r3, [pc, #560]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083c4:	d10b      	bne.n	80083de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083c6:	4b89      	ldr	r3, [pc, #548]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d06c      	beq.n	80084ac <HAL_RCC_OscConfig+0x12c>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d168      	bne.n	80084ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e246      	b.n	800886c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083e6:	d106      	bne.n	80083f6 <HAL_RCC_OscConfig+0x76>
 80083e8:	4b80      	ldr	r3, [pc, #512]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a7f      	ldr	r2, [pc, #508]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 80083ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083f2:	6013      	str	r3, [r2, #0]
 80083f4:	e02e      	b.n	8008454 <HAL_RCC_OscConfig+0xd4>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10c      	bne.n	8008418 <HAL_RCC_OscConfig+0x98>
 80083fe:	4b7b      	ldr	r3, [pc, #492]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a7a      	ldr	r2, [pc, #488]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 8008404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008408:	6013      	str	r3, [r2, #0]
 800840a:	4b78      	ldr	r3, [pc, #480]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a77      	ldr	r2, [pc, #476]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 8008410:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008414:	6013      	str	r3, [r2, #0]
 8008416:	e01d      	b.n	8008454 <HAL_RCC_OscConfig+0xd4>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008420:	d10c      	bne.n	800843c <HAL_RCC_OscConfig+0xbc>
 8008422:	4b72      	ldr	r3, [pc, #456]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a71      	ldr	r2, [pc, #452]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 8008428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800842c:	6013      	str	r3, [r2, #0]
 800842e:	4b6f      	ldr	r3, [pc, #444]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a6e      	ldr	r2, [pc, #440]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 8008434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008438:	6013      	str	r3, [r2, #0]
 800843a:	e00b      	b.n	8008454 <HAL_RCC_OscConfig+0xd4>
 800843c:	4b6b      	ldr	r3, [pc, #428]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a6a      	ldr	r2, [pc, #424]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 8008442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008446:	6013      	str	r3, [r2, #0]
 8008448:	4b68      	ldr	r3, [pc, #416]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a67      	ldr	r2, [pc, #412]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 800844e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008452:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d013      	beq.n	8008484 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800845c:	f7fb fee6 	bl	800422c <HAL_GetTick>
 8008460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008462:	e008      	b.n	8008476 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008464:	f7fb fee2 	bl	800422c <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	2b64      	cmp	r3, #100	; 0x64
 8008470:	d901      	bls.n	8008476 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e1fa      	b.n	800886c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008476:	4b5d      	ldr	r3, [pc, #372]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d0f0      	beq.n	8008464 <HAL_RCC_OscConfig+0xe4>
 8008482:	e014      	b.n	80084ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008484:	f7fb fed2 	bl	800422c <HAL_GetTick>
 8008488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800848a:	e008      	b.n	800849e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800848c:	f7fb fece 	bl	800422c <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	2b64      	cmp	r3, #100	; 0x64
 8008498:	d901      	bls.n	800849e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e1e6      	b.n	800886c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800849e:	4b53      	ldr	r3, [pc, #332]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1f0      	bne.n	800848c <HAL_RCC_OscConfig+0x10c>
 80084aa:	e000      	b.n	80084ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 0302 	and.w	r3, r3, #2
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d063      	beq.n	8008582 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80084ba:	4b4c      	ldr	r3, [pc, #304]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	f003 030c 	and.w	r3, r3, #12
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00b      	beq.n	80084de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80084c6:	4b49      	ldr	r3, [pc, #292]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f003 030c 	and.w	r3, r3, #12
 80084ce:	2b08      	cmp	r3, #8
 80084d0:	d11c      	bne.n	800850c <HAL_RCC_OscConfig+0x18c>
 80084d2:	4b46      	ldr	r3, [pc, #280]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d116      	bne.n	800850c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084de:	4b43      	ldr	r3, [pc, #268]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 0302 	and.w	r3, r3, #2
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d005      	beq.n	80084f6 <HAL_RCC_OscConfig+0x176>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d001      	beq.n	80084f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e1ba      	b.n	800886c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084f6:	4b3d      	ldr	r3, [pc, #244]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	00db      	lsls	r3, r3, #3
 8008504:	4939      	ldr	r1, [pc, #228]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 8008506:	4313      	orrs	r3, r2
 8008508:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800850a:	e03a      	b.n	8008582 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d020      	beq.n	8008556 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008514:	4b36      	ldr	r3, [pc, #216]	; (80085f0 <HAL_RCC_OscConfig+0x270>)
 8008516:	2201      	movs	r2, #1
 8008518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800851a:	f7fb fe87 	bl	800422c <HAL_GetTick>
 800851e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008520:	e008      	b.n	8008534 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008522:	f7fb fe83 	bl	800422c <HAL_GetTick>
 8008526:	4602      	mov	r2, r0
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	2b02      	cmp	r3, #2
 800852e:	d901      	bls.n	8008534 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008530:	2303      	movs	r3, #3
 8008532:	e19b      	b.n	800886c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008534:	4b2d      	ldr	r3, [pc, #180]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 0302 	and.w	r3, r3, #2
 800853c:	2b00      	cmp	r3, #0
 800853e:	d0f0      	beq.n	8008522 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008540:	4b2a      	ldr	r3, [pc, #168]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	695b      	ldr	r3, [r3, #20]
 800854c:	00db      	lsls	r3, r3, #3
 800854e:	4927      	ldr	r1, [pc, #156]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 8008550:	4313      	orrs	r3, r2
 8008552:	600b      	str	r3, [r1, #0]
 8008554:	e015      	b.n	8008582 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008556:	4b26      	ldr	r3, [pc, #152]	; (80085f0 <HAL_RCC_OscConfig+0x270>)
 8008558:	2200      	movs	r2, #0
 800855a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800855c:	f7fb fe66 	bl	800422c <HAL_GetTick>
 8008560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008562:	e008      	b.n	8008576 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008564:	f7fb fe62 	bl	800422c <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	2b02      	cmp	r3, #2
 8008570:	d901      	bls.n	8008576 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e17a      	b.n	800886c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008576:	4b1d      	ldr	r3, [pc, #116]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0302 	and.w	r3, r3, #2
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1f0      	bne.n	8008564 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 0308 	and.w	r3, r3, #8
 800858a:	2b00      	cmp	r3, #0
 800858c:	d03a      	beq.n	8008604 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d019      	beq.n	80085ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008596:	4b17      	ldr	r3, [pc, #92]	; (80085f4 <HAL_RCC_OscConfig+0x274>)
 8008598:	2201      	movs	r2, #1
 800859a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800859c:	f7fb fe46 	bl	800422c <HAL_GetTick>
 80085a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085a2:	e008      	b.n	80085b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085a4:	f7fb fe42 	bl	800422c <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d901      	bls.n	80085b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e15a      	b.n	800886c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085b6:	4b0d      	ldr	r3, [pc, #52]	; (80085ec <HAL_RCC_OscConfig+0x26c>)
 80085b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ba:	f003 0302 	and.w	r3, r3, #2
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d0f0      	beq.n	80085a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80085c2:	2001      	movs	r0, #1
 80085c4:	f000 fad8 	bl	8008b78 <RCC_Delay>
 80085c8:	e01c      	b.n	8008604 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085ca:	4b0a      	ldr	r3, [pc, #40]	; (80085f4 <HAL_RCC_OscConfig+0x274>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085d0:	f7fb fe2c 	bl	800422c <HAL_GetTick>
 80085d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085d6:	e00f      	b.n	80085f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085d8:	f7fb fe28 	bl	800422c <HAL_GetTick>
 80085dc:	4602      	mov	r2, r0
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d908      	bls.n	80085f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e140      	b.n	800886c <HAL_RCC_OscConfig+0x4ec>
 80085ea:	bf00      	nop
 80085ec:	40021000 	.word	0x40021000
 80085f0:	42420000 	.word	0x42420000
 80085f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085f8:	4b9e      	ldr	r3, [pc, #632]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 80085fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fc:	f003 0302 	and.w	r3, r3, #2
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1e9      	bne.n	80085d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0304 	and.w	r3, r3, #4
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 80a6 	beq.w	800875e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008612:	2300      	movs	r3, #0
 8008614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008616:	4b97      	ldr	r3, [pc, #604]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10d      	bne.n	800863e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008622:	4b94      	ldr	r3, [pc, #592]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 8008624:	69db      	ldr	r3, [r3, #28]
 8008626:	4a93      	ldr	r2, [pc, #588]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 8008628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800862c:	61d3      	str	r3, [r2, #28]
 800862e:	4b91      	ldr	r3, [pc, #580]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 8008630:	69db      	ldr	r3, [r3, #28]
 8008632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008636:	60bb      	str	r3, [r7, #8]
 8008638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800863a:	2301      	movs	r3, #1
 800863c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800863e:	4b8e      	ldr	r3, [pc, #568]	; (8008878 <HAL_RCC_OscConfig+0x4f8>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008646:	2b00      	cmp	r3, #0
 8008648:	d118      	bne.n	800867c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800864a:	4b8b      	ldr	r3, [pc, #556]	; (8008878 <HAL_RCC_OscConfig+0x4f8>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a8a      	ldr	r2, [pc, #552]	; (8008878 <HAL_RCC_OscConfig+0x4f8>)
 8008650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008656:	f7fb fde9 	bl	800422c <HAL_GetTick>
 800865a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800865c:	e008      	b.n	8008670 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800865e:	f7fb fde5 	bl	800422c <HAL_GetTick>
 8008662:	4602      	mov	r2, r0
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	2b64      	cmp	r3, #100	; 0x64
 800866a:	d901      	bls.n	8008670 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e0fd      	b.n	800886c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008670:	4b81      	ldr	r3, [pc, #516]	; (8008878 <HAL_RCC_OscConfig+0x4f8>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008678:	2b00      	cmp	r3, #0
 800867a:	d0f0      	beq.n	800865e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d106      	bne.n	8008692 <HAL_RCC_OscConfig+0x312>
 8008684:	4b7b      	ldr	r3, [pc, #492]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 8008686:	6a1b      	ldr	r3, [r3, #32]
 8008688:	4a7a      	ldr	r2, [pc, #488]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 800868a:	f043 0301 	orr.w	r3, r3, #1
 800868e:	6213      	str	r3, [r2, #32]
 8008690:	e02d      	b.n	80086ee <HAL_RCC_OscConfig+0x36e>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10c      	bne.n	80086b4 <HAL_RCC_OscConfig+0x334>
 800869a:	4b76      	ldr	r3, [pc, #472]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	4a75      	ldr	r2, [pc, #468]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 80086a0:	f023 0301 	bic.w	r3, r3, #1
 80086a4:	6213      	str	r3, [r2, #32]
 80086a6:	4b73      	ldr	r3, [pc, #460]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	4a72      	ldr	r2, [pc, #456]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 80086ac:	f023 0304 	bic.w	r3, r3, #4
 80086b0:	6213      	str	r3, [r2, #32]
 80086b2:	e01c      	b.n	80086ee <HAL_RCC_OscConfig+0x36e>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	2b05      	cmp	r3, #5
 80086ba:	d10c      	bne.n	80086d6 <HAL_RCC_OscConfig+0x356>
 80086bc:	4b6d      	ldr	r3, [pc, #436]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 80086be:	6a1b      	ldr	r3, [r3, #32]
 80086c0:	4a6c      	ldr	r2, [pc, #432]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 80086c2:	f043 0304 	orr.w	r3, r3, #4
 80086c6:	6213      	str	r3, [r2, #32]
 80086c8:	4b6a      	ldr	r3, [pc, #424]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 80086ca:	6a1b      	ldr	r3, [r3, #32]
 80086cc:	4a69      	ldr	r2, [pc, #420]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 80086ce:	f043 0301 	orr.w	r3, r3, #1
 80086d2:	6213      	str	r3, [r2, #32]
 80086d4:	e00b      	b.n	80086ee <HAL_RCC_OscConfig+0x36e>
 80086d6:	4b67      	ldr	r3, [pc, #412]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	4a66      	ldr	r2, [pc, #408]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 80086dc:	f023 0301 	bic.w	r3, r3, #1
 80086e0:	6213      	str	r3, [r2, #32]
 80086e2:	4b64      	ldr	r3, [pc, #400]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	4a63      	ldr	r2, [pc, #396]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 80086e8:	f023 0304 	bic.w	r3, r3, #4
 80086ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d015      	beq.n	8008722 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086f6:	f7fb fd99 	bl	800422c <HAL_GetTick>
 80086fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086fc:	e00a      	b.n	8008714 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086fe:	f7fb fd95 	bl	800422c <HAL_GetTick>
 8008702:	4602      	mov	r2, r0
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	1ad3      	subs	r3, r2, r3
 8008708:	f241 3288 	movw	r2, #5000	; 0x1388
 800870c:	4293      	cmp	r3, r2
 800870e:	d901      	bls.n	8008714 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e0ab      	b.n	800886c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008714:	4b57      	ldr	r3, [pc, #348]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 8008716:	6a1b      	ldr	r3, [r3, #32]
 8008718:	f003 0302 	and.w	r3, r3, #2
 800871c:	2b00      	cmp	r3, #0
 800871e:	d0ee      	beq.n	80086fe <HAL_RCC_OscConfig+0x37e>
 8008720:	e014      	b.n	800874c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008722:	f7fb fd83 	bl	800422c <HAL_GetTick>
 8008726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008728:	e00a      	b.n	8008740 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800872a:	f7fb fd7f 	bl	800422c <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	f241 3288 	movw	r2, #5000	; 0x1388
 8008738:	4293      	cmp	r3, r2
 800873a:	d901      	bls.n	8008740 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800873c:	2303      	movs	r3, #3
 800873e:	e095      	b.n	800886c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008740:	4b4c      	ldr	r3, [pc, #304]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 8008742:	6a1b      	ldr	r3, [r3, #32]
 8008744:	f003 0302 	and.w	r3, r3, #2
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1ee      	bne.n	800872a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800874c:	7dfb      	ldrb	r3, [r7, #23]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d105      	bne.n	800875e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008752:	4b48      	ldr	r3, [pc, #288]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 8008754:	69db      	ldr	r3, [r3, #28]
 8008756:	4a47      	ldr	r2, [pc, #284]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 8008758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800875c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	2b00      	cmp	r3, #0
 8008764:	f000 8081 	beq.w	800886a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008768:	4b42      	ldr	r3, [pc, #264]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	f003 030c 	and.w	r3, r3, #12
 8008770:	2b08      	cmp	r3, #8
 8008772:	d061      	beq.n	8008838 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	69db      	ldr	r3, [r3, #28]
 8008778:	2b02      	cmp	r3, #2
 800877a:	d146      	bne.n	800880a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800877c:	4b3f      	ldr	r3, [pc, #252]	; (800887c <HAL_RCC_OscConfig+0x4fc>)
 800877e:	2200      	movs	r2, #0
 8008780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008782:	f7fb fd53 	bl	800422c <HAL_GetTick>
 8008786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008788:	e008      	b.n	800879c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800878a:	f7fb fd4f 	bl	800422c <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	2b02      	cmp	r3, #2
 8008796:	d901      	bls.n	800879c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e067      	b.n	800886c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800879c:	4b35      	ldr	r3, [pc, #212]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1f0      	bne.n	800878a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a1b      	ldr	r3, [r3, #32]
 80087ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087b0:	d108      	bne.n	80087c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80087b2:	4b30      	ldr	r3, [pc, #192]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	492d      	ldr	r1, [pc, #180]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 80087c0:	4313      	orrs	r3, r2
 80087c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087c4:	4b2b      	ldr	r3, [pc, #172]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a19      	ldr	r1, [r3, #32]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d4:	430b      	orrs	r3, r1
 80087d6:	4927      	ldr	r1, [pc, #156]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 80087d8:	4313      	orrs	r3, r2
 80087da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087dc:	4b27      	ldr	r3, [pc, #156]	; (800887c <HAL_RCC_OscConfig+0x4fc>)
 80087de:	2201      	movs	r2, #1
 80087e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087e2:	f7fb fd23 	bl	800422c <HAL_GetTick>
 80087e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80087e8:	e008      	b.n	80087fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087ea:	f7fb fd1f 	bl	800422c <HAL_GetTick>
 80087ee:	4602      	mov	r2, r0
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d901      	bls.n	80087fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80087f8:	2303      	movs	r3, #3
 80087fa:	e037      	b.n	800886c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80087fc:	4b1d      	ldr	r3, [pc, #116]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d0f0      	beq.n	80087ea <HAL_RCC_OscConfig+0x46a>
 8008808:	e02f      	b.n	800886a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800880a:	4b1c      	ldr	r3, [pc, #112]	; (800887c <HAL_RCC_OscConfig+0x4fc>)
 800880c:	2200      	movs	r2, #0
 800880e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008810:	f7fb fd0c 	bl	800422c <HAL_GetTick>
 8008814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008816:	e008      	b.n	800882a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008818:	f7fb fd08 	bl	800422c <HAL_GetTick>
 800881c:	4602      	mov	r2, r0
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	2b02      	cmp	r3, #2
 8008824:	d901      	bls.n	800882a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e020      	b.n	800886c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800882a:	4b12      	ldr	r3, [pc, #72]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1f0      	bne.n	8008818 <HAL_RCC_OscConfig+0x498>
 8008836:	e018      	b.n	800886a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d101      	bne.n	8008844 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e013      	b.n	800886c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008844:	4b0b      	ldr	r3, [pc, #44]	; (8008874 <HAL_RCC_OscConfig+0x4f4>)
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a1b      	ldr	r3, [r3, #32]
 8008854:	429a      	cmp	r2, r3
 8008856:	d106      	bne.n	8008866 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008862:	429a      	cmp	r2, r3
 8008864:	d001      	beq.n	800886a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e000      	b.n	800886c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3718      	adds	r7, #24
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	40021000 	.word	0x40021000
 8008878:	40007000 	.word	0x40007000
 800887c:	42420060 	.word	0x42420060

08008880 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e0d0      	b.n	8008a36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008894:	4b6a      	ldr	r3, [pc, #424]	; (8008a40 <HAL_RCC_ClockConfig+0x1c0>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 0307 	and.w	r3, r3, #7
 800889c:	683a      	ldr	r2, [r7, #0]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d910      	bls.n	80088c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088a2:	4b67      	ldr	r3, [pc, #412]	; (8008a40 <HAL_RCC_ClockConfig+0x1c0>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f023 0207 	bic.w	r2, r3, #7
 80088aa:	4965      	ldr	r1, [pc, #404]	; (8008a40 <HAL_RCC_ClockConfig+0x1c0>)
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088b2:	4b63      	ldr	r3, [pc, #396]	; (8008a40 <HAL_RCC_ClockConfig+0x1c0>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 0307 	and.w	r3, r3, #7
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d001      	beq.n	80088c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e0b8      	b.n	8008a36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 0302 	and.w	r3, r3, #2
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d020      	beq.n	8008912 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 0304 	and.w	r3, r3, #4
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d005      	beq.n	80088e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80088dc:	4b59      	ldr	r3, [pc, #356]	; (8008a44 <HAL_RCC_ClockConfig+0x1c4>)
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	4a58      	ldr	r2, [pc, #352]	; (8008a44 <HAL_RCC_ClockConfig+0x1c4>)
 80088e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80088e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 0308 	and.w	r3, r3, #8
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d005      	beq.n	8008900 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80088f4:	4b53      	ldr	r3, [pc, #332]	; (8008a44 <HAL_RCC_ClockConfig+0x1c4>)
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	4a52      	ldr	r2, [pc, #328]	; (8008a44 <HAL_RCC_ClockConfig+0x1c4>)
 80088fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80088fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008900:	4b50      	ldr	r3, [pc, #320]	; (8008a44 <HAL_RCC_ClockConfig+0x1c4>)
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	494d      	ldr	r1, [pc, #308]	; (8008a44 <HAL_RCC_ClockConfig+0x1c4>)
 800890e:	4313      	orrs	r3, r2
 8008910:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	2b00      	cmp	r3, #0
 800891c:	d040      	beq.n	80089a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d107      	bne.n	8008936 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008926:	4b47      	ldr	r3, [pc, #284]	; (8008a44 <HAL_RCC_ClockConfig+0x1c4>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800892e:	2b00      	cmp	r3, #0
 8008930:	d115      	bne.n	800895e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e07f      	b.n	8008a36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	2b02      	cmp	r3, #2
 800893c:	d107      	bne.n	800894e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800893e:	4b41      	ldr	r3, [pc, #260]	; (8008a44 <HAL_RCC_ClockConfig+0x1c4>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d109      	bne.n	800895e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e073      	b.n	8008a36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800894e:	4b3d      	ldr	r3, [pc, #244]	; (8008a44 <HAL_RCC_ClockConfig+0x1c4>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b00      	cmp	r3, #0
 8008958:	d101      	bne.n	800895e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e06b      	b.n	8008a36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800895e:	4b39      	ldr	r3, [pc, #228]	; (8008a44 <HAL_RCC_ClockConfig+0x1c4>)
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f023 0203 	bic.w	r2, r3, #3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	4936      	ldr	r1, [pc, #216]	; (8008a44 <HAL_RCC_ClockConfig+0x1c4>)
 800896c:	4313      	orrs	r3, r2
 800896e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008970:	f7fb fc5c 	bl	800422c <HAL_GetTick>
 8008974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008976:	e00a      	b.n	800898e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008978:	f7fb fc58 	bl	800422c <HAL_GetTick>
 800897c:	4602      	mov	r2, r0
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	f241 3288 	movw	r2, #5000	; 0x1388
 8008986:	4293      	cmp	r3, r2
 8008988:	d901      	bls.n	800898e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800898a:	2303      	movs	r3, #3
 800898c:	e053      	b.n	8008a36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800898e:	4b2d      	ldr	r3, [pc, #180]	; (8008a44 <HAL_RCC_ClockConfig+0x1c4>)
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f003 020c 	and.w	r2, r3, #12
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	429a      	cmp	r2, r3
 800899e:	d1eb      	bne.n	8008978 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80089a0:	4b27      	ldr	r3, [pc, #156]	; (8008a40 <HAL_RCC_ClockConfig+0x1c0>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0307 	and.w	r3, r3, #7
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d210      	bcs.n	80089d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ae:	4b24      	ldr	r3, [pc, #144]	; (8008a40 <HAL_RCC_ClockConfig+0x1c0>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f023 0207 	bic.w	r2, r3, #7
 80089b6:	4922      	ldr	r1, [pc, #136]	; (8008a40 <HAL_RCC_ClockConfig+0x1c0>)
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089be:	4b20      	ldr	r3, [pc, #128]	; (8008a40 <HAL_RCC_ClockConfig+0x1c0>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 0307 	and.w	r3, r3, #7
 80089c6:	683a      	ldr	r2, [r7, #0]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d001      	beq.n	80089d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e032      	b.n	8008a36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0304 	and.w	r3, r3, #4
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d008      	beq.n	80089ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089dc:	4b19      	ldr	r3, [pc, #100]	; (8008a44 <HAL_RCC_ClockConfig+0x1c4>)
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	4916      	ldr	r1, [pc, #88]	; (8008a44 <HAL_RCC_ClockConfig+0x1c4>)
 80089ea:	4313      	orrs	r3, r2
 80089ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0308 	and.w	r3, r3, #8
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d009      	beq.n	8008a0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80089fa:	4b12      	ldr	r3, [pc, #72]	; (8008a44 <HAL_RCC_ClockConfig+0x1c4>)
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	00db      	lsls	r3, r3, #3
 8008a08:	490e      	ldr	r1, [pc, #56]	; (8008a44 <HAL_RCC_ClockConfig+0x1c4>)
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008a0e:	f000 f821 	bl	8008a54 <HAL_RCC_GetSysClockFreq>
 8008a12:	4602      	mov	r2, r0
 8008a14:	4b0b      	ldr	r3, [pc, #44]	; (8008a44 <HAL_RCC_ClockConfig+0x1c4>)
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	091b      	lsrs	r3, r3, #4
 8008a1a:	f003 030f 	and.w	r3, r3, #15
 8008a1e:	490a      	ldr	r1, [pc, #40]	; (8008a48 <HAL_RCC_ClockConfig+0x1c8>)
 8008a20:	5ccb      	ldrb	r3, [r1, r3]
 8008a22:	fa22 f303 	lsr.w	r3, r2, r3
 8008a26:	4a09      	ldr	r2, [pc, #36]	; (8008a4c <HAL_RCC_ClockConfig+0x1cc>)
 8008a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008a2a:	4b09      	ldr	r3, [pc, #36]	; (8008a50 <HAL_RCC_ClockConfig+0x1d0>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fb fbba 	bl	80041a8 <HAL_InitTick>

  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	40022000 	.word	0x40022000
 8008a44:	40021000 	.word	0x40021000
 8008a48:	0800dbdc 	.word	0x0800dbdc
 8008a4c:	20000050 	.word	0x20000050
 8008a50:	20000054 	.word	0x20000054

08008a54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a54:	b490      	push	{r4, r7}
 8008a56:	b08a      	sub	sp, #40	; 0x28
 8008a58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008a5a:	4b2a      	ldr	r3, [pc, #168]	; (8008b04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008a5c:	1d3c      	adds	r4, r7, #4
 8008a5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008a60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008a64:	f240 2301 	movw	r3, #513	; 0x201
 8008a68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	61fb      	str	r3, [r7, #28]
 8008a6e:	2300      	movs	r3, #0
 8008a70:	61bb      	str	r3, [r7, #24]
 8008a72:	2300      	movs	r3, #0
 8008a74:	627b      	str	r3, [r7, #36]	; 0x24
 8008a76:	2300      	movs	r3, #0
 8008a78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008a7e:	4b22      	ldr	r3, [pc, #136]	; (8008b08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	f003 030c 	and.w	r3, r3, #12
 8008a8a:	2b04      	cmp	r3, #4
 8008a8c:	d002      	beq.n	8008a94 <HAL_RCC_GetSysClockFreq+0x40>
 8008a8e:	2b08      	cmp	r3, #8
 8008a90:	d003      	beq.n	8008a9a <HAL_RCC_GetSysClockFreq+0x46>
 8008a92:	e02d      	b.n	8008af0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008a94:	4b1d      	ldr	r3, [pc, #116]	; (8008b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a96:	623b      	str	r3, [r7, #32]
      break;
 8008a98:	e02d      	b.n	8008af6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	0c9b      	lsrs	r3, r3, #18
 8008a9e:	f003 030f 	and.w	r3, r3, #15
 8008aa2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008aac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d013      	beq.n	8008ae0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008ab8:	4b13      	ldr	r3, [pc, #76]	; (8008b08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	0c5b      	lsrs	r3, r3, #17
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008acc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	4a0e      	ldr	r2, [pc, #56]	; (8008b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ad2:	fb02 f203 	mul.w	r2, r2, r3
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008adc:	627b      	str	r3, [r7, #36]	; 0x24
 8008ade:	e004      	b.n	8008aea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	4a0b      	ldr	r2, [pc, #44]	; (8008b10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008ae4:	fb02 f303 	mul.w	r3, r2, r3
 8008ae8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	623b      	str	r3, [r7, #32]
      break;
 8008aee:	e002      	b.n	8008af6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008af0:	4b06      	ldr	r3, [pc, #24]	; (8008b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008af2:	623b      	str	r3, [r7, #32]
      break;
 8008af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008af6:	6a3b      	ldr	r3, [r7, #32]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3728      	adds	r7, #40	; 0x28
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bc90      	pop	{r4, r7}
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	0800db44 	.word	0x0800db44
 8008b08:	40021000 	.word	0x40021000
 8008b0c:	007a1200 	.word	0x007a1200
 8008b10:	003d0900 	.word	0x003d0900

08008b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b14:	b480      	push	{r7}
 8008b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b18:	4b02      	ldr	r3, [pc, #8]	; (8008b24 <HAL_RCC_GetHCLKFreq+0x10>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bc80      	pop	{r7}
 8008b22:	4770      	bx	lr
 8008b24:	20000050 	.word	0x20000050

08008b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008b2c:	f7ff fff2 	bl	8008b14 <HAL_RCC_GetHCLKFreq>
 8008b30:	4602      	mov	r2, r0
 8008b32:	4b05      	ldr	r3, [pc, #20]	; (8008b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	0a1b      	lsrs	r3, r3, #8
 8008b38:	f003 0307 	and.w	r3, r3, #7
 8008b3c:	4903      	ldr	r1, [pc, #12]	; (8008b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b3e:	5ccb      	ldrb	r3, [r1, r3]
 8008b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	40021000 	.word	0x40021000
 8008b4c:	0800dbec 	.word	0x0800dbec

08008b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008b54:	f7ff ffde 	bl	8008b14 <HAL_RCC_GetHCLKFreq>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	4b05      	ldr	r3, [pc, #20]	; (8008b70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	0adb      	lsrs	r3, r3, #11
 8008b60:	f003 0307 	and.w	r3, r3, #7
 8008b64:	4903      	ldr	r1, [pc, #12]	; (8008b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b66:	5ccb      	ldrb	r3, [r1, r3]
 8008b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	40021000 	.word	0x40021000
 8008b74:	0800dbec 	.word	0x0800dbec

08008b78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008b80:	4b0a      	ldr	r3, [pc, #40]	; (8008bac <RCC_Delay+0x34>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a0a      	ldr	r2, [pc, #40]	; (8008bb0 <RCC_Delay+0x38>)
 8008b86:	fba2 2303 	umull	r2, r3, r2, r3
 8008b8a:	0a5b      	lsrs	r3, r3, #9
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	fb02 f303 	mul.w	r3, r2, r3
 8008b92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008b94:	bf00      	nop
  }
  while (Delay --);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	1e5a      	subs	r2, r3, #1
 8008b9a:	60fa      	str	r2, [r7, #12]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1f9      	bne.n	8008b94 <RCC_Delay+0x1c>
}
 8008ba0:	bf00      	nop
 8008ba2:	bf00      	nop
 8008ba4:	3714      	adds	r7, #20
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bc80      	pop	{r7}
 8008baa:	4770      	bx	lr
 8008bac:	20000050 	.word	0x20000050
 8008bb0:	10624dd3 	.word	0x10624dd3

08008bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b086      	sub	sp, #24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	613b      	str	r3, [r7, #16]
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0301 	and.w	r3, r3, #1
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d07d      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008bd4:	4b4f      	ldr	r3, [pc, #316]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008bd6:	69db      	ldr	r3, [r3, #28]
 8008bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10d      	bne.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008be0:	4b4c      	ldr	r3, [pc, #304]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008be2:	69db      	ldr	r3, [r3, #28]
 8008be4:	4a4b      	ldr	r2, [pc, #300]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bea:	61d3      	str	r3, [r2, #28]
 8008bec:	4b49      	ldr	r3, [pc, #292]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008bee:	69db      	ldr	r3, [r3, #28]
 8008bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bf4:	60bb      	str	r3, [r7, #8]
 8008bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bfc:	4b46      	ldr	r3, [pc, #280]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d118      	bne.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008c08:	4b43      	ldr	r3, [pc, #268]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a42      	ldr	r2, [pc, #264]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c14:	f7fb fb0a 	bl	800422c <HAL_GetTick>
 8008c18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c1a:	e008      	b.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c1c:	f7fb fb06 	bl	800422c <HAL_GetTick>
 8008c20:	4602      	mov	r2, r0
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	2b64      	cmp	r3, #100	; 0x64
 8008c28:	d901      	bls.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e06d      	b.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c2e:	4b3a      	ldr	r3, [pc, #232]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d0f0      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008c3a:	4b36      	ldr	r3, [pc, #216]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c3c:	6a1b      	ldr	r3, [r3, #32]
 8008c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d02e      	beq.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d027      	beq.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008c58:	4b2e      	ldr	r3, [pc, #184]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c5a:	6a1b      	ldr	r3, [r3, #32]
 8008c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008c62:	4b2e      	ldr	r3, [pc, #184]	; (8008d1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008c64:	2201      	movs	r2, #1
 8008c66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008c68:	4b2c      	ldr	r3, [pc, #176]	; (8008d1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008c6e:	4a29      	ldr	r2, [pc, #164]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d014      	beq.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c7e:	f7fb fad5 	bl	800422c <HAL_GetTick>
 8008c82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c84:	e00a      	b.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c86:	f7fb fad1 	bl	800422c <HAL_GetTick>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d901      	bls.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e036      	b.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c9c:	4b1d      	ldr	r3, [pc, #116]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c9e:	6a1b      	ldr	r3, [r3, #32]
 8008ca0:	f003 0302 	and.w	r3, r3, #2
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d0ee      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ca8:	4b1a      	ldr	r3, [pc, #104]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008caa:	6a1b      	ldr	r3, [r3, #32]
 8008cac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	4917      	ldr	r1, [pc, #92]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008cba:	7dfb      	ldrb	r3, [r7, #23]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d105      	bne.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008cc0:	4b14      	ldr	r3, [pc, #80]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008cc2:	69db      	ldr	r3, [r3, #28]
 8008cc4:	4a13      	ldr	r2, [pc, #76]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0302 	and.w	r3, r3, #2
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d008      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008cd8:	4b0e      	ldr	r3, [pc, #56]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	490b      	ldr	r1, [pc, #44]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 0310 	and.w	r3, r3, #16
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d008      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008cf6:	4b07      	ldr	r3, [pc, #28]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	4904      	ldr	r1, [pc, #16]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d04:	4313      	orrs	r3, r2
 8008d06:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3718      	adds	r7, #24
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	40021000 	.word	0x40021000
 8008d18:	40007000 	.word	0x40007000
 8008d1c:	42420440 	.word	0x42420440

08008d20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d101      	bne.n	8008d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e03f      	b.n	8008db2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d106      	bne.n	8008d4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f7fb f990 	bl	800406c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2224      	movs	r2, #36	; 0x24
 8008d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68da      	ldr	r2, [r3, #12]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fad9 	bl	800931c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	691a      	ldr	r2, [r3, #16]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	695a      	ldr	r2, [r3, #20]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68da      	ldr	r2, [r3, #12]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2220      	movs	r2, #32
 8008da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2220      	movs	r2, #32
 8008dac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3708      	adds	r7, #8
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b085      	sub	sp, #20
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	60f8      	str	r0, [r7, #12]
 8008dc2:	60b9      	str	r1, [r7, #8]
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	2b20      	cmp	r3, #32
 8008dd2:	d130      	bne.n	8008e36 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d002      	beq.n	8008de0 <HAL_UART_Transmit_IT+0x26>
 8008dda:	88fb      	ldrh	r3, [r7, #6]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d101      	bne.n	8008de4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	e029      	b.n	8008e38 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d101      	bne.n	8008df2 <HAL_UART_Transmit_IT+0x38>
 8008dee:	2302      	movs	r3, #2
 8008df0:	e022      	b.n	8008e38 <HAL_UART_Transmit_IT+0x7e>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	68ba      	ldr	r2, [r7, #8]
 8008dfe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	88fa      	ldrh	r2, [r7, #6]
 8008e04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	88fa      	ldrh	r2, [r7, #6]
 8008e0a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2221      	movs	r2, #33	; 0x21
 8008e16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68da      	ldr	r2, [r3, #12]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008e30:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008e32:	2300      	movs	r3, #0
 8008e34:	e000      	b.n	8008e38 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008e36:	2302      	movs	r3, #2
  }
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bc80      	pop	{r7}
 8008e40:	4770      	bx	lr

08008e42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b085      	sub	sp, #20
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	60f8      	str	r0, [r7, #12]
 8008e4a:	60b9      	str	r1, [r7, #8]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	2b20      	cmp	r3, #32
 8008e5a:	d140      	bne.n	8008ede <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d002      	beq.n	8008e68 <HAL_UART_Receive_IT+0x26>
 8008e62:	88fb      	ldrh	r3, [r7, #6]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d101      	bne.n	8008e6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e039      	b.n	8008ee0 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d101      	bne.n	8008e7a <HAL_UART_Receive_IT+0x38>
 8008e76:	2302      	movs	r3, #2
 8008e78:	e032      	b.n	8008ee0 <HAL_UART_Receive_IT+0x9e>
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	88fa      	ldrh	r2, [r7, #6]
 8008e8c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	88fa      	ldrh	r2, [r7, #6]
 8008e92:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2200      	movs	r2, #0
 8008e98:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2222      	movs	r2, #34	; 0x22
 8008e9e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68da      	ldr	r2, [r3, #12]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008eb8:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	695a      	ldr	r2, [r3, #20]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f042 0201 	orr.w	r2, r2, #1
 8008ec8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68da      	ldr	r2, [r3, #12]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f042 0220 	orr.w	r2, r2, #32
 8008ed8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008eda:	2300      	movs	r3, #0
 8008edc:	e000      	b.n	8008ee0 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008ede:	2302      	movs	r3, #2
  }
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bc80      	pop	{r7}
 8008ee8:	4770      	bx	lr
	...

08008eec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b088      	sub	sp, #32
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008f10:	2300      	movs	r3, #0
 8008f12:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	f003 030f 	and.w	r3, r3, #15
 8008f1a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10d      	bne.n	8008f3e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	f003 0320 	and.w	r3, r3, #32
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d008      	beq.n	8008f3e <HAL_UART_IRQHandler+0x52>
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	f003 0320 	and.w	r3, r3, #32
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d003      	beq.n	8008f3e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f970 	bl	800921c <UART_Receive_IT>
      return;
 8008f3c:	e0d0      	b.n	80090e0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 80b0 	beq.w	80090a6 <HAL_UART_IRQHandler+0x1ba>
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d105      	bne.n	8008f5c <HAL_UART_IRQHandler+0x70>
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f000 80a5 	beq.w	80090a6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	f003 0301 	and.w	r3, r3, #1
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00a      	beq.n	8008f7c <HAL_UART_IRQHandler+0x90>
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d005      	beq.n	8008f7c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f74:	f043 0201 	orr.w	r2, r3, #1
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	f003 0304 	and.w	r3, r3, #4
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00a      	beq.n	8008f9c <HAL_UART_IRQHandler+0xb0>
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d005      	beq.n	8008f9c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f94:	f043 0202 	orr.w	r2, r3, #2
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	f003 0302 	and.w	r3, r3, #2
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00a      	beq.n	8008fbc <HAL_UART_IRQHandler+0xd0>
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f003 0301 	and.w	r3, r3, #1
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d005      	beq.n	8008fbc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fb4:	f043 0204 	orr.w	r2, r3, #4
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	f003 0308 	and.w	r3, r3, #8
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00f      	beq.n	8008fe6 <HAL_UART_IRQHandler+0xfa>
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	f003 0320 	and.w	r3, r3, #32
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d104      	bne.n	8008fda <HAL_UART_IRQHandler+0xee>
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	f003 0301 	and.w	r3, r3, #1
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d005      	beq.n	8008fe6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fde:	f043 0208 	orr.w	r2, r3, #8
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d077      	beq.n	80090de <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	f003 0320 	and.w	r3, r3, #32
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d007      	beq.n	8009008 <HAL_UART_IRQHandler+0x11c>
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	f003 0320 	and.w	r3, r3, #32
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d002      	beq.n	8009008 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f90a 	bl	800921c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009012:	2b00      	cmp	r3, #0
 8009014:	bf14      	ite	ne
 8009016:	2301      	movne	r3, #1
 8009018:	2300      	moveq	r3, #0
 800901a:	b2db      	uxtb	r3, r3
 800901c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009022:	f003 0308 	and.w	r3, r3, #8
 8009026:	2b00      	cmp	r3, #0
 8009028:	d102      	bne.n	8009030 <HAL_UART_IRQHandler+0x144>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d031      	beq.n	8009094 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f85b 	bl	80090ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	695b      	ldr	r3, [r3, #20]
 800903c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009040:	2b00      	cmp	r3, #0
 8009042:	d023      	beq.n	800908c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	695a      	ldr	r2, [r3, #20]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009052:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009058:	2b00      	cmp	r3, #0
 800905a:	d013      	beq.n	8009084 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009060:	4a21      	ldr	r2, [pc, #132]	; (80090e8 <HAL_UART_IRQHandler+0x1fc>)
 8009062:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009068:	4618      	mov	r0, r3
 800906a:	f7fb fa1b 	bl	80044a4 <HAL_DMA_Abort_IT>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d016      	beq.n	80090a2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800907e:	4610      	mov	r0, r2
 8009080:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009082:	e00e      	b.n	80090a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7f9 f939 	bl	80022fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800908a:	e00a      	b.n	80090a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7f9 f935 	bl	80022fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009092:	e006      	b.n	80090a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f7f9 f931 	bl	80022fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80090a0:	e01d      	b.n	80090de <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090a2:	bf00      	nop
    return;
 80090a4:	e01b      	b.n	80090de <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d008      	beq.n	80090c2 <HAL_UART_IRQHandler+0x1d6>
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d003      	beq.n	80090c2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f847 	bl	800914e <UART_Transmit_IT>
    return;
 80090c0:	e00e      	b.n	80090e0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d009      	beq.n	80090e0 <HAL_UART_IRQHandler+0x1f4>
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d004      	beq.n	80090e0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f888 	bl	80091ec <UART_EndTransmit_IT>
    return;
 80090dc:	e000      	b.n	80090e0 <HAL_UART_IRQHandler+0x1f4>
    return;
 80090de:	bf00      	nop
  }
}
 80090e0:	3720      	adds	r7, #32
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	08009127 	.word	0x08009127

080090ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68da      	ldr	r2, [r3, #12]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009102:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	695a      	ldr	r2, [r3, #20]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f022 0201 	bic.w	r2, r2, #1
 8009112:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2220      	movs	r2, #32
 8009118:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	bc80      	pop	{r7}
 8009124:	4770      	bx	lr

08009126 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b084      	sub	sp, #16
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009132:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2200      	movs	r2, #0
 800913e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f7f9 f8db 	bl	80022fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009146:	bf00      	nop
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800914e:	b480      	push	{r7}
 8009150:	b085      	sub	sp, #20
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b21      	cmp	r3, #33	; 0x21
 8009160:	d13e      	bne.n	80091e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800916a:	d114      	bne.n	8009196 <UART_Transmit_IT+0x48>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d110      	bne.n	8009196 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a1b      	ldr	r3, [r3, #32]
 8009178:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	881b      	ldrh	r3, [r3, #0]
 800917e:	461a      	mov	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009188:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	1c9a      	adds	r2, r3, #2
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	621a      	str	r2, [r3, #32]
 8009194:	e008      	b.n	80091a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a1b      	ldr	r3, [r3, #32]
 800919a:	1c59      	adds	r1, r3, #1
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	6211      	str	r1, [r2, #32]
 80091a0:	781a      	ldrb	r2, [r3, #0]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	3b01      	subs	r3, #1
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	4619      	mov	r1, r3
 80091b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10f      	bne.n	80091dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68da      	ldr	r2, [r3, #12]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68da      	ldr	r2, [r3, #12]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80091dc:	2300      	movs	r3, #0
 80091de:	e000      	b.n	80091e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80091e0:	2302      	movs	r3, #2
  }
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3714      	adds	r7, #20
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bc80      	pop	{r7}
 80091ea:	4770      	bx	lr

080091ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	68da      	ldr	r2, [r3, #12]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009202:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2220      	movs	r2, #32
 8009208:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f7f9 f851 	bl	80022b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009212:	2300      	movs	r3, #0
}
 8009214:	4618      	mov	r0, r3
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800922a:	b2db      	uxtb	r3, r3
 800922c:	2b22      	cmp	r3, #34	; 0x22
 800922e:	d170      	bne.n	8009312 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009238:	d117      	bne.n	800926a <UART_Receive_IT+0x4e>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d113      	bne.n	800926a <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8009242:	2300      	movs	r3, #0
 8009244:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	b29b      	uxth	r3, r3
 8009254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009258:	b29a      	uxth	r2, r3
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009262:	1c9a      	adds	r2, r3, #2
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	629a      	str	r2, [r3, #40]	; 0x28
 8009268:	e026      	b.n	80092b8 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8009270:	2300      	movs	r3, #0
 8009272:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800927c:	d007      	beq.n	800928e <UART_Receive_IT+0x72>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d10a      	bne.n	800929c <UART_Receive_IT+0x80>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d106      	bne.n	800929c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	b2da      	uxtb	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	701a      	strb	r2, [r3, #0]
 800929a:	e008      	b.n	80092ae <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b2:	1c5a      	adds	r2, r3, #1
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092bc:	b29b      	uxth	r3, r3
 80092be:	3b01      	subs	r3, #1
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	4619      	mov	r1, r3
 80092c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d120      	bne.n	800930e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68da      	ldr	r2, [r3, #12]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f022 0220 	bic.w	r2, r2, #32
 80092da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68da      	ldr	r2, [r3, #12]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	695a      	ldr	r2, [r3, #20]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f022 0201 	bic.w	r2, r2, #1
 80092fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2220      	movs	r2, #32
 8009300:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f7f8 ffe7 	bl	80022d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	e002      	b.n	8009314 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	e000      	b.n	8009314 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8009312:	2302      	movs	r3, #2
  }
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	68da      	ldr	r2, [r3, #12]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	430a      	orrs	r2, r1
 8009338:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	689a      	ldr	r2, [r3, #8]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	431a      	orrs	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	695b      	ldr	r3, [r3, #20]
 8009348:	4313      	orrs	r3, r2
 800934a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009356:	f023 030c 	bic.w	r3, r3, #12
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	6812      	ldr	r2, [r2, #0]
 800935e:	68b9      	ldr	r1, [r7, #8]
 8009360:	430b      	orrs	r3, r1
 8009362:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	699a      	ldr	r2, [r3, #24]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	430a      	orrs	r2, r1
 8009378:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a2c      	ldr	r2, [pc, #176]	; (8009430 <UART_SetConfig+0x114>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d103      	bne.n	800938c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009384:	f7ff fbe4 	bl	8008b50 <HAL_RCC_GetPCLK2Freq>
 8009388:	60f8      	str	r0, [r7, #12]
 800938a:	e002      	b.n	8009392 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800938c:	f7ff fbcc 	bl	8008b28 <HAL_RCC_GetPCLK1Freq>
 8009390:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	4613      	mov	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4413      	add	r3, r2
 800939a:	009a      	lsls	r2, r3, #2
 800939c:	441a      	add	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80093a8:	4a22      	ldr	r2, [pc, #136]	; (8009434 <UART_SetConfig+0x118>)
 80093aa:	fba2 2303 	umull	r2, r3, r2, r3
 80093ae:	095b      	lsrs	r3, r3, #5
 80093b0:	0119      	lsls	r1, r3, #4
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	4613      	mov	r3, r2
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	4413      	add	r3, r2
 80093ba:	009a      	lsls	r2, r3, #2
 80093bc:	441a      	add	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80093c8:	4b1a      	ldr	r3, [pc, #104]	; (8009434 <UART_SetConfig+0x118>)
 80093ca:	fba3 0302 	umull	r0, r3, r3, r2
 80093ce:	095b      	lsrs	r3, r3, #5
 80093d0:	2064      	movs	r0, #100	; 0x64
 80093d2:	fb00 f303 	mul.w	r3, r0, r3
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	011b      	lsls	r3, r3, #4
 80093da:	3332      	adds	r3, #50	; 0x32
 80093dc:	4a15      	ldr	r2, [pc, #84]	; (8009434 <UART_SetConfig+0x118>)
 80093de:	fba2 2303 	umull	r2, r3, r2, r3
 80093e2:	095b      	lsrs	r3, r3, #5
 80093e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093e8:	4419      	add	r1, r3
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	4613      	mov	r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4413      	add	r3, r2
 80093f2:	009a      	lsls	r2, r3, #2
 80093f4:	441a      	add	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8009400:	4b0c      	ldr	r3, [pc, #48]	; (8009434 <UART_SetConfig+0x118>)
 8009402:	fba3 0302 	umull	r0, r3, r3, r2
 8009406:	095b      	lsrs	r3, r3, #5
 8009408:	2064      	movs	r0, #100	; 0x64
 800940a:	fb00 f303 	mul.w	r3, r0, r3
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	011b      	lsls	r3, r3, #4
 8009412:	3332      	adds	r3, #50	; 0x32
 8009414:	4a07      	ldr	r2, [pc, #28]	; (8009434 <UART_SetConfig+0x118>)
 8009416:	fba2 2303 	umull	r2, r3, r2, r3
 800941a:	095b      	lsrs	r3, r3, #5
 800941c:	f003 020f 	and.w	r2, r3, #15
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	440a      	add	r2, r1
 8009426:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009428:	bf00      	nop
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	40013800 	.word	0x40013800
 8009434:	51eb851f 	.word	0x51eb851f

08009438 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009438:	b084      	sub	sp, #16
 800943a:	b480      	push	{r7}
 800943c:	b083      	sub	sp, #12
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	f107 0014 	add.w	r0, r7, #20
 8009446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	bc80      	pop	{r7}
 8009454:	b004      	add	sp, #16
 8009456:	4770      	bx	lr

08009458 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009468:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800946c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	b29a      	uxth	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3714      	adds	r7, #20
 800947e:	46bd      	mov	sp, r7
 8009480:	bc80      	pop	{r7}
 8009482:	4770      	bx	lr

08009484 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800948c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009490:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009498:	b29a      	uxth	r2, r3
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	b29b      	uxth	r3, r3
 800949e:	43db      	mvns	r3, r3
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	4013      	ands	r3, r2
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3714      	adds	r7, #20
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bc80      	pop	{r7}
 80094b6:	4770      	bx	lr

080094b8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	460b      	mov	r3, r1
 80094c2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bc80      	pop	{r7}
 80094ce:	4770      	bx	lr

080094d0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80094d0:	b084      	sub	sp, #16
 80094d2:	b480      	push	{r7}
 80094d4:	b083      	sub	sp, #12
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	f107 0014 	add.w	r0, r7, #20
 80094de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	bc80      	pop	{r7}
 800950c:	b004      	add	sp, #16
 800950e:	4770      	bx	lr

08009510 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009510:	b480      	push	{r7}
 8009512:	b09b      	sub	sp, #108	; 0x6c
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4413      	add	r3, r2
 800952a:	881b      	ldrh	r3, [r3, #0]
 800952c:	b29b      	uxth	r3, r3
 800952e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009536:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	78db      	ldrb	r3, [r3, #3]
 800953e:	2b03      	cmp	r3, #3
 8009540:	d81f      	bhi.n	8009582 <USB_ActivateEndpoint+0x72>
 8009542:	a201      	add	r2, pc, #4	; (adr r2, 8009548 <USB_ActivateEndpoint+0x38>)
 8009544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009548:	08009559 	.word	0x08009559
 800954c:	08009575 	.word	0x08009575
 8009550:	0800958b 	.word	0x0800958b
 8009554:	08009567 	.word	0x08009567
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009558:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800955c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009560:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009564:	e012      	b.n	800958c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009566:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800956a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800956e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009572:	e00b      	b.n	800958c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009574:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009578:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800957c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009580:	e004      	b.n	800958c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8009588:	e000      	b.n	800958c <USB_ActivateEndpoint+0x7c>
      break;
 800958a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	441a      	add	r2, r3
 8009596:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800959a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800959e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	881b      	ldrh	r3, [r3, #0]
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	4313      	orrs	r3, r2
 80095ce:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	441a      	add	r2, r3
 80095dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80095e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	7b1b      	ldrb	r3, [r3, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f040 8149 	bne.w	8009890 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	785b      	ldrb	r3, [r3, #1]
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 8084 	beq.w	8009710 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	617b      	str	r3, [r7, #20]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009612:	b29b      	uxth	r3, r3
 8009614:	461a      	mov	r2, r3
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	4413      	add	r3, r2
 800961a:	617b      	str	r3, [r7, #20]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	011a      	lsls	r2, r3, #4
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	4413      	add	r3, r2
 8009626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800962a:	613b      	str	r3, [r7, #16]
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	88db      	ldrh	r3, [r3, #6]
 8009630:	085b      	lsrs	r3, r3, #1
 8009632:	b29b      	uxth	r3, r3
 8009634:	005b      	lsls	r3, r3, #1
 8009636:	b29a      	uxth	r2, r3
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4413      	add	r3, r2
 8009646:	881b      	ldrh	r3, [r3, #0]
 8009648:	81fb      	strh	r3, [r7, #14]
 800964a:	89fb      	ldrh	r3, [r7, #14]
 800964c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009650:	2b00      	cmp	r3, #0
 8009652:	d01b      	beq.n	800968c <USB_ActivateEndpoint+0x17c>
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	4413      	add	r3, r2
 800965e:	881b      	ldrh	r3, [r3, #0]
 8009660:	b29b      	uxth	r3, r3
 8009662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800966a:	81bb      	strh	r3, [r7, #12]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	441a      	add	r2, r3
 8009676:	89bb      	ldrh	r3, [r7, #12]
 8009678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800967c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009684:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009688:	b29b      	uxth	r3, r3
 800968a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	78db      	ldrb	r3, [r3, #3]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d020      	beq.n	80096d6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	4413      	add	r3, r2
 800969e:	881b      	ldrh	r3, [r3, #0]
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096aa:	813b      	strh	r3, [r7, #8]
 80096ac:	893b      	ldrh	r3, [r7, #8]
 80096ae:	f083 0320 	eor.w	r3, r3, #32
 80096b2:	813b      	strh	r3, [r7, #8]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	441a      	add	r2, r3
 80096be:	893b      	ldrh	r3, [r7, #8]
 80096c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	8013      	strh	r3, [r2, #0]
 80096d4:	e27f      	b.n	8009bd6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	881b      	ldrh	r3, [r3, #0]
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096ec:	817b      	strh	r3, [r7, #10]
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	441a      	add	r2, r3
 80096f8:	897b      	ldrh	r3, [r7, #10]
 80096fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800970a:	b29b      	uxth	r3, r3
 800970c:	8013      	strh	r3, [r2, #0]
 800970e:	e262      	b.n	8009bd6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800971a:	b29b      	uxth	r3, r3
 800971c:	461a      	mov	r2, r3
 800971e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009720:	4413      	add	r3, r2
 8009722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	011a      	lsls	r2, r3, #4
 800972a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972c:	4413      	add	r3, r2
 800972e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009732:	62bb      	str	r3, [r7, #40]	; 0x28
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	88db      	ldrh	r3, [r3, #6]
 8009738:	085b      	lsrs	r3, r3, #1
 800973a:	b29b      	uxth	r3, r3
 800973c:	005b      	lsls	r3, r3, #1
 800973e:	b29a      	uxth	r2, r3
 8009740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009742:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	627b      	str	r3, [r7, #36]	; 0x24
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800974e:	b29b      	uxth	r3, r3
 8009750:	461a      	mov	r2, r3
 8009752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009754:	4413      	add	r3, r2
 8009756:	627b      	str	r3, [r7, #36]	; 0x24
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	011a      	lsls	r2, r3, #4
 800975e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009760:	4413      	add	r3, r2
 8009762:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009766:	623b      	str	r3, [r7, #32]
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d112      	bne.n	8009796 <USB_ActivateEndpoint+0x286>
 8009770:	6a3b      	ldr	r3, [r7, #32]
 8009772:	881b      	ldrh	r3, [r3, #0]
 8009774:	b29b      	uxth	r3, r3
 8009776:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800977a:	b29a      	uxth	r2, r3
 800977c:	6a3b      	ldr	r3, [r7, #32]
 800977e:	801a      	strh	r2, [r3, #0]
 8009780:	6a3b      	ldr	r3, [r7, #32]
 8009782:	881b      	ldrh	r3, [r3, #0]
 8009784:	b29b      	uxth	r3, r3
 8009786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800978a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800978e:	b29a      	uxth	r2, r3
 8009790:	6a3b      	ldr	r3, [r7, #32]
 8009792:	801a      	strh	r2, [r3, #0]
 8009794:	e02f      	b.n	80097f6 <USB_ActivateEndpoint+0x2e6>
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	2b3e      	cmp	r3, #62	; 0x3e
 800979c:	d813      	bhi.n	80097c6 <USB_ActivateEndpoint+0x2b6>
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	085b      	lsrs	r3, r3, #1
 80097a4:	663b      	str	r3, [r7, #96]	; 0x60
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	f003 0301 	and.w	r3, r3, #1
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d002      	beq.n	80097b8 <USB_ActivateEndpoint+0x2a8>
 80097b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097b4:	3301      	adds	r3, #1
 80097b6:	663b      	str	r3, [r7, #96]	; 0x60
 80097b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	029b      	lsls	r3, r3, #10
 80097be:	b29a      	uxth	r2, r3
 80097c0:	6a3b      	ldr	r3, [r7, #32]
 80097c2:	801a      	strh	r2, [r3, #0]
 80097c4:	e017      	b.n	80097f6 <USB_ActivateEndpoint+0x2e6>
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	095b      	lsrs	r3, r3, #5
 80097cc:	663b      	str	r3, [r7, #96]	; 0x60
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	f003 031f 	and.w	r3, r3, #31
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d102      	bne.n	80097e0 <USB_ActivateEndpoint+0x2d0>
 80097da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097dc:	3b01      	subs	r3, #1
 80097de:	663b      	str	r3, [r7, #96]	; 0x60
 80097e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	029b      	lsls	r3, r3, #10
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	6a3b      	ldr	r3, [r7, #32]
 80097f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4413      	add	r3, r2
 8009800:	881b      	ldrh	r3, [r3, #0]
 8009802:	83fb      	strh	r3, [r7, #30]
 8009804:	8bfb      	ldrh	r3, [r7, #30]
 8009806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800980a:	2b00      	cmp	r3, #0
 800980c:	d01b      	beq.n	8009846 <USB_ActivateEndpoint+0x336>
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	4413      	add	r3, r2
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	b29b      	uxth	r3, r3
 800981c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009824:	83bb      	strh	r3, [r7, #28]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	441a      	add	r2, r3
 8009830:	8bbb      	ldrh	r3, [r7, #28]
 8009832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800983a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800983e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009842:	b29b      	uxth	r3, r3
 8009844:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4413      	add	r3, r2
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	b29b      	uxth	r3, r3
 8009854:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800985c:	837b      	strh	r3, [r7, #26]
 800985e:	8b7b      	ldrh	r3, [r7, #26]
 8009860:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009864:	837b      	strh	r3, [r7, #26]
 8009866:	8b7b      	ldrh	r3, [r7, #26]
 8009868:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800986c:	837b      	strh	r3, [r7, #26]
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	441a      	add	r2, r3
 8009878:	8b7b      	ldrh	r3, [r7, #26]
 800987a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800987e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800988a:	b29b      	uxth	r3, r3
 800988c:	8013      	strh	r3, [r2, #0]
 800988e:	e1a2      	b.n	8009bd6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4413      	add	r3, r2
 800989a:	881b      	ldrh	r3, [r3, #0]
 800989c:	b29b      	uxth	r3, r3
 800989e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098a6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	441a      	add	r2, r3
 80098b4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80098b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098c0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80098c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	461a      	mov	r2, r3
 80098da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098dc:	4413      	add	r3, r2
 80098de:	65bb      	str	r3, [r7, #88]	; 0x58
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	011a      	lsls	r2, r3, #4
 80098e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098e8:	4413      	add	r3, r2
 80098ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098ee:	657b      	str	r3, [r7, #84]	; 0x54
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	891b      	ldrh	r3, [r3, #8]
 80098f4:	085b      	lsrs	r3, r3, #1
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	005b      	lsls	r3, r3, #1
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098fe:	801a      	strh	r2, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	653b      	str	r3, [r7, #80]	; 0x50
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800990a:	b29b      	uxth	r3, r3
 800990c:	461a      	mov	r2, r3
 800990e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009910:	4413      	add	r3, r2
 8009912:	653b      	str	r3, [r7, #80]	; 0x50
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	011a      	lsls	r2, r3, #4
 800991a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800991c:	4413      	add	r3, r2
 800991e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	895b      	ldrh	r3, [r3, #10]
 8009928:	085b      	lsrs	r3, r3, #1
 800992a:	b29b      	uxth	r3, r3
 800992c:	005b      	lsls	r3, r3, #1
 800992e:	b29a      	uxth	r2, r3
 8009930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009932:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	785b      	ldrb	r3, [r3, #1]
 8009938:	2b00      	cmp	r3, #0
 800993a:	f040 8091 	bne.w	8009a60 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4413      	add	r3, r2
 8009948:	881b      	ldrh	r3, [r3, #0]
 800994a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800994c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800994e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009952:	2b00      	cmp	r3, #0
 8009954:	d01b      	beq.n	800998e <USB_ActivateEndpoint+0x47e>
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	881b      	ldrh	r3, [r3, #0]
 8009962:	b29b      	uxth	r3, r3
 8009964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800996c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	441a      	add	r2, r3
 8009978:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800997a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800997e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009982:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800998a:	b29b      	uxth	r3, r3
 800998c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4413      	add	r3, r2
 8009998:	881b      	ldrh	r3, [r3, #0]
 800999a:	873b      	strh	r3, [r7, #56]	; 0x38
 800999c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800999e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d01b      	beq.n	80099de <USB_ActivateEndpoint+0x4ce>
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4413      	add	r3, r2
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	441a      	add	r2, r3
 80099c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80099ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80099da:	b29b      	uxth	r3, r3
 80099dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	881b      	ldrh	r3, [r3, #0]
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099f4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80099f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80099f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80099fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80099fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009a00:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009a04:	86bb      	strh	r3, [r7, #52]	; 0x34
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	441a      	add	r2, r3
 8009a10:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	4413      	add	r3, r2
 8009a30:	881b      	ldrh	r3, [r3, #0]
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a3c:	867b      	strh	r3, [r7, #50]	; 0x32
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	441a      	add	r2, r3
 8009a48:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	8013      	strh	r3, [r2, #0]
 8009a5e:	e0ba      	b.n	8009bd6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	4413      	add	r3, r2
 8009a6a:	881b      	ldrh	r3, [r3, #0]
 8009a6c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009a70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d01d      	beq.n	8009ab8 <USB_ActivateEndpoint+0x5a8>
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4413      	add	r3, r2
 8009a86:	881b      	ldrh	r3, [r3, #0]
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a92:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	441a      	add	r2, r3
 8009aa0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009aac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4413      	add	r3, r2
 8009ac2:	881b      	ldrh	r3, [r3, #0]
 8009ac4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009ac8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d01d      	beq.n	8009b10 <USB_ActivateEndpoint+0x600>
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4413      	add	r3, r2
 8009ade:	881b      	ldrh	r3, [r3, #0]
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	441a      	add	r2, r3
 8009af8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	78db      	ldrb	r3, [r3, #3]
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d024      	beq.n	8009b62 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	4413      	add	r3, r2
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009b32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009b36:	f083 0320 	eor.w	r3, r3, #32
 8009b3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	441a      	add	r2, r3
 8009b48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	8013      	strh	r3, [r2, #0]
 8009b60:	e01d      	b.n	8009b9e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	4413      	add	r3, r2
 8009b6c:	881b      	ldrh	r3, [r3, #0]
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	441a      	add	r2, r3
 8009b86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	4413      	add	r3, r2
 8009ba8:	881b      	ldrh	r3, [r3, #0]
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bb4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	441a      	add	r2, r3
 8009bc0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8009bd6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	376c      	adds	r7, #108	; 0x6c
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bc80      	pop	{r7}
 8009be2:	4770      	bx	lr

08009be4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b08d      	sub	sp, #52	; 0x34
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	7b1b      	ldrb	r3, [r3, #12]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f040 808e 	bne.w	8009d14 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	785b      	ldrb	r3, [r3, #1]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d044      	beq.n	8009c8a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	4413      	add	r3, r2
 8009c0a:	881b      	ldrh	r3, [r3, #0]
 8009c0c:	81bb      	strh	r3, [r7, #12]
 8009c0e:	89bb      	ldrh	r3, [r7, #12]
 8009c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d01b      	beq.n	8009c50 <USB_DeactivateEndpoint+0x6c>
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4413      	add	r3, r2
 8009c22:	881b      	ldrh	r3, [r3, #0]
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c2e:	817b      	strh	r3, [r7, #10]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	441a      	add	r2, r3
 8009c3a:	897b      	ldrh	r3, [r7, #10]
 8009c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	4413      	add	r3, r2
 8009c5a:	881b      	ldrh	r3, [r3, #0]
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c66:	813b      	strh	r3, [r7, #8]
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	441a      	add	r2, r3
 8009c72:	893b      	ldrh	r3, [r7, #8]
 8009c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	8013      	strh	r3, [r2, #0]
 8009c88:	e192      	b.n	8009fb0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	881b      	ldrh	r3, [r3, #0]
 8009c96:	827b      	strh	r3, [r7, #18]
 8009c98:	8a7b      	ldrh	r3, [r7, #18]
 8009c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d01b      	beq.n	8009cda <USB_DeactivateEndpoint+0xf6>
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4413      	add	r3, r2
 8009cac:	881b      	ldrh	r3, [r3, #0]
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cb8:	823b      	strh	r3, [r7, #16]
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	441a      	add	r2, r3
 8009cc4:	8a3b      	ldrh	r3, [r7, #16]
 8009cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	4413      	add	r3, r2
 8009ce4:	881b      	ldrh	r3, [r3, #0]
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cf0:	81fb      	strh	r3, [r7, #14]
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	441a      	add	r2, r3
 8009cfc:	89fb      	ldrh	r3, [r7, #14]
 8009cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	8013      	strh	r3, [r2, #0]
 8009d12:	e14d      	b.n	8009fb0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	785b      	ldrb	r3, [r3, #1]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f040 80a5 	bne.w	8009e68 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4413      	add	r3, r2
 8009d28:	881b      	ldrh	r3, [r3, #0]
 8009d2a:	843b      	strh	r3, [r7, #32]
 8009d2c:	8c3b      	ldrh	r3, [r7, #32]
 8009d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d01b      	beq.n	8009d6e <USB_DeactivateEndpoint+0x18a>
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	4413      	add	r3, r2
 8009d40:	881b      	ldrh	r3, [r3, #0]
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d4c:	83fb      	strh	r3, [r7, #30]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	441a      	add	r2, r3
 8009d58:	8bfb      	ldrh	r3, [r7, #30]
 8009d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	4413      	add	r3, r2
 8009d78:	881b      	ldrh	r3, [r3, #0]
 8009d7a:	83bb      	strh	r3, [r7, #28]
 8009d7c:	8bbb      	ldrh	r3, [r7, #28]
 8009d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d01b      	beq.n	8009dbe <USB_DeactivateEndpoint+0x1da>
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	4413      	add	r3, r2
 8009d90:	881b      	ldrh	r3, [r3, #0]
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d9c:	837b      	strh	r3, [r7, #26]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	441a      	add	r2, r3
 8009da8:	8b7b      	ldrh	r3, [r7, #26]
 8009daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009db6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	4413      	add	r3, r2
 8009dc8:	881b      	ldrh	r3, [r3, #0]
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dd4:	833b      	strh	r3, [r7, #24]
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	441a      	add	r2, r3
 8009de0:	8b3b      	ldrh	r3, [r7, #24]
 8009de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	4413      	add	r3, r2
 8009e00:	881b      	ldrh	r3, [r3, #0]
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e0c:	82fb      	strh	r3, [r7, #22]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	441a      	add	r2, r3
 8009e18:	8afb      	ldrh	r3, [r7, #22]
 8009e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	4413      	add	r3, r2
 8009e38:	881b      	ldrh	r3, [r3, #0]
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e44:	82bb      	strh	r3, [r7, #20]
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	441a      	add	r2, r3
 8009e50:	8abb      	ldrh	r3, [r7, #20]
 8009e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	8013      	strh	r3, [r2, #0]
 8009e66:	e0a3      	b.n	8009fb0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	881b      	ldrh	r3, [r3, #0]
 8009e74:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009e76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d01b      	beq.n	8009eb8 <USB_DeactivateEndpoint+0x2d4>
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4413      	add	r3, r2
 8009e8a:	881b      	ldrh	r3, [r3, #0]
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e96:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	441a      	add	r2, r3
 8009ea2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4413      	add	r3, r2
 8009ec2:	881b      	ldrh	r3, [r3, #0]
 8009ec4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009ec6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d01b      	beq.n	8009f08 <USB_DeactivateEndpoint+0x324>
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	881b      	ldrh	r3, [r3, #0]
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ee6:	853b      	strh	r3, [r7, #40]	; 0x28
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	441a      	add	r2, r3
 8009ef2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	4413      	add	r3, r2
 8009f12:	881b      	ldrh	r3, [r3, #0]
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f1e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	441a      	add	r2, r3
 8009f2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	4413      	add	r3, r2
 8009f4a:	881b      	ldrh	r3, [r3, #0]
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f56:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	441a      	add	r2, r3
 8009f62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4413      	add	r3, r2
 8009f82:	881b      	ldrh	r3, [r3, #0]
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f8e:	847b      	strh	r3, [r7, #34]	; 0x22
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	441a      	add	r2, r3
 8009f9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3734      	adds	r7, #52	; 0x34
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bc80      	pop	{r7}
 8009fba:	4770      	bx	lr

08009fbc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b0c4      	sub	sp, #272	; 0x110
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	1d3b      	adds	r3, r7, #4
 8009fc4:	6018      	str	r0, [r3, #0]
 8009fc6:	463b      	mov	r3, r7
 8009fc8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009fca:	463b      	mov	r3, r7
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	785b      	ldrb	r3, [r3, #1]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	f040 8557 	bne.w	800aa84 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009fd6:	463b      	mov	r3, r7
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	699a      	ldr	r2, [r3, #24]
 8009fdc:	463b      	mov	r3, r7
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	691b      	ldr	r3, [r3, #16]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d905      	bls.n	8009ff2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8009fe6:	463b      	mov	r3, r7
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009ff0:	e004      	b.n	8009ffc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8009ff2:	463b      	mov	r3, r7
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	699b      	ldr	r3, [r3, #24]
 8009ff8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009ffc:	463b      	mov	r3, r7
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	7b1b      	ldrb	r3, [r3, #12]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d12c      	bne.n	800a060 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a006:	463b      	mov	r3, r7
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	6959      	ldr	r1, [r3, #20]
 800a00c:	463b      	mov	r3, r7
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	88da      	ldrh	r2, [r3, #6]
 800a012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a016:	b29b      	uxth	r3, r3
 800a018:	1d38      	adds	r0, r7, #4
 800a01a:	6800      	ldr	r0, [r0, #0]
 800a01c:	f001 fa2c 	bl	800b478 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a020:	1d3b      	adds	r3, r7, #4
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	617b      	str	r3, [r7, #20]
 800a026:	1d3b      	adds	r3, r7, #4
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a02e:	b29b      	uxth	r3, r3
 800a030:	461a      	mov	r2, r3
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	4413      	add	r3, r2
 800a036:	617b      	str	r3, [r7, #20]
 800a038:	463b      	mov	r3, r7
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	011a      	lsls	r2, r3, #4
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	4413      	add	r3, r2
 800a044:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800a048:	f107 0310 	add.w	r3, r7, #16
 800a04c:	601a      	str	r2, [r3, #0]
 800a04e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a052:	b29a      	uxth	r2, r3
 800a054:	f107 0310 	add.w	r3, r7, #16
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	801a      	strh	r2, [r3, #0]
 800a05c:	f000 bcdd 	b.w	800aa1a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a060:	463b      	mov	r3, r7
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	78db      	ldrb	r3, [r3, #3]
 800a066:	2b02      	cmp	r3, #2
 800a068:	f040 8347 	bne.w	800a6fa <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a06c:	463b      	mov	r3, r7
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6a1a      	ldr	r2, [r3, #32]
 800a072:	463b      	mov	r3, r7
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	429a      	cmp	r2, r3
 800a07a:	f240 82eb 	bls.w	800a654 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800a07e:	1d3b      	adds	r3, r7, #4
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	463b      	mov	r3, r7
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	4413      	add	r3, r2
 800a08c:	881b      	ldrh	r3, [r3, #0]
 800a08e:	b29b      	uxth	r3, r3
 800a090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a098:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800a09c:	1d3b      	adds	r3, r7, #4
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	463b      	mov	r3, r7
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	441a      	add	r2, r3
 800a0aa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a0ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0b6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a0ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a0c2:	463b      	mov	r3, r7
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	6a1a      	ldr	r2, [r3, #32]
 800a0c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0cc:	1ad2      	subs	r2, r2, r3
 800a0ce:	463b      	mov	r3, r7
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a0d4:	1d3b      	adds	r3, r7, #4
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	463b      	mov	r3, r7
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4413      	add	r3, r2
 800a0e2:	881b      	ldrh	r3, [r3, #0]
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f000 8159 	beq.w	800a3a2 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a0f0:	1d3b      	adds	r3, r7, #4
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	637b      	str	r3, [r7, #52]	; 0x34
 800a0f6:	463b      	mov	r3, r7
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	785b      	ldrb	r3, [r3, #1]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d164      	bne.n	800a1ca <USB_EPStartXfer+0x20e>
 800a100:	1d3b      	adds	r3, r7, #4
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a106:	1d3b      	adds	r3, r7, #4
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a10e:	b29b      	uxth	r3, r3
 800a110:	461a      	mov	r2, r3
 800a112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a114:	4413      	add	r3, r2
 800a116:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a118:	463b      	mov	r3, r7
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	011a      	lsls	r2, r3, #4
 800a120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a122:	4413      	add	r3, r2
 800a124:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a128:	62bb      	str	r3, [r7, #40]	; 0x28
 800a12a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d112      	bne.n	800a158 <USB_EPStartXfer+0x19c>
 800a132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a134:	881b      	ldrh	r3, [r3, #0]
 800a136:	b29b      	uxth	r3, r3
 800a138:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a140:	801a      	strh	r2, [r3, #0]
 800a142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a144:	881b      	ldrh	r3, [r3, #0]
 800a146:	b29b      	uxth	r3, r3
 800a148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a14c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a150:	b29a      	uxth	r2, r3
 800a152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a154:	801a      	strh	r2, [r3, #0]
 800a156:	e054      	b.n	800a202 <USB_EPStartXfer+0x246>
 800a158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a15c:	2b3e      	cmp	r3, #62	; 0x3e
 800a15e:	d817      	bhi.n	800a190 <USB_EPStartXfer+0x1d4>
 800a160:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a164:	085b      	lsrs	r3, r3, #1
 800a166:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a16a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a16e:	f003 0301 	and.w	r3, r3, #1
 800a172:	2b00      	cmp	r3, #0
 800a174:	d004      	beq.n	800a180 <USB_EPStartXfer+0x1c4>
 800a176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a17a:	3301      	adds	r3, #1
 800a17c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a184:	b29b      	uxth	r3, r3
 800a186:	029b      	lsls	r3, r3, #10
 800a188:	b29a      	uxth	r2, r3
 800a18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18c:	801a      	strh	r2, [r3, #0]
 800a18e:	e038      	b.n	800a202 <USB_EPStartXfer+0x246>
 800a190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a194:	095b      	lsrs	r3, r3, #5
 800a196:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a19a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a19e:	f003 031f 	and.w	r3, r3, #31
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d104      	bne.n	800a1b0 <USB_EPStartXfer+0x1f4>
 800a1a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a1b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	029b      	lsls	r3, r3, #10
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c6:	801a      	strh	r2, [r3, #0]
 800a1c8:	e01b      	b.n	800a202 <USB_EPStartXfer+0x246>
 800a1ca:	463b      	mov	r3, r7
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	785b      	ldrb	r3, [r3, #1]
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d116      	bne.n	800a202 <USB_EPStartXfer+0x246>
 800a1d4:	1d3b      	adds	r3, r7, #4
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	461a      	mov	r2, r3
 800a1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e2:	4413      	add	r3, r2
 800a1e4:	637b      	str	r3, [r7, #52]	; 0x34
 800a1e6:	463b      	mov	r3, r7
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	011a      	lsls	r2, r3, #4
 800a1ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f0:	4413      	add	r3, r2
 800a1f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a1f6:	633b      	str	r3, [r7, #48]	; 0x30
 800a1f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a200:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a202:	463b      	mov	r3, r7
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	895b      	ldrh	r3, [r3, #10]
 800a208:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a20c:	463b      	mov	r3, r7
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	6959      	ldr	r1, [r3, #20]
 800a212:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a216:	b29b      	uxth	r3, r3
 800a218:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800a21c:	1d38      	adds	r0, r7, #4
 800a21e:	6800      	ldr	r0, [r0, #0]
 800a220:	f001 f92a 	bl	800b478 <USB_WritePMA>
            ep->xfer_buff += len;
 800a224:	463b      	mov	r3, r7
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	695a      	ldr	r2, [r3, #20]
 800a22a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a22e:	441a      	add	r2, r3
 800a230:	463b      	mov	r3, r7
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a236:	463b      	mov	r3, r7
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	6a1a      	ldr	r2, [r3, #32]
 800a23c:	463b      	mov	r3, r7
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	691b      	ldr	r3, [r3, #16]
 800a242:	429a      	cmp	r2, r3
 800a244:	d909      	bls.n	800a25a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800a246:	463b      	mov	r3, r7
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	6a1a      	ldr	r2, [r3, #32]
 800a24c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a250:	1ad2      	subs	r2, r2, r3
 800a252:	463b      	mov	r3, r7
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	621a      	str	r2, [r3, #32]
 800a258:	e008      	b.n	800a26c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800a25a:	463b      	mov	r3, r7
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	6a1b      	ldr	r3, [r3, #32]
 800a260:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800a264:	463b      	mov	r3, r7
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2200      	movs	r2, #0
 800a26a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a26c:	463b      	mov	r3, r7
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	785b      	ldrb	r3, [r3, #1]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d164      	bne.n	800a340 <USB_EPStartXfer+0x384>
 800a276:	1d3b      	adds	r3, r7, #4
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	61fb      	str	r3, [r7, #28]
 800a27c:	1d3b      	adds	r3, r7, #4
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a284:	b29b      	uxth	r3, r3
 800a286:	461a      	mov	r2, r3
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	4413      	add	r3, r2
 800a28c:	61fb      	str	r3, [r7, #28]
 800a28e:	463b      	mov	r3, r7
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	011a      	lsls	r2, r3, #4
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	4413      	add	r3, r2
 800a29a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a29e:	61bb      	str	r3, [r7, #24]
 800a2a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d112      	bne.n	800a2ce <USB_EPStartXfer+0x312>
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	881b      	ldrh	r3, [r3, #0]
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	801a      	strh	r2, [r3, #0]
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	881b      	ldrh	r3, [r3, #0]
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2c6:	b29a      	uxth	r2, r3
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	801a      	strh	r2, [r3, #0]
 800a2cc:	e057      	b.n	800a37e <USB_EPStartXfer+0x3c2>
 800a2ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2d2:	2b3e      	cmp	r3, #62	; 0x3e
 800a2d4:	d817      	bhi.n	800a306 <USB_EPStartXfer+0x34a>
 800a2d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2da:	085b      	lsrs	r3, r3, #1
 800a2dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a2e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2e4:	f003 0301 	and.w	r3, r3, #1
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d004      	beq.n	800a2f6 <USB_EPStartXfer+0x33a>
 800a2ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a2f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	029b      	lsls	r3, r3, #10
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	801a      	strh	r2, [r3, #0]
 800a304:	e03b      	b.n	800a37e <USB_EPStartXfer+0x3c2>
 800a306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a30a:	095b      	lsrs	r3, r3, #5
 800a30c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a310:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a314:	f003 031f 	and.w	r3, r3, #31
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d104      	bne.n	800a326 <USB_EPStartXfer+0x36a>
 800a31c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a320:	3b01      	subs	r3, #1
 800a322:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a326:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	029b      	lsls	r3, r3, #10
 800a32e:	b29b      	uxth	r3, r3
 800a330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a338:	b29a      	uxth	r2, r3
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	801a      	strh	r2, [r3, #0]
 800a33e:	e01e      	b.n	800a37e <USB_EPStartXfer+0x3c2>
 800a340:	463b      	mov	r3, r7
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	785b      	ldrb	r3, [r3, #1]
 800a346:	2b01      	cmp	r3, #1
 800a348:	d119      	bne.n	800a37e <USB_EPStartXfer+0x3c2>
 800a34a:	1d3b      	adds	r3, r7, #4
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	627b      	str	r3, [r7, #36]	; 0x24
 800a350:	1d3b      	adds	r3, r7, #4
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a358:	b29b      	uxth	r3, r3
 800a35a:	461a      	mov	r2, r3
 800a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35e:	4413      	add	r3, r2
 800a360:	627b      	str	r3, [r7, #36]	; 0x24
 800a362:	463b      	mov	r3, r7
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	011a      	lsls	r2, r3, #4
 800a36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36c:	4413      	add	r3, r2
 800a36e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a372:	623b      	str	r3, [r7, #32]
 800a374:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a378:	b29a      	uxth	r2, r3
 800a37a:	6a3b      	ldr	r3, [r7, #32]
 800a37c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a37e:	463b      	mov	r3, r7
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	891b      	ldrh	r3, [r3, #8]
 800a384:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a388:	463b      	mov	r3, r7
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	6959      	ldr	r1, [r3, #20]
 800a38e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a392:	b29b      	uxth	r3, r3
 800a394:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800a398:	1d38      	adds	r0, r7, #4
 800a39a:	6800      	ldr	r0, [r0, #0]
 800a39c:	f001 f86c 	bl	800b478 <USB_WritePMA>
 800a3a0:	e33b      	b.n	800aa1a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a3a2:	463b      	mov	r3, r7
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	785b      	ldrb	r3, [r3, #1]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d164      	bne.n	800a476 <USB_EPStartXfer+0x4ba>
 800a3ac:	1d3b      	adds	r3, r7, #4
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3b2:	1d3b      	adds	r3, r7, #4
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	461a      	mov	r2, r3
 800a3be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3c0:	4413      	add	r3, r2
 800a3c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3c4:	463b      	mov	r3, r7
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	011a      	lsls	r2, r3, #4
 800a3cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a3d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d112      	bne.n	800a404 <USB_EPStartXfer+0x448>
 800a3de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3e0:	881b      	ldrh	r3, [r3, #0]
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3ec:	801a      	strh	r2, [r3, #0]
 800a3ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3f0:	881b      	ldrh	r3, [r3, #0]
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a400:	801a      	strh	r2, [r3, #0]
 800a402:	e057      	b.n	800a4b4 <USB_EPStartXfer+0x4f8>
 800a404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a408:	2b3e      	cmp	r3, #62	; 0x3e
 800a40a:	d817      	bhi.n	800a43c <USB_EPStartXfer+0x480>
 800a40c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a410:	085b      	lsrs	r3, r3, #1
 800a412:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a41a:	f003 0301 	and.w	r3, r3, #1
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d004      	beq.n	800a42c <USB_EPStartXfer+0x470>
 800a422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a426:	3301      	adds	r3, #1
 800a428:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a42c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a430:	b29b      	uxth	r3, r3
 800a432:	029b      	lsls	r3, r3, #10
 800a434:	b29a      	uxth	r2, r3
 800a436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a438:	801a      	strh	r2, [r3, #0]
 800a43a:	e03b      	b.n	800a4b4 <USB_EPStartXfer+0x4f8>
 800a43c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a440:	095b      	lsrs	r3, r3, #5
 800a442:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a44a:	f003 031f 	and.w	r3, r3, #31
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d104      	bne.n	800a45c <USB_EPStartXfer+0x4a0>
 800a452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a456:	3b01      	subs	r3, #1
 800a458:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a45c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a460:	b29b      	uxth	r3, r3
 800a462:	029b      	lsls	r3, r3, #10
 800a464:	b29b      	uxth	r3, r3
 800a466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a46a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a46e:	b29a      	uxth	r2, r3
 800a470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a472:	801a      	strh	r2, [r3, #0]
 800a474:	e01e      	b.n	800a4b4 <USB_EPStartXfer+0x4f8>
 800a476:	463b      	mov	r3, r7
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	785b      	ldrb	r3, [r3, #1]
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d119      	bne.n	800a4b4 <USB_EPStartXfer+0x4f8>
 800a480:	1d3b      	adds	r3, r7, #4
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	657b      	str	r3, [r7, #84]	; 0x54
 800a486:	1d3b      	adds	r3, r7, #4
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a48e:	b29b      	uxth	r3, r3
 800a490:	461a      	mov	r2, r3
 800a492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a494:	4413      	add	r3, r2
 800a496:	657b      	str	r3, [r7, #84]	; 0x54
 800a498:	463b      	mov	r3, r7
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	011a      	lsls	r2, r3, #4
 800a4a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a4a8:	653b      	str	r3, [r7, #80]	; 0x50
 800a4aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a4ae:	b29a      	uxth	r2, r3
 800a4b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a4b4:	463b      	mov	r3, r7
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	891b      	ldrh	r3, [r3, #8]
 800a4ba:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4be:	463b      	mov	r3, r7
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	6959      	ldr	r1, [r3, #20]
 800a4c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800a4ce:	1d38      	adds	r0, r7, #4
 800a4d0:	6800      	ldr	r0, [r0, #0]
 800a4d2:	f000 ffd1 	bl	800b478 <USB_WritePMA>
            ep->xfer_buff += len;
 800a4d6:	463b      	mov	r3, r7
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	695a      	ldr	r2, [r3, #20]
 800a4dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a4e0:	441a      	add	r2, r3
 800a4e2:	463b      	mov	r3, r7
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a4e8:	463b      	mov	r3, r7
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	6a1a      	ldr	r2, [r3, #32]
 800a4ee:	463b      	mov	r3, r7
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d909      	bls.n	800a50c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 800a4f8:	463b      	mov	r3, r7
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6a1a      	ldr	r2, [r3, #32]
 800a4fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a502:	1ad2      	subs	r2, r2, r3
 800a504:	463b      	mov	r3, r7
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	621a      	str	r2, [r3, #32]
 800a50a:	e008      	b.n	800a51e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 800a50c:	463b      	mov	r3, r7
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6a1b      	ldr	r3, [r3, #32]
 800a512:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800a516:	463b      	mov	r3, r7
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2200      	movs	r2, #0
 800a51c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a51e:	1d3b      	adds	r3, r7, #4
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	647b      	str	r3, [r7, #68]	; 0x44
 800a524:	463b      	mov	r3, r7
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	785b      	ldrb	r3, [r3, #1]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d164      	bne.n	800a5f8 <USB_EPStartXfer+0x63c>
 800a52e:	1d3b      	adds	r3, r7, #4
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a534:	1d3b      	adds	r3, r7, #4
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	461a      	mov	r2, r3
 800a540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a542:	4413      	add	r3, r2
 800a544:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a546:	463b      	mov	r3, r7
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	011a      	lsls	r2, r3, #4
 800a54e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a550:	4413      	add	r3, r2
 800a552:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a556:	63bb      	str	r3, [r7, #56]	; 0x38
 800a558:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d112      	bne.n	800a586 <USB_EPStartXfer+0x5ca>
 800a560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a562:	881b      	ldrh	r3, [r3, #0]
 800a564:	b29b      	uxth	r3, r3
 800a566:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56e:	801a      	strh	r2, [r3, #0]
 800a570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a572:	881b      	ldrh	r3, [r3, #0]
 800a574:	b29b      	uxth	r3, r3
 800a576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a57a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a57e:	b29a      	uxth	r2, r3
 800a580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a582:	801a      	strh	r2, [r3, #0]
 800a584:	e054      	b.n	800a630 <USB_EPStartXfer+0x674>
 800a586:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a58a:	2b3e      	cmp	r3, #62	; 0x3e
 800a58c:	d817      	bhi.n	800a5be <USB_EPStartXfer+0x602>
 800a58e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a592:	085b      	lsrs	r3, r3, #1
 800a594:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a598:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a59c:	f003 0301 	and.w	r3, r3, #1
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d004      	beq.n	800a5ae <USB_EPStartXfer+0x5f2>
 800a5a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a5ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	029b      	lsls	r3, r3, #10
 800a5b6:	b29a      	uxth	r2, r3
 800a5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ba:	801a      	strh	r2, [r3, #0]
 800a5bc:	e038      	b.n	800a630 <USB_EPStartXfer+0x674>
 800a5be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5c2:	095b      	lsrs	r3, r3, #5
 800a5c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a5c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5cc:	f003 031f 	and.w	r3, r3, #31
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d104      	bne.n	800a5de <USB_EPStartXfer+0x622>
 800a5d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a5de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	029b      	lsls	r3, r3, #10
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5f0:	b29a      	uxth	r2, r3
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f4:	801a      	strh	r2, [r3, #0]
 800a5f6:	e01b      	b.n	800a630 <USB_EPStartXfer+0x674>
 800a5f8:	463b      	mov	r3, r7
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	785b      	ldrb	r3, [r3, #1]
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d116      	bne.n	800a630 <USB_EPStartXfer+0x674>
 800a602:	1d3b      	adds	r3, r7, #4
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	461a      	mov	r2, r3
 800a60e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a610:	4413      	add	r3, r2
 800a612:	647b      	str	r3, [r7, #68]	; 0x44
 800a614:	463b      	mov	r3, r7
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	011a      	lsls	r2, r3, #4
 800a61c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a61e:	4413      	add	r3, r2
 800a620:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a624:	643b      	str	r3, [r7, #64]	; 0x40
 800a626:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a62e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a630:	463b      	mov	r3, r7
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	895b      	ldrh	r3, [r3, #10]
 800a636:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a63a:	463b      	mov	r3, r7
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	6959      	ldr	r1, [r3, #20]
 800a640:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a644:	b29b      	uxth	r3, r3
 800a646:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800a64a:	1d38      	adds	r0, r7, #4
 800a64c:	6800      	ldr	r0, [r0, #0]
 800a64e:	f000 ff13 	bl	800b478 <USB_WritePMA>
 800a652:	e1e2      	b.n	800aa1a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a654:	463b      	mov	r3, r7
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	6a1b      	ldr	r3, [r3, #32]
 800a65a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800a65e:	1d3b      	adds	r3, r7, #4
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	463b      	mov	r3, r7
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	4413      	add	r3, r2
 800a66c:	881b      	ldrh	r3, [r3, #0]
 800a66e:	b29b      	uxth	r3, r3
 800a670:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a678:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a67c:	1d3b      	adds	r3, r7, #4
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	463b      	mov	r3, r7
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	441a      	add	r2, r3
 800a68a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a68e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a69a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a6a2:	1d3b      	adds	r3, r7, #4
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	663b      	str	r3, [r7, #96]	; 0x60
 800a6a8:	1d3b      	adds	r3, r7, #4
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a6b6:	4413      	add	r3, r2
 800a6b8:	663b      	str	r3, [r7, #96]	; 0x60
 800a6ba:	463b      	mov	r3, r7
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	011a      	lsls	r2, r3, #4
 800a6c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a6c4:	4413      	add	r3, r2
 800a6c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a6ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a6d0:	b29a      	uxth	r2, r3
 800a6d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a6d6:	463b      	mov	r3, r7
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	891b      	ldrh	r3, [r3, #8]
 800a6dc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a6e0:	463b      	mov	r3, r7
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	6959      	ldr	r1, [r3, #20]
 800a6e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800a6f0:	1d38      	adds	r0, r7, #4
 800a6f2:	6800      	ldr	r0, [r0, #0]
 800a6f4:	f000 fec0 	bl	800b478 <USB_WritePMA>
 800a6f8:	e18f      	b.n	800aa1a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a6fa:	1d3b      	adds	r3, r7, #4
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	463b      	mov	r3, r7
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	4413      	add	r3, r2
 800a708:	881b      	ldrh	r3, [r3, #0]
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 808f 	beq.w	800a834 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a716:	1d3b      	adds	r3, r7, #4
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	67bb      	str	r3, [r7, #120]	; 0x78
 800a71c:	463b      	mov	r3, r7
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	785b      	ldrb	r3, [r3, #1]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d164      	bne.n	800a7f0 <USB_EPStartXfer+0x834>
 800a726:	1d3b      	adds	r3, r7, #4
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	673b      	str	r3, [r7, #112]	; 0x70
 800a72c:	1d3b      	adds	r3, r7, #4
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a734:	b29b      	uxth	r3, r3
 800a736:	461a      	mov	r2, r3
 800a738:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a73a:	4413      	add	r3, r2
 800a73c:	673b      	str	r3, [r7, #112]	; 0x70
 800a73e:	463b      	mov	r3, r7
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	011a      	lsls	r2, r3, #4
 800a746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a748:	4413      	add	r3, r2
 800a74a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a74e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a750:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a754:	2b00      	cmp	r3, #0
 800a756:	d112      	bne.n	800a77e <USB_EPStartXfer+0x7c2>
 800a758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a75a:	881b      	ldrh	r3, [r3, #0]
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a762:	b29a      	uxth	r2, r3
 800a764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a766:	801a      	strh	r2, [r3, #0]
 800a768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a76a:	881b      	ldrh	r3, [r3, #0]
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a776:	b29a      	uxth	r2, r3
 800a778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a77a:	801a      	strh	r2, [r3, #0]
 800a77c:	e054      	b.n	800a828 <USB_EPStartXfer+0x86c>
 800a77e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a782:	2b3e      	cmp	r3, #62	; 0x3e
 800a784:	d817      	bhi.n	800a7b6 <USB_EPStartXfer+0x7fa>
 800a786:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a78a:	085b      	lsrs	r3, r3, #1
 800a78c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a790:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a794:	f003 0301 	and.w	r3, r3, #1
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d004      	beq.n	800a7a6 <USB_EPStartXfer+0x7ea>
 800a79c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a7a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	029b      	lsls	r3, r3, #10
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7b2:	801a      	strh	r2, [r3, #0]
 800a7b4:	e038      	b.n	800a828 <USB_EPStartXfer+0x86c>
 800a7b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a7ba:	095b      	lsrs	r3, r3, #5
 800a7bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a7c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a7c4:	f003 031f 	and.w	r3, r3, #31
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d104      	bne.n	800a7d6 <USB_EPStartXfer+0x81a>
 800a7cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a7d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	029b      	lsls	r3, r3, #10
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7e8:	b29a      	uxth	r2, r3
 800a7ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7ec:	801a      	strh	r2, [r3, #0]
 800a7ee:	e01b      	b.n	800a828 <USB_EPStartXfer+0x86c>
 800a7f0:	463b      	mov	r3, r7
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	785b      	ldrb	r3, [r3, #1]
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d116      	bne.n	800a828 <USB_EPStartXfer+0x86c>
 800a7fa:	1d3b      	adds	r3, r7, #4
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a802:	b29b      	uxth	r3, r3
 800a804:	461a      	mov	r2, r3
 800a806:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a808:	4413      	add	r3, r2
 800a80a:	67bb      	str	r3, [r7, #120]	; 0x78
 800a80c:	463b      	mov	r3, r7
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	011a      	lsls	r2, r3, #4
 800a814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a816:	4413      	add	r3, r2
 800a818:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a81c:	677b      	str	r3, [r7, #116]	; 0x74
 800a81e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a822:	b29a      	uxth	r2, r3
 800a824:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a826:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a828:	463b      	mov	r3, r7
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	895b      	ldrh	r3, [r3, #10]
 800a82e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800a832:	e097      	b.n	800a964 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a834:	463b      	mov	r3, r7
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	785b      	ldrb	r3, [r3, #1]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d168      	bne.n	800a910 <USB_EPStartXfer+0x954>
 800a83e:	1d3b      	adds	r3, r7, #4
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a846:	1d3b      	adds	r3, r7, #4
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a84e:	b29b      	uxth	r3, r3
 800a850:	461a      	mov	r2, r3
 800a852:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a856:	4413      	add	r3, r2
 800a858:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a85c:	463b      	mov	r3, r7
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	011a      	lsls	r2, r3, #4
 800a864:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a868:	4413      	add	r3, r2
 800a86a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a86e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a870:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a874:	2b00      	cmp	r3, #0
 800a876:	d112      	bne.n	800a89e <USB_EPStartXfer+0x8e2>
 800a878:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a87a:	881b      	ldrh	r3, [r3, #0]
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a882:	b29a      	uxth	r2, r3
 800a884:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a886:	801a      	strh	r2, [r3, #0]
 800a888:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a88a:	881b      	ldrh	r3, [r3, #0]
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a896:	b29a      	uxth	r2, r3
 800a898:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a89a:	801a      	strh	r2, [r3, #0]
 800a89c:	e05d      	b.n	800a95a <USB_EPStartXfer+0x99e>
 800a89e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a8a2:	2b3e      	cmp	r3, #62	; 0x3e
 800a8a4:	d817      	bhi.n	800a8d6 <USB_EPStartXfer+0x91a>
 800a8a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a8aa:	085b      	lsrs	r3, r3, #1
 800a8ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a8b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a8b4:	f003 0301 	and.w	r3, r3, #1
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d004      	beq.n	800a8c6 <USB_EPStartXfer+0x90a>
 800a8bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a8c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	029b      	lsls	r3, r3, #10
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8d2:	801a      	strh	r2, [r3, #0]
 800a8d4:	e041      	b.n	800a95a <USB_EPStartXfer+0x99e>
 800a8d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a8da:	095b      	lsrs	r3, r3, #5
 800a8dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a8e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a8e4:	f003 031f 	and.w	r3, r3, #31
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d104      	bne.n	800a8f6 <USB_EPStartXfer+0x93a>
 800a8ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a8f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	029b      	lsls	r3, r3, #10
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a908:	b29a      	uxth	r2, r3
 800a90a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a90c:	801a      	strh	r2, [r3, #0]
 800a90e:	e024      	b.n	800a95a <USB_EPStartXfer+0x99e>
 800a910:	463b      	mov	r3, r7
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	785b      	ldrb	r3, [r3, #1]
 800a916:	2b01      	cmp	r3, #1
 800a918:	d11f      	bne.n	800a95a <USB_EPStartXfer+0x99e>
 800a91a:	1d3b      	adds	r3, r7, #4
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a922:	1d3b      	adds	r3, r7, #4
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	461a      	mov	r2, r3
 800a92e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a932:	4413      	add	r3, r2
 800a934:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a938:	463b      	mov	r3, r7
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	011a      	lsls	r2, r3, #4
 800a940:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a944:	4413      	add	r3, r2
 800a946:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a94a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a94e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a952:	b29a      	uxth	r2, r3
 800a954:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a958:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a95a:	463b      	mov	r3, r7
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	891b      	ldrh	r3, [r3, #8]
 800a960:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a964:	463b      	mov	r3, r7
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	6959      	ldr	r1, [r3, #20]
 800a96a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a96e:	b29b      	uxth	r3, r3
 800a970:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800a974:	1d38      	adds	r0, r7, #4
 800a976:	6800      	ldr	r0, [r0, #0]
 800a978:	f000 fd7e 	bl	800b478 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800a97c:	463b      	mov	r3, r7
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	785b      	ldrb	r3, [r3, #1]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d122      	bne.n	800a9cc <USB_EPStartXfer+0xa10>
 800a986:	1d3b      	adds	r3, r7, #4
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	463b      	mov	r3, r7
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	4413      	add	r3, r2
 800a994:	881b      	ldrh	r3, [r3, #0]
 800a996:	b29b      	uxth	r3, r3
 800a998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a99c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9a0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800a9a4:	1d3b      	adds	r3, r7, #4
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	463b      	mov	r3, r7
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	441a      	add	r2, r3
 800a9b2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800a9b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	8013      	strh	r3, [r2, #0]
 800a9ca:	e026      	b.n	800aa1a <USB_EPStartXfer+0xa5e>
 800a9cc:	463b      	mov	r3, r7
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	785b      	ldrb	r3, [r3, #1]
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d121      	bne.n	800aa1a <USB_EPStartXfer+0xa5e>
 800a9d6:	1d3b      	adds	r3, r7, #4
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	463b      	mov	r3, r7
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	4413      	add	r3, r2
 800a9e4:	881b      	ldrh	r3, [r3, #0]
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9f0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800a9f4:	1d3b      	adds	r3, r7, #4
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	463b      	mov	r3, r7
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	441a      	add	r2, r3
 800aa02:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800aa06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800aa1a:	1d3b      	adds	r3, r7, #4
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	463b      	mov	r3, r7
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	4413      	add	r3, r2
 800aa28:	881b      	ldrh	r3, [r3, #0]
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	f107 020e 	add.w	r2, r7, #14
 800aa30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa38:	8013      	strh	r3, [r2, #0]
 800aa3a:	f107 030e 	add.w	r3, r7, #14
 800aa3e:	f107 020e 	add.w	r2, r7, #14
 800aa42:	8812      	ldrh	r2, [r2, #0]
 800aa44:	f082 0210 	eor.w	r2, r2, #16
 800aa48:	801a      	strh	r2, [r3, #0]
 800aa4a:	f107 030e 	add.w	r3, r7, #14
 800aa4e:	f107 020e 	add.w	r2, r7, #14
 800aa52:	8812      	ldrh	r2, [r2, #0]
 800aa54:	f082 0220 	eor.w	r2, r2, #32
 800aa58:	801a      	strh	r2, [r3, #0]
 800aa5a:	1d3b      	adds	r3, r7, #4
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	463b      	mov	r3, r7
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	441a      	add	r2, r3
 800aa68:	f107 030e 	add.w	r3, r7, #14
 800aa6c:	881b      	ldrh	r3, [r3, #0]
 800aa6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	8013      	strh	r3, [r2, #0]
 800aa82:	e3b5      	b.n	800b1f0 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800aa84:	463b      	mov	r3, r7
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	7b1b      	ldrb	r3, [r3, #12]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f040 8090 	bne.w	800abb0 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800aa90:	463b      	mov	r3, r7
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	699a      	ldr	r2, [r3, #24]
 800aa96:	463b      	mov	r3, r7
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	691b      	ldr	r3, [r3, #16]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d90e      	bls.n	800aabe <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 800aaa0:	463b      	mov	r3, r7
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800aaaa:	463b      	mov	r3, r7
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	699a      	ldr	r2, [r3, #24]
 800aab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800aab4:	1ad2      	subs	r2, r2, r3
 800aab6:	463b      	mov	r3, r7
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	619a      	str	r2, [r3, #24]
 800aabc:	e008      	b.n	800aad0 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800aabe:	463b      	mov	r3, r7
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	699b      	ldr	r3, [r3, #24]
 800aac4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 800aac8:	463b      	mov	r3, r7
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2200      	movs	r2, #0
 800aace:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800aad0:	1d3b      	adds	r3, r7, #4
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800aad8:	1d3b      	adds	r3, r7, #4
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	461a      	mov	r2, r3
 800aae4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aae8:	4413      	add	r3, r2
 800aaea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800aaee:	463b      	mov	r3, r7
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	011a      	lsls	r2, r3, #4
 800aaf6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aafa:	4413      	add	r3, r2
 800aafc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ab00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ab04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d116      	bne.n	800ab3a <USB_EPStartXfer+0xb7e>
 800ab0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ab10:	881b      	ldrh	r3, [r3, #0]
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ab1e:	801a      	strh	r2, [r3, #0]
 800ab20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ab24:	881b      	ldrh	r3, [r3, #0]
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ab36:	801a      	strh	r2, [r3, #0]
 800ab38:	e32c      	b.n	800b194 <USB_EPStartXfer+0x11d8>
 800ab3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ab3e:	2b3e      	cmp	r3, #62	; 0x3e
 800ab40:	d818      	bhi.n	800ab74 <USB_EPStartXfer+0xbb8>
 800ab42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ab46:	085b      	lsrs	r3, r3, #1
 800ab48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ab4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ab50:	f003 0301 	and.w	r3, r3, #1
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d004      	beq.n	800ab62 <USB_EPStartXfer+0xba6>
 800ab58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ab62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	029b      	lsls	r3, r3, #10
 800ab6a:	b29a      	uxth	r2, r3
 800ab6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ab70:	801a      	strh	r2, [r3, #0]
 800ab72:	e30f      	b.n	800b194 <USB_EPStartXfer+0x11d8>
 800ab74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ab78:	095b      	lsrs	r3, r3, #5
 800ab7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ab7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ab82:	f003 031f 	and.w	r3, r3, #31
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d104      	bne.n	800ab94 <USB_EPStartXfer+0xbd8>
 800ab8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ab94:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	029b      	lsls	r3, r3, #10
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800abac:	801a      	strh	r2, [r3, #0]
 800abae:	e2f1      	b.n	800b194 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800abb0:	463b      	mov	r3, r7
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	78db      	ldrb	r3, [r3, #3]
 800abb6:	2b02      	cmp	r3, #2
 800abb8:	f040 818f 	bne.w	800aeda <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800abbc:	463b      	mov	r3, r7
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	785b      	ldrb	r3, [r3, #1]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d175      	bne.n	800acb2 <USB_EPStartXfer+0xcf6>
 800abc6:	1d3b      	adds	r3, r7, #4
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800abce:	1d3b      	adds	r3, r7, #4
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	461a      	mov	r2, r3
 800abda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800abde:	4413      	add	r3, r2
 800abe0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800abe4:	463b      	mov	r3, r7
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	011a      	lsls	r2, r3, #4
 800abec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800abf0:	4413      	add	r3, r2
 800abf2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800abf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800abfa:	463b      	mov	r3, r7
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	691b      	ldr	r3, [r3, #16]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d116      	bne.n	800ac32 <USB_EPStartXfer+0xc76>
 800ac04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac08:	881b      	ldrh	r3, [r3, #0]
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac16:	801a      	strh	r2, [r3, #0]
 800ac18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac1c:	881b      	ldrh	r3, [r3, #0]
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac2e:	801a      	strh	r2, [r3, #0]
 800ac30:	e065      	b.n	800acfe <USB_EPStartXfer+0xd42>
 800ac32:	463b      	mov	r3, r7
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	691b      	ldr	r3, [r3, #16]
 800ac38:	2b3e      	cmp	r3, #62	; 0x3e
 800ac3a:	d81a      	bhi.n	800ac72 <USB_EPStartXfer+0xcb6>
 800ac3c:	463b      	mov	r3, r7
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	085b      	lsrs	r3, r3, #1
 800ac44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ac48:	463b      	mov	r3, r7
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	f003 0301 	and.w	r3, r3, #1
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d004      	beq.n	800ac60 <USB_EPStartXfer+0xca4>
 800ac56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ac60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	029b      	lsls	r3, r3, #10
 800ac68:	b29a      	uxth	r2, r3
 800ac6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac6e:	801a      	strh	r2, [r3, #0]
 800ac70:	e045      	b.n	800acfe <USB_EPStartXfer+0xd42>
 800ac72:	463b      	mov	r3, r7
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	691b      	ldr	r3, [r3, #16]
 800ac78:	095b      	lsrs	r3, r3, #5
 800ac7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ac7e:	463b      	mov	r3, r7
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	691b      	ldr	r3, [r3, #16]
 800ac84:	f003 031f 	and.w	r3, r3, #31
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d104      	bne.n	800ac96 <USB_EPStartXfer+0xcda>
 800ac8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ac90:	3b01      	subs	r3, #1
 800ac92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ac96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	029b      	lsls	r3, r3, #10
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800acae:	801a      	strh	r2, [r3, #0]
 800acb0:	e025      	b.n	800acfe <USB_EPStartXfer+0xd42>
 800acb2:	463b      	mov	r3, r7
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	785b      	ldrb	r3, [r3, #1]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d120      	bne.n	800acfe <USB_EPStartXfer+0xd42>
 800acbc:	1d3b      	adds	r3, r7, #4
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800acc4:	1d3b      	adds	r3, r7, #4
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800accc:	b29b      	uxth	r3, r3
 800acce:	461a      	mov	r2, r3
 800acd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800acd4:	4413      	add	r3, r2
 800acd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800acda:	463b      	mov	r3, r7
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	011a      	lsls	r2, r3, #4
 800ace2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ace6:	4413      	add	r3, r2
 800ace8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800acec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800acf0:	463b      	mov	r3, r7
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	691b      	ldr	r3, [r3, #16]
 800acf6:	b29a      	uxth	r2, r3
 800acf8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800acfc:	801a      	strh	r2, [r3, #0]
 800acfe:	1d3b      	adds	r3, r7, #4
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ad06:	463b      	mov	r3, r7
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	785b      	ldrb	r3, [r3, #1]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d175      	bne.n	800adfc <USB_EPStartXfer+0xe40>
 800ad10:	1d3b      	adds	r3, r7, #4
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ad18:	1d3b      	adds	r3, r7, #4
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	461a      	mov	r2, r3
 800ad24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad28:	4413      	add	r3, r2
 800ad2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ad2e:	463b      	mov	r3, r7
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	011a      	lsls	r2, r3, #4
 800ad36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad3a:	4413      	add	r3, r2
 800ad3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ad40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ad44:	463b      	mov	r3, r7
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d116      	bne.n	800ad7c <USB_EPStartXfer+0xdc0>
 800ad4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad52:	881b      	ldrh	r3, [r3, #0]
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad5a:	b29a      	uxth	r2, r3
 800ad5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad60:	801a      	strh	r2, [r3, #0]
 800ad62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad66:	881b      	ldrh	r3, [r3, #0]
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad72:	b29a      	uxth	r2, r3
 800ad74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad78:	801a      	strh	r2, [r3, #0]
 800ad7a:	e061      	b.n	800ae40 <USB_EPStartXfer+0xe84>
 800ad7c:	463b      	mov	r3, r7
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	691b      	ldr	r3, [r3, #16]
 800ad82:	2b3e      	cmp	r3, #62	; 0x3e
 800ad84:	d81a      	bhi.n	800adbc <USB_EPStartXfer+0xe00>
 800ad86:	463b      	mov	r3, r7
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	085b      	lsrs	r3, r3, #1
 800ad8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ad92:	463b      	mov	r3, r7
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	691b      	ldr	r3, [r3, #16]
 800ad98:	f003 0301 	and.w	r3, r3, #1
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d004      	beq.n	800adaa <USB_EPStartXfer+0xdee>
 800ada0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ada4:	3301      	adds	r3, #1
 800ada6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800adaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adae:	b29b      	uxth	r3, r3
 800adb0:	029b      	lsls	r3, r3, #10
 800adb2:	b29a      	uxth	r2, r3
 800adb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800adb8:	801a      	strh	r2, [r3, #0]
 800adba:	e041      	b.n	800ae40 <USB_EPStartXfer+0xe84>
 800adbc:	463b      	mov	r3, r7
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	691b      	ldr	r3, [r3, #16]
 800adc2:	095b      	lsrs	r3, r3, #5
 800adc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800adc8:	463b      	mov	r3, r7
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	691b      	ldr	r3, [r3, #16]
 800adce:	f003 031f 	and.w	r3, r3, #31
 800add2:	2b00      	cmp	r3, #0
 800add4:	d104      	bne.n	800ade0 <USB_EPStartXfer+0xe24>
 800add6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adda:	3b01      	subs	r3, #1
 800addc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ade0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	029b      	lsls	r3, r3, #10
 800ade8:	b29b      	uxth	r3, r3
 800adea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adf2:	b29a      	uxth	r2, r3
 800adf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800adf8:	801a      	strh	r2, [r3, #0]
 800adfa:	e021      	b.n	800ae40 <USB_EPStartXfer+0xe84>
 800adfc:	463b      	mov	r3, r7
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	785b      	ldrb	r3, [r3, #1]
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d11c      	bne.n	800ae40 <USB_EPStartXfer+0xe84>
 800ae06:	1d3b      	adds	r3, r7, #4
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	461a      	mov	r2, r3
 800ae12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ae16:	4413      	add	r3, r2
 800ae18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ae1c:	463b      	mov	r3, r7
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	011a      	lsls	r2, r3, #4
 800ae24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ae28:	4413      	add	r3, r2
 800ae2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ae2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ae32:	463b      	mov	r3, r7
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	691b      	ldr	r3, [r3, #16]
 800ae38:	b29a      	uxth	r2, r3
 800ae3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ae3e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ae40:	463b      	mov	r3, r7
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	69db      	ldr	r3, [r3, #28]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	f000 81a4 	beq.w	800b194 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ae4c:	1d3b      	adds	r3, r7, #4
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	463b      	mov	r3, r7
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4413      	add	r3, r2
 800ae5a:	881b      	ldrh	r3, [r3, #0]
 800ae5c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ae60:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800ae64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d005      	beq.n	800ae78 <USB_EPStartXfer+0xebc>
 800ae6c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800ae70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d10d      	bne.n	800ae94 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ae78:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800ae7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	f040 8187 	bne.w	800b194 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ae86:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800ae8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	f040 8180 	bne.w	800b194 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800ae94:	1d3b      	adds	r3, r7, #4
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	463b      	mov	r3, r7
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4413      	add	r3, r2
 800aea2:	881b      	ldrh	r3, [r3, #0]
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aeaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeae:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800aeb2:	1d3b      	adds	r3, r7, #4
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	463b      	mov	r3, r7
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	441a      	add	r2, r3
 800aec0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800aec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aed0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	8013      	strh	r3, [r2, #0]
 800aed8:	e15c      	b.n	800b194 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800aeda:	463b      	mov	r3, r7
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	78db      	ldrb	r3, [r3, #3]
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	f040 8155 	bne.w	800b190 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800aee6:	463b      	mov	r3, r7
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	699a      	ldr	r2, [r3, #24]
 800aeec:	463b      	mov	r3, r7
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	691b      	ldr	r3, [r3, #16]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d90e      	bls.n	800af14 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800aef6:	463b      	mov	r3, r7
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	691b      	ldr	r3, [r3, #16]
 800aefc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 800af00:	463b      	mov	r3, r7
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	699a      	ldr	r2, [r3, #24]
 800af06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800af0a:	1ad2      	subs	r2, r2, r3
 800af0c:	463b      	mov	r3, r7
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	619a      	str	r2, [r3, #24]
 800af12:	e008      	b.n	800af26 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 800af14:	463b      	mov	r3, r7
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	699b      	ldr	r3, [r3, #24]
 800af1a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800af1e:	463b      	mov	r3, r7
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2200      	movs	r2, #0
 800af24:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800af26:	463b      	mov	r3, r7
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	785b      	ldrb	r3, [r3, #1]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d16f      	bne.n	800b010 <USB_EPStartXfer+0x1054>
 800af30:	1d3b      	adds	r3, r7, #4
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af38:	1d3b      	adds	r3, r7, #4
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af40:	b29b      	uxth	r3, r3
 800af42:	461a      	mov	r2, r3
 800af44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800af48:	4413      	add	r3, r2
 800af4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af4e:	463b      	mov	r3, r7
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	011a      	lsls	r2, r3, #4
 800af56:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800af5a:	4413      	add	r3, r2
 800af5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800af60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800af64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d116      	bne.n	800af9a <USB_EPStartXfer+0xfde>
 800af6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800af70:	881b      	ldrh	r3, [r3, #0]
 800af72:	b29b      	uxth	r3, r3
 800af74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800af78:	b29a      	uxth	r2, r3
 800af7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800af7e:	801a      	strh	r2, [r3, #0]
 800af80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800af84:	881b      	ldrh	r3, [r3, #0]
 800af86:	b29b      	uxth	r3, r3
 800af88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af90:	b29a      	uxth	r2, r3
 800af92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800af96:	801a      	strh	r2, [r3, #0]
 800af98:	e05f      	b.n	800b05a <USB_EPStartXfer+0x109e>
 800af9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800af9e:	2b3e      	cmp	r3, #62	; 0x3e
 800afa0:	d818      	bhi.n	800afd4 <USB_EPStartXfer+0x1018>
 800afa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800afa6:	085b      	lsrs	r3, r3, #1
 800afa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800afac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800afb0:	f003 0301 	and.w	r3, r3, #1
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d004      	beq.n	800afc2 <USB_EPStartXfer+0x1006>
 800afb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afbc:	3301      	adds	r3, #1
 800afbe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800afc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	029b      	lsls	r3, r3, #10
 800afca:	b29a      	uxth	r2, r3
 800afcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800afd0:	801a      	strh	r2, [r3, #0]
 800afd2:	e042      	b.n	800b05a <USB_EPStartXfer+0x109e>
 800afd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800afd8:	095b      	lsrs	r3, r3, #5
 800afda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800afde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800afe2:	f003 031f 	and.w	r3, r3, #31
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d104      	bne.n	800aff4 <USB_EPStartXfer+0x1038>
 800afea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afee:	3b01      	subs	r3, #1
 800aff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aff8:	b29b      	uxth	r3, r3
 800affa:	029b      	lsls	r3, r3, #10
 800affc:	b29b      	uxth	r3, r3
 800affe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b006:	b29a      	uxth	r2, r3
 800b008:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b00c:	801a      	strh	r2, [r3, #0]
 800b00e:	e024      	b.n	800b05a <USB_EPStartXfer+0x109e>
 800b010:	463b      	mov	r3, r7
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	785b      	ldrb	r3, [r3, #1]
 800b016:	2b01      	cmp	r3, #1
 800b018:	d11f      	bne.n	800b05a <USB_EPStartXfer+0x109e>
 800b01a:	1d3b      	adds	r3, r7, #4
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b022:	1d3b      	adds	r3, r7, #4
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	461a      	mov	r2, r3
 800b02e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b032:	4413      	add	r3, r2
 800b034:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b038:	463b      	mov	r3, r7
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	011a      	lsls	r2, r3, #4
 800b040:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b044:	4413      	add	r3, r2
 800b046:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b04a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b04e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b052:	b29a      	uxth	r2, r3
 800b054:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b058:	801a      	strh	r2, [r3, #0]
 800b05a:	1d3b      	adds	r3, r7, #4
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b062:	463b      	mov	r3, r7
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	785b      	ldrb	r3, [r3, #1]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d16f      	bne.n	800b14c <USB_EPStartXfer+0x1190>
 800b06c:	1d3b      	adds	r3, r7, #4
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b074:	1d3b      	adds	r3, r7, #4
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	461a      	mov	r2, r3
 800b080:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b084:	4413      	add	r3, r2
 800b086:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b08a:	463b      	mov	r3, r7
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	011a      	lsls	r2, r3, #4
 800b092:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b096:	4413      	add	r3, r2
 800b098:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b09c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b0a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d116      	bne.n	800b0d6 <USB_EPStartXfer+0x111a>
 800b0a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b0ac:	881b      	ldrh	r3, [r3, #0]
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b0b4:	b29a      	uxth	r2, r3
 800b0b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b0ba:	801a      	strh	r2, [r3, #0]
 800b0bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b0c0:	881b      	ldrh	r3, [r3, #0]
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b0d2:	801a      	strh	r2, [r3, #0]
 800b0d4:	e05e      	b.n	800b194 <USB_EPStartXfer+0x11d8>
 800b0d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b0da:	2b3e      	cmp	r3, #62	; 0x3e
 800b0dc:	d818      	bhi.n	800b110 <USB_EPStartXfer+0x1154>
 800b0de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b0e2:	085b      	lsrs	r3, r3, #1
 800b0e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b0e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b0ec:	f003 0301 	and.w	r3, r3, #1
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d004      	beq.n	800b0fe <USB_EPStartXfer+0x1142>
 800b0f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b0fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b102:	b29b      	uxth	r3, r3
 800b104:	029b      	lsls	r3, r3, #10
 800b106:	b29a      	uxth	r2, r3
 800b108:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b10c:	801a      	strh	r2, [r3, #0]
 800b10e:	e041      	b.n	800b194 <USB_EPStartXfer+0x11d8>
 800b110:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b114:	095b      	lsrs	r3, r3, #5
 800b116:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b11a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b11e:	f003 031f 	and.w	r3, r3, #31
 800b122:	2b00      	cmp	r3, #0
 800b124:	d104      	bne.n	800b130 <USB_EPStartXfer+0x1174>
 800b126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b12a:	3b01      	subs	r3, #1
 800b12c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b134:	b29b      	uxth	r3, r3
 800b136:	029b      	lsls	r3, r3, #10
 800b138:	b29b      	uxth	r3, r3
 800b13a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b13e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b142:	b29a      	uxth	r2, r3
 800b144:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b148:	801a      	strh	r2, [r3, #0]
 800b14a:	e023      	b.n	800b194 <USB_EPStartXfer+0x11d8>
 800b14c:	463b      	mov	r3, r7
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	785b      	ldrb	r3, [r3, #1]
 800b152:	2b01      	cmp	r3, #1
 800b154:	d11e      	bne.n	800b194 <USB_EPStartXfer+0x11d8>
 800b156:	1d3b      	adds	r3, r7, #4
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b15e:	b29b      	uxth	r3, r3
 800b160:	461a      	mov	r2, r3
 800b162:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b166:	4413      	add	r3, r2
 800b168:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b16c:	463b      	mov	r3, r7
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	011a      	lsls	r2, r3, #4
 800b174:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b178:	4413      	add	r3, r2
 800b17a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b17e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b186:	b29a      	uxth	r2, r3
 800b188:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b18c:	801a      	strh	r2, [r3, #0]
 800b18e:	e001      	b.n	800b194 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 800b190:	2301      	movs	r3, #1
 800b192:	e02e      	b.n	800b1f2 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b194:	1d3b      	adds	r3, r7, #4
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	463b      	mov	r3, r7
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	4413      	add	r3, r2
 800b1a2:	881b      	ldrh	r3, [r3, #0]
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1ae:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800b1b2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b1b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b1ba:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800b1be:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b1c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b1c6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800b1ca:	1d3b      	adds	r3, r7, #4
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	463b      	mov	r3, r7
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	441a      	add	r2, r3
 800b1d8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b1dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b1f0:	2300      	movs	r3, #0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	785b      	ldrb	r3, [r3, #1]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d020      	beq.n	800b250 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	4413      	add	r3, r2
 800b218:	881b      	ldrh	r3, [r3, #0]
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b224:	81bb      	strh	r3, [r7, #12]
 800b226:	89bb      	ldrh	r3, [r7, #12]
 800b228:	f083 0310 	eor.w	r3, r3, #16
 800b22c:	81bb      	strh	r3, [r7, #12]
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	441a      	add	r2, r3
 800b238:	89bb      	ldrh	r3, [r7, #12]
 800b23a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b23e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	8013      	strh	r3, [r2, #0]
 800b24e:	e01f      	b.n	800b290 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	881b      	ldrh	r3, [r3, #0]
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b266:	81fb      	strh	r3, [r7, #14]
 800b268:	89fb      	ldrh	r3, [r7, #14]
 800b26a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b26e:	81fb      	strh	r3, [r7, #14]
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	441a      	add	r2, r3
 800b27a:	89fb      	ldrh	r3, [r7, #14]
 800b27c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b290:	2300      	movs	r3, #0
}
 800b292:	4618      	mov	r0, r3
 800b294:	3714      	adds	r7, #20
 800b296:	46bd      	mov	sp, r7
 800b298:	bc80      	pop	{r7}
 800b29a:	4770      	bx	lr

0800b29c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b087      	sub	sp, #28
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	7b1b      	ldrb	r3, [r3, #12]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f040 809d 	bne.w	800b3ea <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	785b      	ldrb	r3, [r3, #1]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d04c      	beq.n	800b352 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4413      	add	r3, r2
 800b2c2:	881b      	ldrh	r3, [r3, #0]
 800b2c4:	823b      	strh	r3, [r7, #16]
 800b2c6:	8a3b      	ldrh	r3, [r7, #16]
 800b2c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d01b      	beq.n	800b308 <USB_EPClearStall+0x6c>
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	009b      	lsls	r3, r3, #2
 800b2d8:	4413      	add	r3, r2
 800b2da:	881b      	ldrh	r3, [r3, #0]
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2e6:	81fb      	strh	r3, [r7, #14]
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	441a      	add	r2, r3
 800b2f2:	89fb      	ldrh	r3, [r7, #14]
 800b2f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b300:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b304:	b29b      	uxth	r3, r3
 800b306:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	78db      	ldrb	r3, [r3, #3]
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d06c      	beq.n	800b3ea <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	4413      	add	r3, r2
 800b31a:	881b      	ldrh	r3, [r3, #0]
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b326:	81bb      	strh	r3, [r7, #12]
 800b328:	89bb      	ldrh	r3, [r7, #12]
 800b32a:	f083 0320 	eor.w	r3, r3, #32
 800b32e:	81bb      	strh	r3, [r7, #12]
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	441a      	add	r2, r3
 800b33a:	89bb      	ldrh	r3, [r7, #12]
 800b33c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	8013      	strh	r3, [r2, #0]
 800b350:	e04b      	b.n	800b3ea <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	4413      	add	r3, r2
 800b35c:	881b      	ldrh	r3, [r3, #0]
 800b35e:	82fb      	strh	r3, [r7, #22]
 800b360:	8afb      	ldrh	r3, [r7, #22]
 800b362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b366:	2b00      	cmp	r3, #0
 800b368:	d01b      	beq.n	800b3a2 <USB_EPClearStall+0x106>
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	4413      	add	r3, r2
 800b374:	881b      	ldrh	r3, [r3, #0]
 800b376:	b29b      	uxth	r3, r3
 800b378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b37c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b380:	82bb      	strh	r3, [r7, #20]
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	441a      	add	r2, r3
 800b38c:	8abb      	ldrh	r3, [r7, #20]
 800b38e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b396:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b39a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	4413      	add	r3, r2
 800b3ac:	881b      	ldrh	r3, [r3, #0]
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3b8:	827b      	strh	r3, [r7, #18]
 800b3ba:	8a7b      	ldrh	r3, [r7, #18]
 800b3bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b3c0:	827b      	strh	r3, [r7, #18]
 800b3c2:	8a7b      	ldrh	r3, [r7, #18]
 800b3c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b3c8:	827b      	strh	r3, [r7, #18]
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	441a      	add	r2, r3
 800b3d4:	8a7b      	ldrh	r3, [r7, #18]
 800b3d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3e6:	b29b      	uxth	r3, r3
 800b3e8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	371c      	adds	r7, #28
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bc80      	pop	{r7}
 800b3f4:	4770      	bx	lr

0800b3f6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b3f6:	b480      	push	{r7}
 800b3f8:	b083      	sub	sp, #12
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
 800b3fe:	460b      	mov	r3, r1
 800b400:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b402:	78fb      	ldrb	r3, [r7, #3]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d103      	bne.n	800b410 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2280      	movs	r2, #128	; 0x80
 800b40c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b410:	2300      	movs	r3, #0
}
 800b412:	4618      	mov	r0, r3
 800b414:	370c      	adds	r7, #12
 800b416:	46bd      	mov	sp, r7
 800b418:	bc80      	pop	{r7}
 800b41a:	4770      	bx	lr

0800b41c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	370c      	adds	r7, #12
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bc80      	pop	{r7}
 800b42e:	4770      	bx	lr

0800b430 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b438:	2300      	movs	r3, #0
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	370c      	adds	r7, #12
 800b43e:	46bd      	mov	sp, r7
 800b440:	bc80      	pop	{r7}
 800b442:	4770      	bx	lr

0800b444 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b444:	b480      	push	{r7}
 800b446:	b085      	sub	sp, #20
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b452:	b29b      	uxth	r3, r3
 800b454:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b456:	68fb      	ldr	r3, [r7, #12]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3714      	adds	r7, #20
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bc80      	pop	{r7}
 800b460:	4770      	bx	lr

0800b462 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b462:	b480      	push	{r7}
 800b464:	b083      	sub	sp, #12
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
 800b46a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	370c      	adds	r7, #12
 800b472:	46bd      	mov	sp, r7
 800b474:	bc80      	pop	{r7}
 800b476:	4770      	bx	lr

0800b478 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b478:	b480      	push	{r7}
 800b47a:	b08d      	sub	sp, #52	; 0x34
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	4611      	mov	r1, r2
 800b484:	461a      	mov	r2, r3
 800b486:	460b      	mov	r3, r1
 800b488:	80fb      	strh	r3, [r7, #6]
 800b48a:	4613      	mov	r3, r2
 800b48c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b48e:	88bb      	ldrh	r3, [r7, #4]
 800b490:	3301      	adds	r3, #1
 800b492:	085b      	lsrs	r3, r3, #1
 800b494:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b49e:	88fb      	ldrh	r3, [r7, #6]
 800b4a0:	005a      	lsls	r2, r3, #1
 800b4a2:	69fb      	ldr	r3, [r7, #28]
 800b4a4:	4413      	add	r3, r2
 800b4a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b4aa:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800b4ac:	6a3b      	ldr	r3, [r7, #32]
 800b4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4b0:	e01e      	b.n	800b4f0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800b4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	021b      	lsls	r3, r3, #8
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	69bb      	ldr	r3, [r7, #24]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4da:	3302      	adds	r3, #2
 800b4dc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800b4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e0:	3302      	adds	r3, #2
 800b4e2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800b4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800b4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d1dd      	bne.n	800b4b2 <USB_WritePMA+0x3a>
  }
}
 800b4f6:	bf00      	nop
 800b4f8:	bf00      	nop
 800b4fa:	3734      	adds	r7, #52	; 0x34
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bc80      	pop	{r7}
 800b500:	4770      	bx	lr

0800b502 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b502:	b480      	push	{r7}
 800b504:	b08b      	sub	sp, #44	; 0x2c
 800b506:	af00      	add	r7, sp, #0
 800b508:	60f8      	str	r0, [r7, #12]
 800b50a:	60b9      	str	r1, [r7, #8]
 800b50c:	4611      	mov	r1, r2
 800b50e:	461a      	mov	r2, r3
 800b510:	460b      	mov	r3, r1
 800b512:	80fb      	strh	r3, [r7, #6]
 800b514:	4613      	mov	r3, r2
 800b516:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b518:	88bb      	ldrh	r3, [r7, #4]
 800b51a:	085b      	lsrs	r3, r3, #1
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b528:	88fb      	ldrh	r3, [r7, #6]
 800b52a:	005a      	lsls	r2, r3, #1
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	4413      	add	r3, r2
 800b530:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b534:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	627b      	str	r3, [r7, #36]	; 0x24
 800b53a:	e01b      	b.n	800b574 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b53c:	6a3b      	ldr	r3, [r7, #32]
 800b53e:	881b      	ldrh	r3, [r3, #0]
 800b540:	b29b      	uxth	r3, r3
 800b542:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b544:	6a3b      	ldr	r3, [r7, #32]
 800b546:	3302      	adds	r3, #2
 800b548:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	b2da      	uxtb	r2, r3
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	3301      	adds	r3, #1
 800b556:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	0a1b      	lsrs	r3, r3, #8
 800b55c:	b2da      	uxtb	r2, r3
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	3301      	adds	r3, #1
 800b566:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b568:	6a3b      	ldr	r3, [r7, #32]
 800b56a:	3302      	adds	r3, #2
 800b56c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800b56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b570:	3b01      	subs	r3, #1
 800b572:	627b      	str	r3, [r7, #36]	; 0x24
 800b574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b576:	2b00      	cmp	r3, #0
 800b578:	d1e0      	bne.n	800b53c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b57a:	88bb      	ldrh	r3, [r7, #4]
 800b57c:	f003 0301 	and.w	r3, r3, #1
 800b580:	b29b      	uxth	r3, r3
 800b582:	2b00      	cmp	r3, #0
 800b584:	d007      	beq.n	800b596 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800b586:	6a3b      	ldr	r3, [r7, #32]
 800b588:	881b      	ldrh	r3, [r3, #0]
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	b2da      	uxtb	r2, r3
 800b592:	69fb      	ldr	r3, [r7, #28]
 800b594:	701a      	strb	r2, [r3, #0]
  }
}
 800b596:	bf00      	nop
 800b598:	372c      	adds	r7, #44	; 0x2c
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bc80      	pop	{r7}
 800b59e:	4770      	bx	lr

0800b5a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	7c1b      	ldrb	r3, [r3, #16]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d115      	bne.n	800b5e4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b5b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5bc:	2202      	movs	r2, #2
 800b5be:	2181      	movs	r1, #129	; 0x81
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f001 fe30 	bl	800d226 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b5cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5d0:	2202      	movs	r2, #2
 800b5d2:	2101      	movs	r1, #1
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f001 fe26 	bl	800d226 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2201      	movs	r2, #1
 800b5de:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800b5e2:	e012      	b.n	800b60a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b5e4:	2340      	movs	r3, #64	; 0x40
 800b5e6:	2202      	movs	r2, #2
 800b5e8:	2181      	movs	r1, #129	; 0x81
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f001 fe1b 	bl	800d226 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b5f6:	2340      	movs	r3, #64	; 0x40
 800b5f8:	2202      	movs	r2, #2
 800b5fa:	2101      	movs	r1, #1
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f001 fe12 	bl	800d226 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2201      	movs	r2, #1
 800b606:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b60a:	2308      	movs	r3, #8
 800b60c:	2203      	movs	r2, #3
 800b60e:	2182      	movs	r1, #130	; 0x82
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f001 fe08 	bl	800d226 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2201      	movs	r2, #1
 800b61a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b61c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b620:	f001 ff28 	bl	800d474 <USBD_static_malloc>
 800b624:	4602      	mov	r2, r0
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b632:	2b00      	cmp	r3, #0
 800b634:	d102      	bne.n	800b63c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800b636:	2301      	movs	r3, #1
 800b638:	73fb      	strb	r3, [r7, #15]
 800b63a:	e026      	b.n	800b68a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b642:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	2200      	movs	r2, #0
 800b652:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	2200      	movs	r2, #0
 800b65a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	7c1b      	ldrb	r3, [r3, #16]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d109      	bne.n	800b67a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b66c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b670:	2101      	movs	r1, #1
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f001 fec8 	bl	800d408 <USBD_LL_PrepareReceive>
 800b678:	e007      	b.n	800b68a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b680:	2340      	movs	r3, #64	; 0x40
 800b682:	2101      	movs	r1, #1
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f001 febf 	bl	800d408 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	460b      	mov	r3, r1
 800b69e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b6a4:	2181      	movs	r1, #129	; 0x81
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f001 fde3 	bl	800d272 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b6b2:	2101      	movs	r1, #1
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f001 fddc 	bl	800d272 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b6c2:	2182      	movs	r1, #130	; 0x82
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f001 fdd4 	bl	800d272 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00e      	beq.n	800b6f8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f001 fece 	bl	800d48c <USBD_static_free>
    pdev->pClassData = NULL;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800b6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}

0800b702 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b702:	b580      	push	{r7, lr}
 800b704:	b086      	sub	sp, #24
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
 800b70a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b712:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b714:	2300      	movs	r3, #0
 800b716:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b718:	2300      	movs	r3, #0
 800b71a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b71c:	2300      	movs	r3, #0
 800b71e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d039      	beq.n	800b7a0 <USBD_CDC_Setup+0x9e>
 800b72c:	2b20      	cmp	r3, #32
 800b72e:	d17f      	bne.n	800b830 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	88db      	ldrh	r3, [r3, #6]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d029      	beq.n	800b78c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	b25b      	sxtb	r3, r3
 800b73e:	2b00      	cmp	r3, #0
 800b740:	da11      	bge.n	800b766 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b748:	689b      	ldr	r3, [r3, #8]
 800b74a:	683a      	ldr	r2, [r7, #0]
 800b74c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b74e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b750:	683a      	ldr	r2, [r7, #0]
 800b752:	88d2      	ldrh	r2, [r2, #6]
 800b754:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b756:	6939      	ldr	r1, [r7, #16]
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	88db      	ldrh	r3, [r3, #6]
 800b75c:	461a      	mov	r2, r3
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f001 f9d9 	bl	800cb16 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b764:	e06b      	b.n	800b83e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	785a      	ldrb	r2, [r3, #1]
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	88db      	ldrh	r3, [r3, #6]
 800b774:	b2da      	uxtb	r2, r3
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b77c:	6939      	ldr	r1, [r7, #16]
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	88db      	ldrh	r3, [r3, #6]
 800b782:	461a      	mov	r2, r3
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f001 f9f4 	bl	800cb72 <USBD_CtlPrepareRx>
      break;
 800b78a:	e058      	b.n	800b83e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	683a      	ldr	r2, [r7, #0]
 800b796:	7850      	ldrb	r0, [r2, #1]
 800b798:	2200      	movs	r2, #0
 800b79a:	6839      	ldr	r1, [r7, #0]
 800b79c:	4798      	blx	r3
      break;
 800b79e:	e04e      	b.n	800b83e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	785b      	ldrb	r3, [r3, #1]
 800b7a4:	2b0b      	cmp	r3, #11
 800b7a6:	d02e      	beq.n	800b806 <USBD_CDC_Setup+0x104>
 800b7a8:	2b0b      	cmp	r3, #11
 800b7aa:	dc38      	bgt.n	800b81e <USBD_CDC_Setup+0x11c>
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d002      	beq.n	800b7b6 <USBD_CDC_Setup+0xb4>
 800b7b0:	2b0a      	cmp	r3, #10
 800b7b2:	d014      	beq.n	800b7de <USBD_CDC_Setup+0xdc>
 800b7b4:	e033      	b.n	800b81e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7bc:	2b03      	cmp	r3, #3
 800b7be:	d107      	bne.n	800b7d0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b7c0:	f107 030c 	add.w	r3, r7, #12
 800b7c4:	2202      	movs	r2, #2
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f001 f9a4 	bl	800cb16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b7ce:	e02e      	b.n	800b82e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b7d0:	6839      	ldr	r1, [r7, #0]
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f001 f935 	bl	800ca42 <USBD_CtlError>
            ret = USBD_FAIL;
 800b7d8:	2302      	movs	r3, #2
 800b7da:	75fb      	strb	r3, [r7, #23]
          break;
 800b7dc:	e027      	b.n	800b82e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7e4:	2b03      	cmp	r3, #3
 800b7e6:	d107      	bne.n	800b7f8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b7e8:	f107 030f 	add.w	r3, r7, #15
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f001 f990 	bl	800cb16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b7f6:	e01a      	b.n	800b82e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b7f8:	6839      	ldr	r1, [r7, #0]
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f001 f921 	bl	800ca42 <USBD_CtlError>
            ret = USBD_FAIL;
 800b800:	2302      	movs	r3, #2
 800b802:	75fb      	strb	r3, [r7, #23]
          break;
 800b804:	e013      	b.n	800b82e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b80c:	2b03      	cmp	r3, #3
 800b80e:	d00d      	beq.n	800b82c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b810:	6839      	ldr	r1, [r7, #0]
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f001 f915 	bl	800ca42 <USBD_CtlError>
            ret = USBD_FAIL;
 800b818:	2302      	movs	r3, #2
 800b81a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b81c:	e006      	b.n	800b82c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b81e:	6839      	ldr	r1, [r7, #0]
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f001 f90e 	bl	800ca42 <USBD_CtlError>
          ret = USBD_FAIL;
 800b826:	2302      	movs	r3, #2
 800b828:	75fb      	strb	r3, [r7, #23]
          break;
 800b82a:	e000      	b.n	800b82e <USBD_CDC_Setup+0x12c>
          break;
 800b82c:	bf00      	nop
      }
      break;
 800b82e:	e006      	b.n	800b83e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b830:	6839      	ldr	r1, [r7, #0]
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f001 f905 	bl	800ca42 <USBD_CtlError>
      ret = USBD_FAIL;
 800b838:	2302      	movs	r3, #2
 800b83a:	75fb      	strb	r3, [r7, #23]
      break;
 800b83c:	bf00      	nop
  }

  return ret;
 800b83e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b840:	4618      	mov	r0, r3
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	460b      	mov	r3, r1
 800b852:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b85a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b862:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d03a      	beq.n	800b8e4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b86e:	78fa      	ldrb	r2, [r7, #3]
 800b870:	6879      	ldr	r1, [r7, #4]
 800b872:	4613      	mov	r3, r2
 800b874:	009b      	lsls	r3, r3, #2
 800b876:	4413      	add	r3, r2
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	440b      	add	r3, r1
 800b87c:	331c      	adds	r3, #28
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d029      	beq.n	800b8d8 <USBD_CDC_DataIn+0x90>
 800b884:	78fa      	ldrb	r2, [r7, #3]
 800b886:	6879      	ldr	r1, [r7, #4]
 800b888:	4613      	mov	r3, r2
 800b88a:	009b      	lsls	r3, r3, #2
 800b88c:	4413      	add	r3, r2
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	440b      	add	r3, r1
 800b892:	331c      	adds	r3, #28
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	78f9      	ldrb	r1, [r7, #3]
 800b898:	68b8      	ldr	r0, [r7, #8]
 800b89a:	460b      	mov	r3, r1
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	440b      	add	r3, r1
 800b8a0:	00db      	lsls	r3, r3, #3
 800b8a2:	4403      	add	r3, r0
 800b8a4:	3338      	adds	r3, #56	; 0x38
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	fbb2 f1f3 	udiv	r1, r2, r3
 800b8ac:	fb03 f301 	mul.w	r3, r3, r1
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d110      	bne.n	800b8d8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b8b6:	78fa      	ldrb	r2, [r7, #3]
 800b8b8:	6879      	ldr	r1, [r7, #4]
 800b8ba:	4613      	mov	r3, r2
 800b8bc:	009b      	lsls	r3, r3, #2
 800b8be:	4413      	add	r3, r2
 800b8c0:	009b      	lsls	r3, r3, #2
 800b8c2:	440b      	add	r3, r1
 800b8c4:	331c      	adds	r3, #28
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b8ca:	78f9      	ldrb	r1, [r7, #3]
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f001 fd76 	bl	800d3c2 <USBD_LL_Transmit>
 800b8d6:	e003      	b.n	800b8e0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	e000      	b.n	800b8e6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b8e4:	2302      	movs	r3, #2
  }
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3710      	adds	r7, #16
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}

0800b8ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b8ee:	b580      	push	{r7, lr}
 800b8f0:	b084      	sub	sp, #16
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b900:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b902:	78fb      	ldrb	r3, [r7, #3]
 800b904:	4619      	mov	r1, r3
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f001 fda1 	bl	800d44e <USBD_LL_GetRxDataSize>
 800b90c:	4602      	mov	r2, r0
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00d      	beq.n	800b93a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	68fa      	ldr	r2, [r7, #12]
 800b928:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b92c:	68fa      	ldr	r2, [r7, #12]
 800b92e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b932:	4611      	mov	r1, r2
 800b934:	4798      	blx	r3

    return USBD_OK;
 800b936:	2300      	movs	r3, #0
 800b938:	e000      	b.n	800b93c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b93a:	2302      	movs	r3, #2
  }
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3710      	adds	r7, #16
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b952:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d015      	beq.n	800b98a <USBD_CDC_EP0_RxReady+0x46>
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b964:	2bff      	cmp	r3, #255	; 0xff
 800b966:	d010      	beq.n	800b98a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	68fa      	ldr	r2, [r7, #12]
 800b972:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b976:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b97e:	b292      	uxth	r2, r2
 800b980:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	22ff      	movs	r2, #255	; 0xff
 800b986:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b98a:	2300      	movs	r3, #0
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3710      	adds	r7, #16
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2243      	movs	r2, #67	; 0x43
 800b9a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b9a2:	4b03      	ldr	r3, [pc, #12]	; (800b9b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bc80      	pop	{r7}
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	200000e4 	.word	0x200000e4

0800b9b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2243      	movs	r2, #67	; 0x43
 800b9c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b9c2:	4b03      	ldr	r3, [pc, #12]	; (800b9d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	370c      	adds	r7, #12
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bc80      	pop	{r7}
 800b9cc:	4770      	bx	lr
 800b9ce:	bf00      	nop
 800b9d0:	200000a0 	.word	0x200000a0

0800b9d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2243      	movs	r2, #67	; 0x43
 800b9e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b9e2:	4b03      	ldr	r3, [pc, #12]	; (800b9f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bc80      	pop	{r7}
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	20000128 	.word	0x20000128

0800b9f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	220a      	movs	r2, #10
 800ba00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ba02:	4b03      	ldr	r3, [pc, #12]	; (800ba10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	370c      	adds	r7, #12
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bc80      	pop	{r7}
 800ba0c:	4770      	bx	lr
 800ba0e:	bf00      	nop
 800ba10:	2000005c 	.word	0x2000005c

0800ba14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b085      	sub	sp, #20
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ba1e:	2302      	movs	r3, #2
 800ba20:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d005      	beq.n	800ba34 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	683a      	ldr	r2, [r7, #0]
 800ba2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800ba30:	2300      	movs	r3, #0
 800ba32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ba34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3714      	adds	r7, #20
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bc80      	pop	{r7}
 800ba3e:	4770      	bx	lr

0800ba40 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b087      	sub	sp, #28
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba54:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	68ba      	ldr	r2, [r7, #8]
 800ba5a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ba5e:	88fa      	ldrh	r2, [r7, #6]
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	371c      	adds	r7, #28
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bc80      	pop	{r7}
 800ba70:	4770      	bx	lr

0800ba72 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800ba72:	b480      	push	{r7}
 800ba74:	b085      	sub	sp, #20
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba82:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	683a      	ldr	r2, [r7, #0]
 800ba88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800ba8c:	2300      	movs	r3, #0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3714      	adds	r7, #20
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bc80      	pop	{r7}
 800ba96:	4770      	bx	lr

0800ba98 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baa6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d017      	beq.n	800bae2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	7c1b      	ldrb	r3, [r3, #16]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d109      	bne.n	800bace <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bac4:	2101      	movs	r1, #1
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f001 fc9e 	bl	800d408 <USBD_LL_PrepareReceive>
 800bacc:	e007      	b.n	800bade <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bad4:	2340      	movs	r3, #64	; 0x40
 800bad6:	2101      	movs	r1, #1
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f001 fc95 	bl	800d408 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800bade:	2300      	movs	r3, #0
 800bae0:	e000      	b.n	800bae4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800bae2:	2302      	movs	r3, #2
  }
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	4613      	mov	r3, r2
 800baf8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d101      	bne.n	800bb04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bb00:	2302      	movs	r3, #2
 800bb02:	e01a      	b.n	800bb3a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d003      	beq.n	800bb16 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2200      	movs	r2, #0
 800bb12:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d003      	beq.n	800bb24 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	68ba      	ldr	r2, [r7, #8]
 800bb20:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2201      	movs	r2, #1
 800bb28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	79fa      	ldrb	r2, [r7, #7]
 800bb30:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f001 fb02 	bl	800d13c <USBD_LL_Init>

  return USBD_OK;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3710      	adds	r7, #16
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bb42:	b480      	push	{r7}
 800bb44:	b085      	sub	sp, #20
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
 800bb4a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d006      	beq.n	800bb64 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	683a      	ldr	r2, [r7, #0]
 800bb5a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	73fb      	strb	r3, [r7, #15]
 800bb62:	e001      	b.n	800bb68 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800bb64:	2302      	movs	r3, #2
 800bb66:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bb68:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3714      	adds	r7, #20
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bc80      	pop	{r7}
 800bb72:	4770      	bx	lr

0800bb74 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f001 fb37 	bl	800d1f0 <USBD_LL_Start>

  return USBD_OK;
 800bb82:	2300      	movs	r3, #0
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3708      	adds	r7, #8
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b083      	sub	sp, #12
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bb94:	2300      	movs	r3, #0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	370c      	adds	r7, #12
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bc80      	pop	{r7}
 800bb9e:	4770      	bx	lr

0800bba0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	460b      	mov	r3, r1
 800bbaa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bbac:	2302      	movs	r3, #2
 800bbae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d00c      	beq.n	800bbd4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	78fa      	ldrb	r2, [r7, #3]
 800bbc4:	4611      	mov	r1, r2
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	4798      	blx	r3
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d101      	bne.n	800bbd4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800bbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3710      	adds	r7, #16
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b082      	sub	sp, #8
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	78fa      	ldrb	r2, [r7, #3]
 800bbf4:	4611      	mov	r1, r2
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	4798      	blx	r3

  return USBD_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bc14:	6839      	ldr	r1, [r7, #0]
 800bc16:	4618      	mov	r0, r3
 800bc18:	f000 fed7 	bl	800c9ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bc38:	f003 031f 	and.w	r3, r3, #31
 800bc3c:	2b02      	cmp	r3, #2
 800bc3e:	d016      	beq.n	800bc6e <USBD_LL_SetupStage+0x6a>
 800bc40:	2b02      	cmp	r3, #2
 800bc42:	d81c      	bhi.n	800bc7e <USBD_LL_SetupStage+0x7a>
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d002      	beq.n	800bc4e <USBD_LL_SetupStage+0x4a>
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	d008      	beq.n	800bc5e <USBD_LL_SetupStage+0x5a>
 800bc4c:	e017      	b.n	800bc7e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bc54:	4619      	mov	r1, r3
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 f9ca 	bl	800bff0 <USBD_StdDevReq>
      break;
 800bc5c:	e01a      	b.n	800bc94 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bc64:	4619      	mov	r1, r3
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 fa2c 	bl	800c0c4 <USBD_StdItfReq>
      break;
 800bc6c:	e012      	b.n	800bc94 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bc74:	4619      	mov	r1, r3
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 fa6c 	bl	800c154 <USBD_StdEPReq>
      break;
 800bc7c:	e00a      	b.n	800bc94 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bc84:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bc88:	b2db      	uxtb	r3, r3
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f001 fb0f 	bl	800d2b0 <USBD_LL_StallEP>
      break;
 800bc92:	bf00      	nop
  }

  return USBD_OK;
 800bc94:	2300      	movs	r3, #0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3708      	adds	r7, #8
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b086      	sub	sp, #24
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	60f8      	str	r0, [r7, #12]
 800bca6:	460b      	mov	r3, r1
 800bca8:	607a      	str	r2, [r7, #4]
 800bcaa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bcac:	7afb      	ldrb	r3, [r7, #11]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d14b      	bne.n	800bd4a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bcb8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bcc0:	2b03      	cmp	r3, #3
 800bcc2:	d134      	bne.n	800bd2e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	68da      	ldr	r2, [r3, #12]
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	691b      	ldr	r3, [r3, #16]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d919      	bls.n	800bd04 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	68da      	ldr	r2, [r3, #12]
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	691b      	ldr	r3, [r3, #16]
 800bcd8:	1ad2      	subs	r2, r2, r3
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	68da      	ldr	r2, [r3, #12]
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d203      	bcs.n	800bcf2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	e002      	b.n	800bcf8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	6879      	ldr	r1, [r7, #4]
 800bcfc:	68f8      	ldr	r0, [r7, #12]
 800bcfe:	f000 ff56 	bl	800cbae <USBD_CtlContinueRx>
 800bd02:	e038      	b.n	800bd76 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd0a:	691b      	ldr	r3, [r3, #16]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d00a      	beq.n	800bd26 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bd16:	2b03      	cmp	r3, #3
 800bd18:	d105      	bne.n	800bd26 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd20:	691b      	ldr	r3, [r3, #16]
 800bd22:	68f8      	ldr	r0, [r7, #12]
 800bd24:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bd26:	68f8      	ldr	r0, [r7, #12]
 800bd28:	f000 ff53 	bl	800cbd2 <USBD_CtlSendStatus>
 800bd2c:	e023      	b.n	800bd76 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd34:	2b05      	cmp	r3, #5
 800bd36:	d11e      	bne.n	800bd76 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800bd40:	2100      	movs	r1, #0
 800bd42:	68f8      	ldr	r0, [r7, #12]
 800bd44:	f001 fab4 	bl	800d2b0 <USBD_LL_StallEP>
 800bd48:	e015      	b.n	800bd76 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd50:	699b      	ldr	r3, [r3, #24]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d00d      	beq.n	800bd72 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bd5c:	2b03      	cmp	r3, #3
 800bd5e:	d108      	bne.n	800bd72 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd66:	699b      	ldr	r3, [r3, #24]
 800bd68:	7afa      	ldrb	r2, [r7, #11]
 800bd6a:	4611      	mov	r1, r2
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	4798      	blx	r3
 800bd70:	e001      	b.n	800bd76 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bd72:	2302      	movs	r3, #2
 800bd74:	e000      	b.n	800bd78 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800bd76:	2300      	movs	r3, #0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3718      	adds	r7, #24
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	460b      	mov	r3, r1
 800bd8a:	607a      	str	r2, [r7, #4]
 800bd8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bd8e:	7afb      	ldrb	r3, [r7, #11]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d17f      	bne.n	800be94 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	3314      	adds	r3, #20
 800bd98:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bda0:	2b02      	cmp	r3, #2
 800bda2:	d15c      	bne.n	800be5e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	68da      	ldr	r2, [r3, #12]
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	691b      	ldr	r3, [r3, #16]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d915      	bls.n	800bddc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	68da      	ldr	r2, [r3, #12]
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	691b      	ldr	r3, [r3, #16]
 800bdb8:	1ad2      	subs	r2, r2, r3
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	68db      	ldr	r3, [r3, #12]
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	6879      	ldr	r1, [r7, #4]
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f000 fec0 	bl	800cb4e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdce:	2300      	movs	r3, #0
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	2100      	movs	r1, #0
 800bdd4:	68f8      	ldr	r0, [r7, #12]
 800bdd6:	f001 fb17 	bl	800d408 <USBD_LL_PrepareReceive>
 800bdda:	e04e      	b.n	800be7a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	697a      	ldr	r2, [r7, #20]
 800bde2:	6912      	ldr	r2, [r2, #16]
 800bde4:	fbb3 f1f2 	udiv	r1, r3, r2
 800bde8:	fb02 f201 	mul.w	r2, r2, r1
 800bdec:	1a9b      	subs	r3, r3, r2
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d11c      	bne.n	800be2c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	689a      	ldr	r2, [r3, #8]
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d316      	bcc.n	800be2c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	689a      	ldr	r2, [r3, #8]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800be08:	429a      	cmp	r2, r3
 800be0a:	d20f      	bcs.n	800be2c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800be0c:	2200      	movs	r2, #0
 800be0e:	2100      	movs	r1, #0
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	f000 fe9c 	bl	800cb4e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2200      	movs	r2, #0
 800be1a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be1e:	2300      	movs	r3, #0
 800be20:	2200      	movs	r2, #0
 800be22:	2100      	movs	r1, #0
 800be24:	68f8      	ldr	r0, [r7, #12]
 800be26:	f001 faef 	bl	800d408 <USBD_LL_PrepareReceive>
 800be2a:	e026      	b.n	800be7a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be32:	68db      	ldr	r3, [r3, #12]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00a      	beq.n	800be4e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800be3e:	2b03      	cmp	r3, #3
 800be40:	d105      	bne.n	800be4e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be48:	68db      	ldr	r3, [r3, #12]
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800be4e:	2180      	movs	r1, #128	; 0x80
 800be50:	68f8      	ldr	r0, [r7, #12]
 800be52:	f001 fa2d 	bl	800d2b0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	f000 fece 	bl	800cbf8 <USBD_CtlReceiveStatus>
 800be5c:	e00d      	b.n	800be7a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800be64:	2b04      	cmp	r3, #4
 800be66:	d004      	beq.n	800be72 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d103      	bne.n	800be7a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800be72:	2180      	movs	r1, #128	; 0x80
 800be74:	68f8      	ldr	r0, [r7, #12]
 800be76:	f001 fa1b 	bl	800d2b0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800be80:	2b01      	cmp	r3, #1
 800be82:	d11d      	bne.n	800bec0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800be84:	68f8      	ldr	r0, [r7, #12]
 800be86:	f7ff fe81 	bl	800bb8c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2200      	movs	r2, #0
 800be8e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800be92:	e015      	b.n	800bec0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be9a:	695b      	ldr	r3, [r3, #20]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00d      	beq.n	800bebc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bea6:	2b03      	cmp	r3, #3
 800bea8:	d108      	bne.n	800bebc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beb0:	695b      	ldr	r3, [r3, #20]
 800beb2:	7afa      	ldrb	r2, [r7, #11]
 800beb4:	4611      	mov	r1, r2
 800beb6:	68f8      	ldr	r0, [r7, #12]
 800beb8:	4798      	blx	r3
 800beba:	e001      	b.n	800bec0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bebc:	2302      	movs	r3, #2
 800bebe:	e000      	b.n	800bec2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3718      	adds	r7, #24
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b082      	sub	sp, #8
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bed2:	2340      	movs	r3, #64	; 0x40
 800bed4:	2200      	movs	r2, #0
 800bed6:	2100      	movs	r1, #0
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f001 f9a4 	bl	800d226 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2201      	movs	r2, #1
 800bee2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2240      	movs	r2, #64	; 0x40
 800beea:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800beee:	2340      	movs	r3, #64	; 0x40
 800bef0:	2200      	movs	r2, #0
 800bef2:	2180      	movs	r1, #128	; 0x80
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f001 f996 	bl	800d226 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2201      	movs	r2, #1
 800befe:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2240      	movs	r2, #64	; 0x40
 800bf04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2201      	movs	r2, #1
 800bf0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2200      	movs	r2, #0
 800bf12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d009      	beq.n	800bf42 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	6852      	ldr	r2, [r2, #4]
 800bf3a:	b2d2      	uxtb	r2, r2
 800bf3c:	4611      	mov	r1, r2
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	4798      	blx	r3
  }

  return USBD_OK;
 800bf42:	2300      	movs	r3, #0
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3708      	adds	r7, #8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	460b      	mov	r3, r1
 800bf56:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	78fa      	ldrb	r2, [r7, #3]
 800bf5c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bf5e:	2300      	movs	r3, #0
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	370c      	adds	r7, #12
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bc80      	pop	{r7}
 800bf68:	4770      	bx	lr

0800bf6a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bf6a:	b480      	push	{r7}
 800bf6c:	b083      	sub	sp, #12
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2204      	movs	r2, #4
 800bf82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bf86:	2300      	movs	r3, #0
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bc80      	pop	{r7}
 800bf90:	4770      	bx	lr

0800bf92 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bf92:	b480      	push	{r7}
 800bf94:	b083      	sub	sp, #12
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfa0:	2b04      	cmp	r3, #4
 800bfa2:	d105      	bne.n	800bfb0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bfb0:	2300      	movs	r3, #0
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	370c      	adds	r7, #12
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bc80      	pop	{r7}
 800bfba:	4770      	bx	lr

0800bfbc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfca:	2b03      	cmp	r3, #3
 800bfcc:	d10b      	bne.n	800bfe6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfd4:	69db      	ldr	r3, [r3, #28]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d005      	beq.n	800bfe6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfe0:	69db      	ldr	r3, [r3, #28]
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bfe6:	2300      	movs	r3, #0
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3708      	adds	r7, #8
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bffa:	2300      	movs	r3, #0
 800bffc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c006:	2b40      	cmp	r3, #64	; 0x40
 800c008:	d005      	beq.n	800c016 <USBD_StdDevReq+0x26>
 800c00a:	2b40      	cmp	r3, #64	; 0x40
 800c00c:	d84f      	bhi.n	800c0ae <USBD_StdDevReq+0xbe>
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d009      	beq.n	800c026 <USBD_StdDevReq+0x36>
 800c012:	2b20      	cmp	r3, #32
 800c014:	d14b      	bne.n	800c0ae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	6839      	ldr	r1, [r7, #0]
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	4798      	blx	r3
      break;
 800c024:	e048      	b.n	800c0b8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	785b      	ldrb	r3, [r3, #1]
 800c02a:	2b09      	cmp	r3, #9
 800c02c:	d839      	bhi.n	800c0a2 <USBD_StdDevReq+0xb2>
 800c02e:	a201      	add	r2, pc, #4	; (adr r2, 800c034 <USBD_StdDevReq+0x44>)
 800c030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c034:	0800c085 	.word	0x0800c085
 800c038:	0800c099 	.word	0x0800c099
 800c03c:	0800c0a3 	.word	0x0800c0a3
 800c040:	0800c08f 	.word	0x0800c08f
 800c044:	0800c0a3 	.word	0x0800c0a3
 800c048:	0800c067 	.word	0x0800c067
 800c04c:	0800c05d 	.word	0x0800c05d
 800c050:	0800c0a3 	.word	0x0800c0a3
 800c054:	0800c07b 	.word	0x0800c07b
 800c058:	0800c071 	.word	0x0800c071
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c05c:	6839      	ldr	r1, [r7, #0]
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 f9dc 	bl	800c41c <USBD_GetDescriptor>
          break;
 800c064:	e022      	b.n	800c0ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c066:	6839      	ldr	r1, [r7, #0]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 fb3f 	bl	800c6ec <USBD_SetAddress>
          break;
 800c06e:	e01d      	b.n	800c0ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c070:	6839      	ldr	r1, [r7, #0]
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 fb7e 	bl	800c774 <USBD_SetConfig>
          break;
 800c078:	e018      	b.n	800c0ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c07a:	6839      	ldr	r1, [r7, #0]
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 fc07 	bl	800c890 <USBD_GetConfig>
          break;
 800c082:	e013      	b.n	800c0ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c084:	6839      	ldr	r1, [r7, #0]
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 fc37 	bl	800c8fa <USBD_GetStatus>
          break;
 800c08c:	e00e      	b.n	800c0ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c08e:	6839      	ldr	r1, [r7, #0]
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 fc65 	bl	800c960 <USBD_SetFeature>
          break;
 800c096:	e009      	b.n	800c0ac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c098:	6839      	ldr	r1, [r7, #0]
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 fc74 	bl	800c988 <USBD_ClrFeature>
          break;
 800c0a0:	e004      	b.n	800c0ac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800c0a2:	6839      	ldr	r1, [r7, #0]
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 fccc 	bl	800ca42 <USBD_CtlError>
          break;
 800c0aa:	bf00      	nop
      }
      break;
 800c0ac:	e004      	b.n	800c0b8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800c0ae:	6839      	ldr	r1, [r7, #0]
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 fcc6 	bl	800ca42 <USBD_CtlError>
      break;
 800c0b6:	bf00      	nop
  }

  return ret;
 800c0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3710      	adds	r7, #16
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
 800c0c2:	bf00      	nop

0800c0c4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0da:	2b40      	cmp	r3, #64	; 0x40
 800c0dc:	d005      	beq.n	800c0ea <USBD_StdItfReq+0x26>
 800c0de:	2b40      	cmp	r3, #64	; 0x40
 800c0e0:	d82e      	bhi.n	800c140 <USBD_StdItfReq+0x7c>
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d001      	beq.n	800c0ea <USBD_StdItfReq+0x26>
 800c0e6:	2b20      	cmp	r3, #32
 800c0e8:	d12a      	bne.n	800c140 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0f0:	3b01      	subs	r3, #1
 800c0f2:	2b02      	cmp	r3, #2
 800c0f4:	d81d      	bhi.n	800c132 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	889b      	ldrh	r3, [r3, #4]
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d813      	bhi.n	800c128 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	6839      	ldr	r1, [r7, #0]
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	4798      	blx	r3
 800c10e:	4603      	mov	r3, r0
 800c110:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	88db      	ldrh	r3, [r3, #6]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d110      	bne.n	800c13c <USBD_StdItfReq+0x78>
 800c11a:	7bfb      	ldrb	r3, [r7, #15]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d10d      	bne.n	800c13c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 fd56 	bl	800cbd2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c126:	e009      	b.n	800c13c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800c128:	6839      	ldr	r1, [r7, #0]
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 fc89 	bl	800ca42 <USBD_CtlError>
          break;
 800c130:	e004      	b.n	800c13c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800c132:	6839      	ldr	r1, [r7, #0]
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 fc84 	bl	800ca42 <USBD_CtlError>
          break;
 800c13a:	e000      	b.n	800c13e <USBD_StdItfReq+0x7a>
          break;
 800c13c:	bf00      	nop
      }
      break;
 800c13e:	e004      	b.n	800c14a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800c140:	6839      	ldr	r1, [r7, #0]
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 fc7d 	bl	800ca42 <USBD_CtlError>
      break;
 800c148:	bf00      	nop
  }

  return USBD_OK;
 800c14a:	2300      	movs	r3, #0
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3710      	adds	r7, #16
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}

0800c154 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c15e:	2300      	movs	r3, #0
 800c160:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	889b      	ldrh	r3, [r3, #4]
 800c166:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c170:	2b40      	cmp	r3, #64	; 0x40
 800c172:	d007      	beq.n	800c184 <USBD_StdEPReq+0x30>
 800c174:	2b40      	cmp	r3, #64	; 0x40
 800c176:	f200 8146 	bhi.w	800c406 <USBD_StdEPReq+0x2b2>
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d00a      	beq.n	800c194 <USBD_StdEPReq+0x40>
 800c17e:	2b20      	cmp	r3, #32
 800c180:	f040 8141 	bne.w	800c406 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c18a:	689b      	ldr	r3, [r3, #8]
 800c18c:	6839      	ldr	r1, [r7, #0]
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	4798      	blx	r3
      break;
 800c192:	e13d      	b.n	800c410 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c19c:	2b20      	cmp	r3, #32
 800c19e:	d10a      	bne.n	800c1b6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	6839      	ldr	r1, [r7, #0]
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	4798      	blx	r3
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	73fb      	strb	r3, [r7, #15]

        return ret;
 800c1b2:	7bfb      	ldrb	r3, [r7, #15]
 800c1b4:	e12d      	b.n	800c412 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	785b      	ldrb	r3, [r3, #1]
 800c1ba:	2b03      	cmp	r3, #3
 800c1bc:	d007      	beq.n	800c1ce <USBD_StdEPReq+0x7a>
 800c1be:	2b03      	cmp	r3, #3
 800c1c0:	f300 811b 	bgt.w	800c3fa <USBD_StdEPReq+0x2a6>
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d072      	beq.n	800c2ae <USBD_StdEPReq+0x15a>
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d03a      	beq.n	800c242 <USBD_StdEPReq+0xee>
 800c1cc:	e115      	b.n	800c3fa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1d4:	2b02      	cmp	r3, #2
 800c1d6:	d002      	beq.n	800c1de <USBD_StdEPReq+0x8a>
 800c1d8:	2b03      	cmp	r3, #3
 800c1da:	d015      	beq.n	800c208 <USBD_StdEPReq+0xb4>
 800c1dc:	e02b      	b.n	800c236 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1de:	7bbb      	ldrb	r3, [r7, #14]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d00c      	beq.n	800c1fe <USBD_StdEPReq+0xaa>
 800c1e4:	7bbb      	ldrb	r3, [r7, #14]
 800c1e6:	2b80      	cmp	r3, #128	; 0x80
 800c1e8:	d009      	beq.n	800c1fe <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c1ea:	7bbb      	ldrb	r3, [r7, #14]
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f001 f85e 	bl	800d2b0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c1f4:	2180      	movs	r1, #128	; 0x80
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f001 f85a 	bl	800d2b0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c1fc:	e020      	b.n	800c240 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 fc1e 	bl	800ca42 <USBD_CtlError>
              break;
 800c206:	e01b      	b.n	800c240 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	885b      	ldrh	r3, [r3, #2]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d10e      	bne.n	800c22e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800c210:	7bbb      	ldrb	r3, [r7, #14]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d00b      	beq.n	800c22e <USBD_StdEPReq+0xda>
 800c216:	7bbb      	ldrb	r3, [r7, #14]
 800c218:	2b80      	cmp	r3, #128	; 0x80
 800c21a:	d008      	beq.n	800c22e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	88db      	ldrh	r3, [r3, #6]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d104      	bne.n	800c22e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c224:	7bbb      	ldrb	r3, [r7, #14]
 800c226:	4619      	mov	r1, r3
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f001 f841 	bl	800d2b0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 fccf 	bl	800cbd2 <USBD_CtlSendStatus>

              break;
 800c234:	e004      	b.n	800c240 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800c236:	6839      	ldr	r1, [r7, #0]
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 fc02 	bl	800ca42 <USBD_CtlError>
              break;
 800c23e:	bf00      	nop
          }
          break;
 800c240:	e0e0      	b.n	800c404 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c248:	2b02      	cmp	r3, #2
 800c24a:	d002      	beq.n	800c252 <USBD_StdEPReq+0xfe>
 800c24c:	2b03      	cmp	r3, #3
 800c24e:	d015      	beq.n	800c27c <USBD_StdEPReq+0x128>
 800c250:	e026      	b.n	800c2a0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c252:	7bbb      	ldrb	r3, [r7, #14]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d00c      	beq.n	800c272 <USBD_StdEPReq+0x11e>
 800c258:	7bbb      	ldrb	r3, [r7, #14]
 800c25a:	2b80      	cmp	r3, #128	; 0x80
 800c25c:	d009      	beq.n	800c272 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c25e:	7bbb      	ldrb	r3, [r7, #14]
 800c260:	4619      	mov	r1, r3
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f001 f824 	bl	800d2b0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c268:	2180      	movs	r1, #128	; 0x80
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f001 f820 	bl	800d2b0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c270:	e01c      	b.n	800c2ac <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800c272:	6839      	ldr	r1, [r7, #0]
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 fbe4 	bl	800ca42 <USBD_CtlError>
              break;
 800c27a:	e017      	b.n	800c2ac <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	885b      	ldrh	r3, [r3, #2]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d112      	bne.n	800c2aa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c284:	7bbb      	ldrb	r3, [r7, #14]
 800c286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d004      	beq.n	800c298 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c28e:	7bbb      	ldrb	r3, [r7, #14]
 800c290:	4619      	mov	r1, r3
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f001 f82b 	bl	800d2ee <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f000 fc9a 	bl	800cbd2 <USBD_CtlSendStatus>
              }
              break;
 800c29e:	e004      	b.n	800c2aa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c2a0:	6839      	ldr	r1, [r7, #0]
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f000 fbcd 	bl	800ca42 <USBD_CtlError>
              break;
 800c2a8:	e000      	b.n	800c2ac <USBD_StdEPReq+0x158>
              break;
 800c2aa:	bf00      	nop
          }
          break;
 800c2ac:	e0aa      	b.n	800c404 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2b4:	2b02      	cmp	r3, #2
 800c2b6:	d002      	beq.n	800c2be <USBD_StdEPReq+0x16a>
 800c2b8:	2b03      	cmp	r3, #3
 800c2ba:	d032      	beq.n	800c322 <USBD_StdEPReq+0x1ce>
 800c2bc:	e097      	b.n	800c3ee <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2be:	7bbb      	ldrb	r3, [r7, #14]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d007      	beq.n	800c2d4 <USBD_StdEPReq+0x180>
 800c2c4:	7bbb      	ldrb	r3, [r7, #14]
 800c2c6:	2b80      	cmp	r3, #128	; 0x80
 800c2c8:	d004      	beq.n	800c2d4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c2ca:	6839      	ldr	r1, [r7, #0]
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 fbb8 	bl	800ca42 <USBD_CtlError>
                break;
 800c2d2:	e091      	b.n	800c3f8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	da0b      	bge.n	800c2f4 <USBD_StdEPReq+0x1a0>
 800c2dc:	7bbb      	ldrb	r3, [r7, #14]
 800c2de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2e2:	4613      	mov	r3, r2
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	4413      	add	r3, r2
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	3310      	adds	r3, #16
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	4413      	add	r3, r2
 800c2f0:	3304      	adds	r3, #4
 800c2f2:	e00b      	b.n	800c30c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c2f4:	7bbb      	ldrb	r3, [r7, #14]
 800c2f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2fa:	4613      	mov	r3, r2
 800c2fc:	009b      	lsls	r3, r3, #2
 800c2fe:	4413      	add	r3, r2
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	4413      	add	r3, r2
 800c30a:	3304      	adds	r3, #4
 800c30c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	2200      	movs	r2, #0
 800c312:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	2202      	movs	r2, #2
 800c318:	4619      	mov	r1, r3
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 fbfb 	bl	800cb16 <USBD_CtlSendData>
              break;
 800c320:	e06a      	b.n	800c3f8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c322:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c326:	2b00      	cmp	r3, #0
 800c328:	da11      	bge.n	800c34e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c32a:	7bbb      	ldrb	r3, [r7, #14]
 800c32c:	f003 020f 	and.w	r2, r3, #15
 800c330:	6879      	ldr	r1, [r7, #4]
 800c332:	4613      	mov	r3, r2
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	4413      	add	r3, r2
 800c338:	009b      	lsls	r3, r3, #2
 800c33a:	440b      	add	r3, r1
 800c33c:	3318      	adds	r3, #24
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d117      	bne.n	800c374 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c344:	6839      	ldr	r1, [r7, #0]
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 fb7b 	bl	800ca42 <USBD_CtlError>
                  break;
 800c34c:	e054      	b.n	800c3f8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c34e:	7bbb      	ldrb	r3, [r7, #14]
 800c350:	f003 020f 	and.w	r2, r3, #15
 800c354:	6879      	ldr	r1, [r7, #4]
 800c356:	4613      	mov	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	4413      	add	r3, r2
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	440b      	add	r3, r1
 800c360:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d104      	bne.n	800c374 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c36a:	6839      	ldr	r1, [r7, #0]
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 fb68 	bl	800ca42 <USBD_CtlError>
                  break;
 800c372:	e041      	b.n	800c3f8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c374:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	da0b      	bge.n	800c394 <USBD_StdEPReq+0x240>
 800c37c:	7bbb      	ldrb	r3, [r7, #14]
 800c37e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c382:	4613      	mov	r3, r2
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	4413      	add	r3, r2
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	3310      	adds	r3, #16
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	4413      	add	r3, r2
 800c390:	3304      	adds	r3, #4
 800c392:	e00b      	b.n	800c3ac <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c394:	7bbb      	ldrb	r3, [r7, #14]
 800c396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c39a:	4613      	mov	r3, r2
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	4413      	add	r3, r2
 800c3a0:	009b      	lsls	r3, r3, #2
 800c3a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	4413      	add	r3, r2
 800c3aa:	3304      	adds	r3, #4
 800c3ac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c3ae:	7bbb      	ldrb	r3, [r7, #14]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d002      	beq.n	800c3ba <USBD_StdEPReq+0x266>
 800c3b4:	7bbb      	ldrb	r3, [r7, #14]
 800c3b6:	2b80      	cmp	r3, #128	; 0x80
 800c3b8:	d103      	bne.n	800c3c2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	601a      	str	r2, [r3, #0]
 800c3c0:	e00e      	b.n	800c3e0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c3c2:	7bbb      	ldrb	r3, [r7, #14]
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 ffb0 	bl	800d32c <USBD_LL_IsStallEP>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d003      	beq.n	800c3da <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	601a      	str	r2, [r3, #0]
 800c3d8:	e002      	b.n	800c3e0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	2202      	movs	r2, #2
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 fb95 	bl	800cb16 <USBD_CtlSendData>
              break;
 800c3ec:	e004      	b.n	800c3f8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c3ee:	6839      	ldr	r1, [r7, #0]
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 fb26 	bl	800ca42 <USBD_CtlError>
              break;
 800c3f6:	bf00      	nop
          }
          break;
 800c3f8:	e004      	b.n	800c404 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c3fa:	6839      	ldr	r1, [r7, #0]
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 fb20 	bl	800ca42 <USBD_CtlError>
          break;
 800c402:	bf00      	nop
      }
      break;
 800c404:	e004      	b.n	800c410 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c406:	6839      	ldr	r1, [r7, #0]
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 fb1a 	bl	800ca42 <USBD_CtlError>
      break;
 800c40e:	bf00      	nop
  }

  return ret;
 800c410:	7bfb      	ldrb	r3, [r7, #15]
}
 800c412:	4618      	mov	r0, r3
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
	...

0800c41c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c426:	2300      	movs	r3, #0
 800c428:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c42a:	2300      	movs	r3, #0
 800c42c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c42e:	2300      	movs	r3, #0
 800c430:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	885b      	ldrh	r3, [r3, #2]
 800c436:	0a1b      	lsrs	r3, r3, #8
 800c438:	b29b      	uxth	r3, r3
 800c43a:	3b01      	subs	r3, #1
 800c43c:	2b06      	cmp	r3, #6
 800c43e:	f200 8128 	bhi.w	800c692 <USBD_GetDescriptor+0x276>
 800c442:	a201      	add	r2, pc, #4	; (adr r2, 800c448 <USBD_GetDescriptor+0x2c>)
 800c444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c448:	0800c465 	.word	0x0800c465
 800c44c:	0800c47d 	.word	0x0800c47d
 800c450:	0800c4bd 	.word	0x0800c4bd
 800c454:	0800c693 	.word	0x0800c693
 800c458:	0800c693 	.word	0x0800c693
 800c45c:	0800c633 	.word	0x0800c633
 800c460:	0800c65f 	.word	0x0800c65f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	7c12      	ldrb	r2, [r2, #16]
 800c470:	f107 0108 	add.w	r1, r7, #8
 800c474:	4610      	mov	r0, r2
 800c476:	4798      	blx	r3
 800c478:	60f8      	str	r0, [r7, #12]
      break;
 800c47a:	e112      	b.n	800c6a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	7c1b      	ldrb	r3, [r3, #16]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d10d      	bne.n	800c4a0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c48a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c48c:	f107 0208 	add.w	r2, r7, #8
 800c490:	4610      	mov	r0, r2
 800c492:	4798      	blx	r3
 800c494:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	3301      	adds	r3, #1
 800c49a:	2202      	movs	r2, #2
 800c49c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c49e:	e100      	b.n	800c6a2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a8:	f107 0208 	add.w	r2, r7, #8
 800c4ac:	4610      	mov	r0, r2
 800c4ae:	4798      	blx	r3
 800c4b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	2202      	movs	r2, #2
 800c4b8:	701a      	strb	r2, [r3, #0]
      break;
 800c4ba:	e0f2      	b.n	800c6a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	885b      	ldrh	r3, [r3, #2]
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	2b05      	cmp	r3, #5
 800c4c4:	f200 80ac 	bhi.w	800c620 <USBD_GetDescriptor+0x204>
 800c4c8:	a201      	add	r2, pc, #4	; (adr r2, 800c4d0 <USBD_GetDescriptor+0xb4>)
 800c4ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ce:	bf00      	nop
 800c4d0:	0800c4e9 	.word	0x0800c4e9
 800c4d4:	0800c51d 	.word	0x0800c51d
 800c4d8:	0800c551 	.word	0x0800c551
 800c4dc:	0800c585 	.word	0x0800c585
 800c4e0:	0800c5b9 	.word	0x0800c5b9
 800c4e4:	0800c5ed 	.word	0x0800c5ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d00b      	beq.n	800c50c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	7c12      	ldrb	r2, [r2, #16]
 800c500:	f107 0108 	add.w	r1, r7, #8
 800c504:	4610      	mov	r0, r2
 800c506:	4798      	blx	r3
 800c508:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c50a:	e091      	b.n	800c630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c50c:	6839      	ldr	r1, [r7, #0]
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 fa97 	bl	800ca42 <USBD_CtlError>
            err++;
 800c514:	7afb      	ldrb	r3, [r7, #11]
 800c516:	3301      	adds	r3, #1
 800c518:	72fb      	strb	r3, [r7, #11]
          break;
 800c51a:	e089      	b.n	800c630 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c522:	689b      	ldr	r3, [r3, #8]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d00b      	beq.n	800c540 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c52e:	689b      	ldr	r3, [r3, #8]
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	7c12      	ldrb	r2, [r2, #16]
 800c534:	f107 0108 	add.w	r1, r7, #8
 800c538:	4610      	mov	r0, r2
 800c53a:	4798      	blx	r3
 800c53c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c53e:	e077      	b.n	800c630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c540:	6839      	ldr	r1, [r7, #0]
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f000 fa7d 	bl	800ca42 <USBD_CtlError>
            err++;
 800c548:	7afb      	ldrb	r3, [r7, #11]
 800c54a:	3301      	adds	r3, #1
 800c54c:	72fb      	strb	r3, [r7, #11]
          break;
 800c54e:	e06f      	b.n	800c630 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c556:	68db      	ldr	r3, [r3, #12]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d00b      	beq.n	800c574 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	7c12      	ldrb	r2, [r2, #16]
 800c568:	f107 0108 	add.w	r1, r7, #8
 800c56c:	4610      	mov	r0, r2
 800c56e:	4798      	blx	r3
 800c570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c572:	e05d      	b.n	800c630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c574:	6839      	ldr	r1, [r7, #0]
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 fa63 	bl	800ca42 <USBD_CtlError>
            err++;
 800c57c:	7afb      	ldrb	r3, [r7, #11]
 800c57e:	3301      	adds	r3, #1
 800c580:	72fb      	strb	r3, [r7, #11]
          break;
 800c582:	e055      	b.n	800c630 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c58a:	691b      	ldr	r3, [r3, #16]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d00b      	beq.n	800c5a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c596:	691b      	ldr	r3, [r3, #16]
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	7c12      	ldrb	r2, [r2, #16]
 800c59c:	f107 0108 	add.w	r1, r7, #8
 800c5a0:	4610      	mov	r0, r2
 800c5a2:	4798      	blx	r3
 800c5a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5a6:	e043      	b.n	800c630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c5a8:	6839      	ldr	r1, [r7, #0]
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f000 fa49 	bl	800ca42 <USBD_CtlError>
            err++;
 800c5b0:	7afb      	ldrb	r3, [r7, #11]
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	72fb      	strb	r3, [r7, #11]
          break;
 800c5b6:	e03b      	b.n	800c630 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c5be:	695b      	ldr	r3, [r3, #20]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d00b      	beq.n	800c5dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c5ca:	695b      	ldr	r3, [r3, #20]
 800c5cc:	687a      	ldr	r2, [r7, #4]
 800c5ce:	7c12      	ldrb	r2, [r2, #16]
 800c5d0:	f107 0108 	add.w	r1, r7, #8
 800c5d4:	4610      	mov	r0, r2
 800c5d6:	4798      	blx	r3
 800c5d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5da:	e029      	b.n	800c630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c5dc:	6839      	ldr	r1, [r7, #0]
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 fa2f 	bl	800ca42 <USBD_CtlError>
            err++;
 800c5e4:	7afb      	ldrb	r3, [r7, #11]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c5ea:	e021      	b.n	800c630 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c5f2:	699b      	ldr	r3, [r3, #24]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00b      	beq.n	800c610 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c5fe:	699b      	ldr	r3, [r3, #24]
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	7c12      	ldrb	r2, [r2, #16]
 800c604:	f107 0108 	add.w	r1, r7, #8
 800c608:	4610      	mov	r0, r2
 800c60a:	4798      	blx	r3
 800c60c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c60e:	e00f      	b.n	800c630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c610:	6839      	ldr	r1, [r7, #0]
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 fa15 	bl	800ca42 <USBD_CtlError>
            err++;
 800c618:	7afb      	ldrb	r3, [r7, #11]
 800c61a:	3301      	adds	r3, #1
 800c61c:	72fb      	strb	r3, [r7, #11]
          break;
 800c61e:	e007      	b.n	800c630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c620:	6839      	ldr	r1, [r7, #0]
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 fa0d 	bl	800ca42 <USBD_CtlError>
          err++;
 800c628:	7afb      	ldrb	r3, [r7, #11]
 800c62a:	3301      	adds	r3, #1
 800c62c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c62e:	e038      	b.n	800c6a2 <USBD_GetDescriptor+0x286>
 800c630:	e037      	b.n	800c6a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	7c1b      	ldrb	r3, [r3, #16]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d109      	bne.n	800c64e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c642:	f107 0208 	add.w	r2, r7, #8
 800c646:	4610      	mov	r0, r2
 800c648:	4798      	blx	r3
 800c64a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c64c:	e029      	b.n	800c6a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c64e:	6839      	ldr	r1, [r7, #0]
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 f9f6 	bl	800ca42 <USBD_CtlError>
        err++;
 800c656:	7afb      	ldrb	r3, [r7, #11]
 800c658:	3301      	adds	r3, #1
 800c65a:	72fb      	strb	r3, [r7, #11]
      break;
 800c65c:	e021      	b.n	800c6a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	7c1b      	ldrb	r3, [r3, #16]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d10d      	bne.n	800c682 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c66e:	f107 0208 	add.w	r2, r7, #8
 800c672:	4610      	mov	r0, r2
 800c674:	4798      	blx	r3
 800c676:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	3301      	adds	r3, #1
 800c67c:	2207      	movs	r2, #7
 800c67e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c680:	e00f      	b.n	800c6a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c682:	6839      	ldr	r1, [r7, #0]
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 f9dc 	bl	800ca42 <USBD_CtlError>
        err++;
 800c68a:	7afb      	ldrb	r3, [r7, #11]
 800c68c:	3301      	adds	r3, #1
 800c68e:	72fb      	strb	r3, [r7, #11]
      break;
 800c690:	e007      	b.n	800c6a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c692:	6839      	ldr	r1, [r7, #0]
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f000 f9d4 	bl	800ca42 <USBD_CtlError>
      err++;
 800c69a:	7afb      	ldrb	r3, [r7, #11]
 800c69c:	3301      	adds	r3, #1
 800c69e:	72fb      	strb	r3, [r7, #11]
      break;
 800c6a0:	bf00      	nop
  }

  if (err != 0U)
 800c6a2:	7afb      	ldrb	r3, [r7, #11]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d11c      	bne.n	800c6e2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c6a8:	893b      	ldrh	r3, [r7, #8]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d011      	beq.n	800c6d2 <USBD_GetDescriptor+0x2b6>
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	88db      	ldrh	r3, [r3, #6]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d00d      	beq.n	800c6d2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	88da      	ldrh	r2, [r3, #6]
 800c6ba:	893b      	ldrh	r3, [r7, #8]
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	bf28      	it	cs
 800c6c0:	4613      	movcs	r3, r2
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c6c6:	893b      	ldrh	r3, [r7, #8]
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	68f9      	ldr	r1, [r7, #12]
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f000 fa22 	bl	800cb16 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	88db      	ldrh	r3, [r3, #6]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d104      	bne.n	800c6e4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 fa79 	bl	800cbd2 <USBD_CtlSendStatus>
 800c6e0:	e000      	b.n	800c6e4 <USBD_GetDescriptor+0x2c8>
    return;
 800c6e2:	bf00      	nop
    }
  }
}
 800c6e4:	3710      	adds	r7, #16
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop

0800c6ec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	889b      	ldrh	r3, [r3, #4]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d130      	bne.n	800c760 <USBD_SetAddress+0x74>
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	88db      	ldrh	r3, [r3, #6]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d12c      	bne.n	800c760 <USBD_SetAddress+0x74>
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	885b      	ldrh	r3, [r3, #2]
 800c70a:	2b7f      	cmp	r3, #127	; 0x7f
 800c70c:	d828      	bhi.n	800c760 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	885b      	ldrh	r3, [r3, #2]
 800c712:	b2db      	uxtb	r3, r3
 800c714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c718:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c720:	2b03      	cmp	r3, #3
 800c722:	d104      	bne.n	800c72e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c724:	6839      	ldr	r1, [r7, #0]
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 f98b 	bl	800ca42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c72c:	e01d      	b.n	800c76a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	7bfa      	ldrb	r2, [r7, #15]
 800c732:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c736:	7bfb      	ldrb	r3, [r7, #15]
 800c738:	4619      	mov	r1, r3
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 fe22 	bl	800d384 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 fa46 	bl	800cbd2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c746:	7bfb      	ldrb	r3, [r7, #15]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d004      	beq.n	800c756 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2202      	movs	r2, #2
 800c750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c754:	e009      	b.n	800c76a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2201      	movs	r2, #1
 800c75a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c75e:	e004      	b.n	800c76a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c760:	6839      	ldr	r1, [r7, #0]
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 f96d 	bl	800ca42 <USBD_CtlError>
  }
}
 800c768:	bf00      	nop
 800c76a:	bf00      	nop
 800c76c:	3710      	adds	r7, #16
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
	...

0800c774 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	885b      	ldrh	r3, [r3, #2]
 800c782:	b2da      	uxtb	r2, r3
 800c784:	4b41      	ldr	r3, [pc, #260]	; (800c88c <USBD_SetConfig+0x118>)
 800c786:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c788:	4b40      	ldr	r3, [pc, #256]	; (800c88c <USBD_SetConfig+0x118>)
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d904      	bls.n	800c79a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c790:	6839      	ldr	r1, [r7, #0]
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f955 	bl	800ca42 <USBD_CtlError>
 800c798:	e075      	b.n	800c886 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7a0:	2b02      	cmp	r3, #2
 800c7a2:	d002      	beq.n	800c7aa <USBD_SetConfig+0x36>
 800c7a4:	2b03      	cmp	r3, #3
 800c7a6:	d023      	beq.n	800c7f0 <USBD_SetConfig+0x7c>
 800c7a8:	e062      	b.n	800c870 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c7aa:	4b38      	ldr	r3, [pc, #224]	; (800c88c <USBD_SetConfig+0x118>)
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d01a      	beq.n	800c7e8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c7b2:	4b36      	ldr	r3, [pc, #216]	; (800c88c <USBD_SetConfig+0x118>)
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2203      	movs	r2, #3
 800c7c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c7c4:	4b31      	ldr	r3, [pc, #196]	; (800c88c <USBD_SetConfig+0x118>)
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f7ff f9e8 	bl	800bba0 <USBD_SetClassConfig>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b02      	cmp	r3, #2
 800c7d4:	d104      	bne.n	800c7e0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c7d6:	6839      	ldr	r1, [r7, #0]
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 f932 	bl	800ca42 <USBD_CtlError>
            return;
 800c7de:	e052      	b.n	800c886 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 f9f6 	bl	800cbd2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c7e6:	e04e      	b.n	800c886 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 f9f2 	bl	800cbd2 <USBD_CtlSendStatus>
        break;
 800c7ee:	e04a      	b.n	800c886 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c7f0:	4b26      	ldr	r3, [pc, #152]	; (800c88c <USBD_SetConfig+0x118>)
 800c7f2:	781b      	ldrb	r3, [r3, #0]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d112      	bne.n	800c81e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2202      	movs	r2, #2
 800c7fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800c800:	4b22      	ldr	r3, [pc, #136]	; (800c88c <USBD_SetConfig+0x118>)
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	461a      	mov	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c80a:	4b20      	ldr	r3, [pc, #128]	; (800c88c <USBD_SetConfig+0x118>)
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	4619      	mov	r1, r3
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f7ff f9e4 	bl	800bbde <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 f9db 	bl	800cbd2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c81c:	e033      	b.n	800c886 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c81e:	4b1b      	ldr	r3, [pc, #108]	; (800c88c <USBD_SetConfig+0x118>)
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	461a      	mov	r2, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d01d      	beq.n	800c868 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	b2db      	uxtb	r3, r3
 800c832:	4619      	mov	r1, r3
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f7ff f9d2 	bl	800bbde <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c83a:	4b14      	ldr	r3, [pc, #80]	; (800c88c <USBD_SetConfig+0x118>)
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	461a      	mov	r2, r3
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c844:	4b11      	ldr	r3, [pc, #68]	; (800c88c <USBD_SetConfig+0x118>)
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	4619      	mov	r1, r3
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f7ff f9a8 	bl	800bba0 <USBD_SetClassConfig>
 800c850:	4603      	mov	r3, r0
 800c852:	2b02      	cmp	r3, #2
 800c854:	d104      	bne.n	800c860 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c856:	6839      	ldr	r1, [r7, #0]
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 f8f2 	bl	800ca42 <USBD_CtlError>
            return;
 800c85e:	e012      	b.n	800c886 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f000 f9b6 	bl	800cbd2 <USBD_CtlSendStatus>
        break;
 800c866:	e00e      	b.n	800c886 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f000 f9b2 	bl	800cbd2 <USBD_CtlSendStatus>
        break;
 800c86e:	e00a      	b.n	800c886 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c870:	6839      	ldr	r1, [r7, #0]
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 f8e5 	bl	800ca42 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c878:	4b04      	ldr	r3, [pc, #16]	; (800c88c <USBD_SetConfig+0x118>)
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	4619      	mov	r1, r3
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f7ff f9ad 	bl	800bbde <USBD_ClrClassConfig>
        break;
 800c884:	bf00      	nop
    }
  }
}
 800c886:	3708      	adds	r7, #8
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	2000028c 	.word	0x2000028c

0800c890 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	88db      	ldrh	r3, [r3, #6]
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d004      	beq.n	800c8ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c8a2:	6839      	ldr	r1, [r7, #0]
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 f8cc 	bl	800ca42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c8aa:	e022      	b.n	800c8f2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8b2:	2b02      	cmp	r3, #2
 800c8b4:	dc02      	bgt.n	800c8bc <USBD_GetConfig+0x2c>
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	dc03      	bgt.n	800c8c2 <USBD_GetConfig+0x32>
 800c8ba:	e015      	b.n	800c8e8 <USBD_GetConfig+0x58>
 800c8bc:	2b03      	cmp	r3, #3
 800c8be:	d00b      	beq.n	800c8d8 <USBD_GetConfig+0x48>
 800c8c0:	e012      	b.n	800c8e8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	3308      	adds	r3, #8
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f000 f920 	bl	800cb16 <USBD_CtlSendData>
        break;
 800c8d6:	e00c      	b.n	800c8f2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	3304      	adds	r3, #4
 800c8dc:	2201      	movs	r2, #1
 800c8de:	4619      	mov	r1, r3
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 f918 	bl	800cb16 <USBD_CtlSendData>
        break;
 800c8e6:	e004      	b.n	800c8f2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c8e8:	6839      	ldr	r1, [r7, #0]
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 f8a9 	bl	800ca42 <USBD_CtlError>
        break;
 800c8f0:	bf00      	nop
}
 800c8f2:	bf00      	nop
 800c8f4:	3708      	adds	r7, #8
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b082      	sub	sp, #8
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
 800c902:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c90a:	3b01      	subs	r3, #1
 800c90c:	2b02      	cmp	r3, #2
 800c90e:	d81e      	bhi.n	800c94e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	88db      	ldrh	r3, [r3, #6]
 800c914:	2b02      	cmp	r3, #2
 800c916:	d004      	beq.n	800c922 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c918:	6839      	ldr	r1, [r7, #0]
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 f891 	bl	800ca42 <USBD_CtlError>
        break;
 800c920:	e01a      	b.n	800c958 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2201      	movs	r2, #1
 800c926:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d005      	beq.n	800c93e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	68db      	ldr	r3, [r3, #12]
 800c936:	f043 0202 	orr.w	r2, r3, #2
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	330c      	adds	r3, #12
 800c942:	2202      	movs	r2, #2
 800c944:	4619      	mov	r1, r3
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 f8e5 	bl	800cb16 <USBD_CtlSendData>
      break;
 800c94c:	e004      	b.n	800c958 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c94e:	6839      	ldr	r1, [r7, #0]
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f000 f876 	bl	800ca42 <USBD_CtlError>
      break;
 800c956:	bf00      	nop
  }
}
 800c958:	bf00      	nop
 800c95a:	3708      	adds	r7, #8
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}

0800c960 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	885b      	ldrh	r3, [r3, #2]
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d106      	bne.n	800c980 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2201      	movs	r2, #1
 800c976:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f000 f929 	bl	800cbd2 <USBD_CtlSendStatus>
  }
}
 800c980:	bf00      	nop
 800c982:	3708      	adds	r7, #8
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c998:	3b01      	subs	r3, #1
 800c99a:	2b02      	cmp	r3, #2
 800c99c:	d80b      	bhi.n	800c9b6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	885b      	ldrh	r3, [r3, #2]
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d10c      	bne.n	800c9c0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 f90f 	bl	800cbd2 <USBD_CtlSendStatus>
      }
      break;
 800c9b4:	e004      	b.n	800c9c0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 f842 	bl	800ca42 <USBD_CtlError>
      break;
 800c9be:	e000      	b.n	800c9c2 <USBD_ClrFeature+0x3a>
      break;
 800c9c0:	bf00      	nop
  }
}
 800c9c2:	bf00      	nop
 800c9c4:	3708      	adds	r7, #8
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}

0800c9ca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c9ca:	b480      	push	{r7}
 800c9cc:	b083      	sub	sp, #12
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
 800c9d2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	781a      	ldrb	r2, [r3, #0]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	785a      	ldrb	r2, [r3, #1]
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	3302      	adds	r3, #2
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	b29a      	uxth	r2, r3
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	3303      	adds	r3, #3
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	021b      	lsls	r3, r3, #8
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	4413      	add	r3, r2
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	3304      	adds	r3, #4
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	b29a      	uxth	r2, r3
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	3305      	adds	r3, #5
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	021b      	lsls	r3, r3, #8
 800ca12:	b29b      	uxth	r3, r3
 800ca14:	4413      	add	r3, r2
 800ca16:	b29a      	uxth	r2, r3
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	3306      	adds	r3, #6
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	b29a      	uxth	r2, r3
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	3307      	adds	r3, #7
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	b29b      	uxth	r3, r3
 800ca2c:	021b      	lsls	r3, r3, #8
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	4413      	add	r3, r2
 800ca32:	b29a      	uxth	r2, r3
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	80da      	strh	r2, [r3, #6]

}
 800ca38:	bf00      	nop
 800ca3a:	370c      	adds	r7, #12
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bc80      	pop	{r7}
 800ca40:	4770      	bx	lr

0800ca42 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ca42:	b580      	push	{r7, lr}
 800ca44:	b082      	sub	sp, #8
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
 800ca4a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ca4c:	2180      	movs	r1, #128	; 0x80
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 fc2e 	bl	800d2b0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ca54:	2100      	movs	r1, #0
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f000 fc2a 	bl	800d2b0 <USBD_LL_StallEP>
}
 800ca5c:	bf00      	nop
 800ca5e:	3708      	adds	r7, #8
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b086      	sub	sp, #24
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ca70:	2300      	movs	r3, #0
 800ca72:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d032      	beq.n	800cae0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ca7a:	68f8      	ldr	r0, [r7, #12]
 800ca7c:	f000 f834 	bl	800cae8 <USBD_GetLen>
 800ca80:	4603      	mov	r3, r0
 800ca82:	3301      	adds	r3, #1
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	005b      	lsls	r3, r3, #1
 800ca88:	b29a      	uxth	r2, r3
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ca8e:	7dfb      	ldrb	r3, [r7, #23]
 800ca90:	1c5a      	adds	r2, r3, #1
 800ca92:	75fa      	strb	r2, [r7, #23]
 800ca94:	461a      	mov	r2, r3
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	4413      	add	r3, r2
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	7812      	ldrb	r2, [r2, #0]
 800ca9e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800caa0:	7dfb      	ldrb	r3, [r7, #23]
 800caa2:	1c5a      	adds	r2, r3, #1
 800caa4:	75fa      	strb	r2, [r7, #23]
 800caa6:	461a      	mov	r2, r3
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	4413      	add	r3, r2
 800caac:	2203      	movs	r2, #3
 800caae:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800cab0:	e012      	b.n	800cad8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	1c5a      	adds	r2, r3, #1
 800cab6:	60fa      	str	r2, [r7, #12]
 800cab8:	7dfa      	ldrb	r2, [r7, #23]
 800caba:	1c51      	adds	r1, r2, #1
 800cabc:	75f9      	strb	r1, [r7, #23]
 800cabe:	4611      	mov	r1, r2
 800cac0:	68ba      	ldr	r2, [r7, #8]
 800cac2:	440a      	add	r2, r1
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800cac8:	7dfb      	ldrb	r3, [r7, #23]
 800caca:	1c5a      	adds	r2, r3, #1
 800cacc:	75fa      	strb	r2, [r7, #23]
 800cace:	461a      	mov	r2, r3
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	4413      	add	r3, r2
 800cad4:	2200      	movs	r2, #0
 800cad6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d1e8      	bne.n	800cab2 <USBD_GetString+0x4e>
    }
  }
}
 800cae0:	bf00      	nop
 800cae2:	3718      	adds	r7, #24
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cae8:	b480      	push	{r7}
 800caea:	b085      	sub	sp, #20
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800caf0:	2300      	movs	r3, #0
 800caf2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800caf4:	e005      	b.n	800cb02 <USBD_GetLen+0x1a>
  {
    len++;
 800caf6:	7bfb      	ldrb	r3, [r7, #15]
 800caf8:	3301      	adds	r3, #1
 800cafa:	73fb      	strb	r3, [r7, #15]
    buf++;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	3301      	adds	r3, #1
 800cb00:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d1f5      	bne.n	800caf6 <USBD_GetLen+0xe>
  }

  return len;
 800cb0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3714      	adds	r7, #20
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bc80      	pop	{r7}
 800cb14:	4770      	bx	lr

0800cb16 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800cb16:	b580      	push	{r7, lr}
 800cb18:	b084      	sub	sp, #16
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	60f8      	str	r0, [r7, #12]
 800cb1e:	60b9      	str	r1, [r7, #8]
 800cb20:	4613      	mov	r3, r2
 800cb22:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2202      	movs	r2, #2
 800cb28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cb2c:	88fa      	ldrh	r2, [r7, #6]
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800cb32:	88fa      	ldrh	r2, [r7, #6]
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb38:	88fb      	ldrh	r3, [r7, #6]
 800cb3a:	68ba      	ldr	r2, [r7, #8]
 800cb3c:	2100      	movs	r1, #0
 800cb3e:	68f8      	ldr	r0, [r7, #12]
 800cb40:	f000 fc3f 	bl	800d3c2 <USBD_LL_Transmit>

  return USBD_OK;
 800cb44:	2300      	movs	r3, #0
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3710      	adds	r7, #16
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}

0800cb4e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b084      	sub	sp, #16
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	60f8      	str	r0, [r7, #12]
 800cb56:	60b9      	str	r1, [r7, #8]
 800cb58:	4613      	mov	r3, r2
 800cb5a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb5c:	88fb      	ldrh	r3, [r7, #6]
 800cb5e:	68ba      	ldr	r2, [r7, #8]
 800cb60:	2100      	movs	r1, #0
 800cb62:	68f8      	ldr	r0, [r7, #12]
 800cb64:	f000 fc2d 	bl	800d3c2 <USBD_LL_Transmit>

  return USBD_OK;
 800cb68:	2300      	movs	r3, #0
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3710      	adds	r7, #16
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}

0800cb72 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800cb72:	b580      	push	{r7, lr}
 800cb74:	b084      	sub	sp, #16
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	60f8      	str	r0, [r7, #12]
 800cb7a:	60b9      	str	r1, [r7, #8]
 800cb7c:	4613      	mov	r3, r2
 800cb7e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2203      	movs	r2, #3
 800cb84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cb88:	88fa      	ldrh	r2, [r7, #6]
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800cb90:	88fa      	ldrh	r2, [r7, #6]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb98:	88fb      	ldrh	r3, [r7, #6]
 800cb9a:	68ba      	ldr	r2, [r7, #8]
 800cb9c:	2100      	movs	r1, #0
 800cb9e:	68f8      	ldr	r0, [r7, #12]
 800cba0:	f000 fc32 	bl	800d408 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cba4:	2300      	movs	r3, #0
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3710      	adds	r7, #16
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b084      	sub	sp, #16
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	60f8      	str	r0, [r7, #12]
 800cbb6:	60b9      	str	r1, [r7, #8]
 800cbb8:	4613      	mov	r3, r2
 800cbba:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cbbc:	88fb      	ldrh	r3, [r7, #6]
 800cbbe:	68ba      	ldr	r2, [r7, #8]
 800cbc0:	2100      	movs	r1, #0
 800cbc2:	68f8      	ldr	r0, [r7, #12]
 800cbc4:	f000 fc20 	bl	800d408 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbc8:	2300      	movs	r3, #0
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3710      	adds	r7, #16
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}

0800cbd2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cbd2:	b580      	push	{r7, lr}
 800cbd4:	b082      	sub	sp, #8
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2204      	movs	r2, #4
 800cbde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	2100      	movs	r1, #0
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f000 fbea 	bl	800d3c2 <USBD_LL_Transmit>

  return USBD_OK;
 800cbee:	2300      	movs	r3, #0
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3708      	adds	r7, #8
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2205      	movs	r2, #5
 800cc04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc08:	2300      	movs	r3, #0
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	2100      	movs	r1, #0
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 fbfa 	bl	800d408 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc14:	2300      	movs	r3, #0
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3708      	adds	r7, #8
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
	...

0800cc20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cc24:	2200      	movs	r2, #0
 800cc26:	4912      	ldr	r1, [pc, #72]	; (800cc70 <MX_USB_DEVICE_Init+0x50>)
 800cc28:	4812      	ldr	r0, [pc, #72]	; (800cc74 <MX_USB_DEVICE_Init+0x54>)
 800cc2a:	f7fe ff5f 	bl	800baec <USBD_Init>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d001      	beq.n	800cc38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cc34:	f7f7 f845 	bl	8003cc2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cc38:	490f      	ldr	r1, [pc, #60]	; (800cc78 <MX_USB_DEVICE_Init+0x58>)
 800cc3a:	480e      	ldr	r0, [pc, #56]	; (800cc74 <MX_USB_DEVICE_Init+0x54>)
 800cc3c:	f7fe ff81 	bl	800bb42 <USBD_RegisterClass>
 800cc40:	4603      	mov	r3, r0
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d001      	beq.n	800cc4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cc46:	f7f7 f83c 	bl	8003cc2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cc4a:	490c      	ldr	r1, [pc, #48]	; (800cc7c <MX_USB_DEVICE_Init+0x5c>)
 800cc4c:	4809      	ldr	r0, [pc, #36]	; (800cc74 <MX_USB_DEVICE_Init+0x54>)
 800cc4e:	f7fe fee1 	bl	800ba14 <USBD_CDC_RegisterInterface>
 800cc52:	4603      	mov	r3, r0
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d001      	beq.n	800cc5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cc58:	f7f7 f833 	bl	8003cc2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cc5c:	4805      	ldr	r0, [pc, #20]	; (800cc74 <MX_USB_DEVICE_Init+0x54>)
 800cc5e:	f7fe ff89 	bl	800bb74 <USBD_Start>
 800cc62:	4603      	mov	r3, r0
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d001      	beq.n	800cc6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cc68:	f7f7 f82b 	bl	8003cc2 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cc6c:	bf00      	nop
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	2000017c 	.word	0x2000017c
 800cc74:	20001324 	.word	0x20001324
 800cc78:	20000068 	.word	0x20000068
 800cc7c:	2000016c 	.word	0x2000016c

0800cc80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cc84:	2200      	movs	r2, #0
 800cc86:	4905      	ldr	r1, [pc, #20]	; (800cc9c <CDC_Init_FS+0x1c>)
 800cc88:	4805      	ldr	r0, [pc, #20]	; (800cca0 <CDC_Init_FS+0x20>)
 800cc8a:	f7fe fed9 	bl	800ba40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cc8e:	4905      	ldr	r1, [pc, #20]	; (800cca4 <CDC_Init_FS+0x24>)
 800cc90:	4803      	ldr	r0, [pc, #12]	; (800cca0 <CDC_Init_FS+0x20>)
 800cc92:	f7fe feee 	bl	800ba72 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cc96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	200019d0 	.word	0x200019d0
 800cca0:	20001324 	.word	0x20001324
 800cca4:	200015e8 	.word	0x200015e8

0800cca8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ccac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bc80      	pop	{r7}
 800ccb4:	4770      	bx	lr
	...

0800ccb8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	6039      	str	r1, [r7, #0]
 800ccc2:	71fb      	strb	r3, [r7, #7]
 800ccc4:	4613      	mov	r3, r2
 800ccc6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ccc8:	79fb      	ldrb	r3, [r7, #7]
 800ccca:	2b23      	cmp	r3, #35	; 0x23
 800cccc:	d84a      	bhi.n	800cd64 <CDC_Control_FS+0xac>
 800ccce:	a201      	add	r2, pc, #4	; (adr r2, 800ccd4 <CDC_Control_FS+0x1c>)
 800ccd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccd4:	0800cd65 	.word	0x0800cd65
 800ccd8:	0800cd65 	.word	0x0800cd65
 800ccdc:	0800cd65 	.word	0x0800cd65
 800cce0:	0800cd65 	.word	0x0800cd65
 800cce4:	0800cd65 	.word	0x0800cd65
 800cce8:	0800cd65 	.word	0x0800cd65
 800ccec:	0800cd65 	.word	0x0800cd65
 800ccf0:	0800cd65 	.word	0x0800cd65
 800ccf4:	0800cd65 	.word	0x0800cd65
 800ccf8:	0800cd65 	.word	0x0800cd65
 800ccfc:	0800cd65 	.word	0x0800cd65
 800cd00:	0800cd65 	.word	0x0800cd65
 800cd04:	0800cd65 	.word	0x0800cd65
 800cd08:	0800cd65 	.word	0x0800cd65
 800cd0c:	0800cd65 	.word	0x0800cd65
 800cd10:	0800cd65 	.word	0x0800cd65
 800cd14:	0800cd65 	.word	0x0800cd65
 800cd18:	0800cd65 	.word	0x0800cd65
 800cd1c:	0800cd65 	.word	0x0800cd65
 800cd20:	0800cd65 	.word	0x0800cd65
 800cd24:	0800cd65 	.word	0x0800cd65
 800cd28:	0800cd65 	.word	0x0800cd65
 800cd2c:	0800cd65 	.word	0x0800cd65
 800cd30:	0800cd65 	.word	0x0800cd65
 800cd34:	0800cd65 	.word	0x0800cd65
 800cd38:	0800cd65 	.word	0x0800cd65
 800cd3c:	0800cd65 	.word	0x0800cd65
 800cd40:	0800cd65 	.word	0x0800cd65
 800cd44:	0800cd65 	.word	0x0800cd65
 800cd48:	0800cd65 	.word	0x0800cd65
 800cd4c:	0800cd65 	.word	0x0800cd65
 800cd50:	0800cd65 	.word	0x0800cd65
 800cd54:	0800cd65 	.word	0x0800cd65
 800cd58:	0800cd65 	.word	0x0800cd65
 800cd5c:	0800cd65 	.word	0x0800cd65
 800cd60:	0800cd65 	.word	0x0800cd65
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cd64:	bf00      	nop
  }

  return (USBD_OK);
 800cd66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	370c      	adds	r7, #12
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bc80      	pop	{r7}
 800cd70:	4770      	bx	lr
 800cd72:	bf00      	nop

0800cd74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b082      	sub	sp, #8
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cd7e:	6879      	ldr	r1, [r7, #4]
 800cd80:	4805      	ldr	r0, [pc, #20]	; (800cd98 <CDC_Receive_FS+0x24>)
 800cd82:	f7fe fe76 	bl	800ba72 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cd86:	4804      	ldr	r0, [pc, #16]	; (800cd98 <CDC_Receive_FS+0x24>)
 800cd88:	f7fe fe86 	bl	800ba98 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cd8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3708      	adds	r7, #8
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	20001324 	.word	0x20001324

0800cd9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b083      	sub	sp, #12
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	4603      	mov	r3, r0
 800cda4:	6039      	str	r1, [r7, #0]
 800cda6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	2212      	movs	r2, #18
 800cdac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cdae:	4b03      	ldr	r3, [pc, #12]	; (800cdbc <USBD_FS_DeviceDescriptor+0x20>)
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	370c      	adds	r7, #12
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bc80      	pop	{r7}
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	20000198 	.word	0x20000198

0800cdc0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b083      	sub	sp, #12
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	6039      	str	r1, [r7, #0]
 800cdca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	2204      	movs	r2, #4
 800cdd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cdd2:	4b03      	ldr	r3, [pc, #12]	; (800cde0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	370c      	adds	r7, #12
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bc80      	pop	{r7}
 800cddc:	4770      	bx	lr
 800cdde:	bf00      	nop
 800cde0:	200001ac 	.word	0x200001ac

0800cde4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b082      	sub	sp, #8
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	4603      	mov	r3, r0
 800cdec:	6039      	str	r1, [r7, #0]
 800cdee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cdf0:	79fb      	ldrb	r3, [r7, #7]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d105      	bne.n	800ce02 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cdf6:	683a      	ldr	r2, [r7, #0]
 800cdf8:	4907      	ldr	r1, [pc, #28]	; (800ce18 <USBD_FS_ProductStrDescriptor+0x34>)
 800cdfa:	4808      	ldr	r0, [pc, #32]	; (800ce1c <USBD_FS_ProductStrDescriptor+0x38>)
 800cdfc:	f7ff fe32 	bl	800ca64 <USBD_GetString>
 800ce00:	e004      	b.n	800ce0c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce02:	683a      	ldr	r2, [r7, #0]
 800ce04:	4904      	ldr	r1, [pc, #16]	; (800ce18 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce06:	4805      	ldr	r0, [pc, #20]	; (800ce1c <USBD_FS_ProductStrDescriptor+0x38>)
 800ce08:	f7ff fe2c 	bl	800ca64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce0c:	4b02      	ldr	r3, [pc, #8]	; (800ce18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3708      	adds	r7, #8
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	20001db8 	.word	0x20001db8
 800ce1c:	0800db54 	.word	0x0800db54

0800ce20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b082      	sub	sp, #8
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	4603      	mov	r3, r0
 800ce28:	6039      	str	r1, [r7, #0]
 800ce2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce2c:	683a      	ldr	r2, [r7, #0]
 800ce2e:	4904      	ldr	r1, [pc, #16]	; (800ce40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ce30:	4804      	ldr	r0, [pc, #16]	; (800ce44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ce32:	f7ff fe17 	bl	800ca64 <USBD_GetString>
  return USBD_StrDesc;
 800ce36:	4b02      	ldr	r3, [pc, #8]	; (800ce40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3708      	adds	r7, #8
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	20001db8 	.word	0x20001db8
 800ce44:	0800db6c 	.word	0x0800db6c

0800ce48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	4603      	mov	r3, r0
 800ce50:	6039      	str	r1, [r7, #0]
 800ce52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	221a      	movs	r2, #26
 800ce58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce5a:	f000 f843 	bl	800cee4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ce5e:	4b02      	ldr	r3, [pc, #8]	; (800ce68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	200001b0 	.word	0x200001b0

0800ce6c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	4603      	mov	r3, r0
 800ce74:	6039      	str	r1, [r7, #0]
 800ce76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ce78:	79fb      	ldrb	r3, [r7, #7]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d105      	bne.n	800ce8a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce7e:	683a      	ldr	r2, [r7, #0]
 800ce80:	4907      	ldr	r1, [pc, #28]	; (800cea0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce82:	4808      	ldr	r0, [pc, #32]	; (800cea4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce84:	f7ff fdee 	bl	800ca64 <USBD_GetString>
 800ce88:	e004      	b.n	800ce94 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce8a:	683a      	ldr	r2, [r7, #0]
 800ce8c:	4904      	ldr	r1, [pc, #16]	; (800cea0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce8e:	4805      	ldr	r0, [pc, #20]	; (800cea4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce90:	f7ff fde8 	bl	800ca64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce94:	4b02      	ldr	r3, [pc, #8]	; (800cea0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3708      	adds	r7, #8
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	20001db8 	.word	0x20001db8
 800cea4:	0800db78 	.word	0x0800db78

0800cea8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	4603      	mov	r3, r0
 800ceb0:	6039      	str	r1, [r7, #0]
 800ceb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ceb4:	79fb      	ldrb	r3, [r7, #7]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d105      	bne.n	800cec6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ceba:	683a      	ldr	r2, [r7, #0]
 800cebc:	4907      	ldr	r1, [pc, #28]	; (800cedc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cebe:	4808      	ldr	r0, [pc, #32]	; (800cee0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cec0:	f7ff fdd0 	bl	800ca64 <USBD_GetString>
 800cec4:	e004      	b.n	800ced0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cec6:	683a      	ldr	r2, [r7, #0]
 800cec8:	4904      	ldr	r1, [pc, #16]	; (800cedc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ceca:	4805      	ldr	r0, [pc, #20]	; (800cee0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cecc:	f7ff fdca 	bl	800ca64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ced0:	4b02      	ldr	r3, [pc, #8]	; (800cedc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3708      	adds	r7, #8
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	20001db8 	.word	0x20001db8
 800cee0:	0800db84 	.word	0x0800db84

0800cee4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ceea:	4b0f      	ldr	r3, [pc, #60]	; (800cf28 <Get_SerialNum+0x44>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cef0:	4b0e      	ldr	r3, [pc, #56]	; (800cf2c <Get_SerialNum+0x48>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cef6:	4b0e      	ldr	r3, [pc, #56]	; (800cf30 <Get_SerialNum+0x4c>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cefc:	68fa      	ldr	r2, [r7, #12]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	4413      	add	r3, r2
 800cf02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d009      	beq.n	800cf1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf0a:	2208      	movs	r2, #8
 800cf0c:	4909      	ldr	r1, [pc, #36]	; (800cf34 <Get_SerialNum+0x50>)
 800cf0e:	68f8      	ldr	r0, [r7, #12]
 800cf10:	f000 f814 	bl	800cf3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf14:	2204      	movs	r2, #4
 800cf16:	4908      	ldr	r1, [pc, #32]	; (800cf38 <Get_SerialNum+0x54>)
 800cf18:	68b8      	ldr	r0, [r7, #8]
 800cf1a:	f000 f80f 	bl	800cf3c <IntToUnicode>
  }
}
 800cf1e:	bf00      	nop
 800cf20:	3710      	adds	r7, #16
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	1ffff7e8 	.word	0x1ffff7e8
 800cf2c:	1ffff7ec 	.word	0x1ffff7ec
 800cf30:	1ffff7f0 	.word	0x1ffff7f0
 800cf34:	200001b2 	.word	0x200001b2
 800cf38:	200001c2 	.word	0x200001c2

0800cf3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b087      	sub	sp, #28
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	4613      	mov	r3, r2
 800cf48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cf4e:	2300      	movs	r3, #0
 800cf50:	75fb      	strb	r3, [r7, #23]
 800cf52:	e027      	b.n	800cfa4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	0f1b      	lsrs	r3, r3, #28
 800cf58:	2b09      	cmp	r3, #9
 800cf5a:	d80b      	bhi.n	800cf74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	0f1b      	lsrs	r3, r3, #28
 800cf60:	b2da      	uxtb	r2, r3
 800cf62:	7dfb      	ldrb	r3, [r7, #23]
 800cf64:	005b      	lsls	r3, r3, #1
 800cf66:	4619      	mov	r1, r3
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	440b      	add	r3, r1
 800cf6c:	3230      	adds	r2, #48	; 0x30
 800cf6e:	b2d2      	uxtb	r2, r2
 800cf70:	701a      	strb	r2, [r3, #0]
 800cf72:	e00a      	b.n	800cf8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	0f1b      	lsrs	r3, r3, #28
 800cf78:	b2da      	uxtb	r2, r3
 800cf7a:	7dfb      	ldrb	r3, [r7, #23]
 800cf7c:	005b      	lsls	r3, r3, #1
 800cf7e:	4619      	mov	r1, r3
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	440b      	add	r3, r1
 800cf84:	3237      	adds	r2, #55	; 0x37
 800cf86:	b2d2      	uxtb	r2, r2
 800cf88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	011b      	lsls	r3, r3, #4
 800cf8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cf90:	7dfb      	ldrb	r3, [r7, #23]
 800cf92:	005b      	lsls	r3, r3, #1
 800cf94:	3301      	adds	r3, #1
 800cf96:	68ba      	ldr	r2, [r7, #8]
 800cf98:	4413      	add	r3, r2
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cf9e:	7dfb      	ldrb	r3, [r7, #23]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	75fb      	strb	r3, [r7, #23]
 800cfa4:	7dfa      	ldrb	r2, [r7, #23]
 800cfa6:	79fb      	ldrb	r3, [r7, #7]
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d3d3      	bcc.n	800cf54 <IntToUnicode+0x18>
  }
}
 800cfac:	bf00      	nop
 800cfae:	bf00      	nop
 800cfb0:	371c      	adds	r7, #28
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bc80      	pop	{r7}
 800cfb6:	4770      	bx	lr

0800cfb8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b084      	sub	sp, #16
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	4a0d      	ldr	r2, [pc, #52]	; (800cffc <HAL_PCD_MspInit+0x44>)
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d113      	bne.n	800cff2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cfca:	4b0d      	ldr	r3, [pc, #52]	; (800d000 <HAL_PCD_MspInit+0x48>)
 800cfcc:	69db      	ldr	r3, [r3, #28]
 800cfce:	4a0c      	ldr	r2, [pc, #48]	; (800d000 <HAL_PCD_MspInit+0x48>)
 800cfd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cfd4:	61d3      	str	r3, [r2, #28]
 800cfd6:	4b0a      	ldr	r3, [pc, #40]	; (800d000 <HAL_PCD_MspInit+0x48>)
 800cfd8:	69db      	ldr	r3, [r3, #28]
 800cfda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cfde:	60fb      	str	r3, [r7, #12]
 800cfe0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	2100      	movs	r1, #0
 800cfe6:	2014      	movs	r0, #20
 800cfe8:	f7f7 fa25 	bl	8004436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800cfec:	2014      	movs	r0, #20
 800cfee:	f7f7 fa3e 	bl	800446e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cff2:	bf00      	nop
 800cff4:	3710      	adds	r7, #16
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	40005c00 	.word	0x40005c00
 800d000:	40021000 	.word	0x40021000

0800d004 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b082      	sub	sp, #8
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d018:	4619      	mov	r1, r3
 800d01a:	4610      	mov	r0, r2
 800d01c:	f7fe fdf2 	bl	800bc04 <USBD_LL_SetupStage>
}
 800d020:	bf00      	nop
 800d022:	3708      	adds	r7, #8
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}

0800d028 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	460b      	mov	r3, r1
 800d032:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d03a:	78fa      	ldrb	r2, [r7, #3]
 800d03c:	6879      	ldr	r1, [r7, #4]
 800d03e:	4613      	mov	r3, r2
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	4413      	add	r3, r2
 800d044:	00db      	lsls	r3, r3, #3
 800d046:	440b      	add	r3, r1
 800d048:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	78fb      	ldrb	r3, [r7, #3]
 800d050:	4619      	mov	r1, r3
 800d052:	f7fe fe24 	bl	800bc9e <USBD_LL_DataOutStage>
}
 800d056:	bf00      	nop
 800d058:	3708      	adds	r7, #8
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}

0800d05e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d05e:	b580      	push	{r7, lr}
 800d060:	b082      	sub	sp, #8
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]
 800d066:	460b      	mov	r3, r1
 800d068:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d070:	78fa      	ldrb	r2, [r7, #3]
 800d072:	6879      	ldr	r1, [r7, #4]
 800d074:	4613      	mov	r3, r2
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	4413      	add	r3, r2
 800d07a:	00db      	lsls	r3, r3, #3
 800d07c:	440b      	add	r3, r1
 800d07e:	333c      	adds	r3, #60	; 0x3c
 800d080:	681a      	ldr	r2, [r3, #0]
 800d082:	78fb      	ldrb	r3, [r7, #3]
 800d084:	4619      	mov	r1, r3
 800d086:	f7fe fe7b 	bl	800bd80 <USBD_LL_DataInStage>
}
 800d08a:	bf00      	nop
 800d08c:	3708      	adds	r7, #8
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d092:	b580      	push	{r7, lr}
 800d094:	b082      	sub	sp, #8
 800d096:	af00      	add	r7, sp, #0
 800d098:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7fe ff8b 	bl	800bfbc <USBD_LL_SOF>
}
 800d0a6:	bf00      	nop
 800d0a8:	3708      	adds	r7, #8
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}

0800d0ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0ae:	b580      	push	{r7, lr}
 800d0b0:	b084      	sub	sp, #16
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	689b      	ldr	r3, [r3, #8]
 800d0be:	2b02      	cmp	r3, #2
 800d0c0:	d001      	beq.n	800d0c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d0c2:	f7f6 fdfe 	bl	8003cc2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d0cc:	7bfa      	ldrb	r2, [r7, #15]
 800d0ce:	4611      	mov	r1, r2
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7fe ff3b 	bl	800bf4c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7fe fef4 	bl	800beca <USBD_LL_Reset>
}
 800d0e2:	bf00      	nop
 800d0e4:	3710      	adds	r7, #16
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
	...

0800d0ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7fe ff35 	bl	800bf6a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	699b      	ldr	r3, [r3, #24]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d005      	beq.n	800d114 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d108:	4b04      	ldr	r3, [pc, #16]	; (800d11c <HAL_PCD_SuspendCallback+0x30>)
 800d10a:	691b      	ldr	r3, [r3, #16]
 800d10c:	4a03      	ldr	r2, [pc, #12]	; (800d11c <HAL_PCD_SuspendCallback+0x30>)
 800d10e:	f043 0306 	orr.w	r3, r3, #6
 800d112:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d114:	bf00      	nop
 800d116:	3708      	adds	r7, #8
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}
 800d11c:	e000ed00 	.word	0xe000ed00

0800d120 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d12e:	4618      	mov	r0, r3
 800d130:	f7fe ff2f 	bl	800bf92 <USBD_LL_Resume>
}
 800d134:	bf00      	nop
 800d136:	3708      	adds	r7, #8
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d144:	4a28      	ldr	r2, [pc, #160]	; (800d1e8 <USBD_LL_Init+0xac>)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	4a26      	ldr	r2, [pc, #152]	; (800d1e8 <USBD_LL_Init+0xac>)
 800d150:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d154:	4b24      	ldr	r3, [pc, #144]	; (800d1e8 <USBD_LL_Init+0xac>)
 800d156:	4a25      	ldr	r2, [pc, #148]	; (800d1ec <USBD_LL_Init+0xb0>)
 800d158:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d15a:	4b23      	ldr	r3, [pc, #140]	; (800d1e8 <USBD_LL_Init+0xac>)
 800d15c:	2208      	movs	r2, #8
 800d15e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d160:	4b21      	ldr	r3, [pc, #132]	; (800d1e8 <USBD_LL_Init+0xac>)
 800d162:	2202      	movs	r2, #2
 800d164:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d166:	4b20      	ldr	r3, [pc, #128]	; (800d1e8 <USBD_LL_Init+0xac>)
 800d168:	2200      	movs	r2, #0
 800d16a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d16c:	4b1e      	ldr	r3, [pc, #120]	; (800d1e8 <USBD_LL_Init+0xac>)
 800d16e:	2200      	movs	r2, #0
 800d170:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d172:	4b1d      	ldr	r3, [pc, #116]	; (800d1e8 <USBD_LL_Init+0xac>)
 800d174:	2200      	movs	r2, #0
 800d176:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d178:	481b      	ldr	r0, [pc, #108]	; (800d1e8 <USBD_LL_Init+0xac>)
 800d17a:	f7f9 fd6f 	bl	8006c5c <HAL_PCD_Init>
 800d17e:	4603      	mov	r3, r0
 800d180:	2b00      	cmp	r3, #0
 800d182:	d001      	beq.n	800d188 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d184:	f7f6 fd9d 	bl	8003cc2 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d18e:	2318      	movs	r3, #24
 800d190:	2200      	movs	r2, #0
 800d192:	2100      	movs	r1, #0
 800d194:	f7fb f8b1 	bl	80082fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d19e:	2358      	movs	r3, #88	; 0x58
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	2180      	movs	r1, #128	; 0x80
 800d1a4:	f7fb f8a9 	bl	80082fa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d1ae:	23c0      	movs	r3, #192	; 0xc0
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	2181      	movs	r1, #129	; 0x81
 800d1b4:	f7fb f8a1 	bl	80082fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d1be:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	2101      	movs	r1, #1
 800d1c6:	f7fb f898 	bl	80082fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d1d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	2182      	movs	r1, #130	; 0x82
 800d1d8:	f7fb f88f 	bl	80082fa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d1dc:	2300      	movs	r3, #0
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3708      	adds	r7, #8
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	20001fb8 	.word	0x20001fb8
 800d1ec:	40005c00 	.word	0x40005c00

0800d1f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d206:	4618      	mov	r0, r3
 800d208:	f7f9 fe33 	bl	8006e72 <HAL_PCD_Start>
 800d20c:	4603      	mov	r3, r0
 800d20e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d210:	7bfb      	ldrb	r3, [r7, #15]
 800d212:	4618      	mov	r0, r3
 800d214:	f000 f94e 	bl	800d4b4 <USBD_Get_USB_Status>
 800d218:	4603      	mov	r3, r0
 800d21a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d21c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3710      	adds	r7, #16
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}

0800d226 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d226:	b580      	push	{r7, lr}
 800d228:	b084      	sub	sp, #16
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
 800d22e:	4608      	mov	r0, r1
 800d230:	4611      	mov	r1, r2
 800d232:	461a      	mov	r2, r3
 800d234:	4603      	mov	r3, r0
 800d236:	70fb      	strb	r3, [r7, #3]
 800d238:	460b      	mov	r3, r1
 800d23a:	70bb      	strb	r3, [r7, #2]
 800d23c:	4613      	mov	r3, r2
 800d23e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d240:	2300      	movs	r3, #0
 800d242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d244:	2300      	movs	r3, #0
 800d246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d24e:	78bb      	ldrb	r3, [r7, #2]
 800d250:	883a      	ldrh	r2, [r7, #0]
 800d252:	78f9      	ldrb	r1, [r7, #3]
 800d254:	f7f9 ffad 	bl	80071b2 <HAL_PCD_EP_Open>
 800d258:	4603      	mov	r3, r0
 800d25a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d25c:	7bfb      	ldrb	r3, [r7, #15]
 800d25e:	4618      	mov	r0, r3
 800d260:	f000 f928 	bl	800d4b4 <USBD_Get_USB_Status>
 800d264:	4603      	mov	r3, r0
 800d266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d268:	7bbb      	ldrb	r3, [r7, #14]
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3710      	adds	r7, #16
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}

0800d272 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d272:	b580      	push	{r7, lr}
 800d274:	b084      	sub	sp, #16
 800d276:	af00      	add	r7, sp, #0
 800d278:	6078      	str	r0, [r7, #4]
 800d27a:	460b      	mov	r3, r1
 800d27c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d27e:	2300      	movs	r3, #0
 800d280:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d282:	2300      	movs	r3, #0
 800d284:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d28c:	78fa      	ldrb	r2, [r7, #3]
 800d28e:	4611      	mov	r1, r2
 800d290:	4618      	mov	r0, r3
 800d292:	f7f9 fff4 	bl	800727e <HAL_PCD_EP_Close>
 800d296:	4603      	mov	r3, r0
 800d298:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d29a:	7bfb      	ldrb	r3, [r7, #15]
 800d29c:	4618      	mov	r0, r3
 800d29e:	f000 f909 	bl	800d4b4 <USBD_Get_USB_Status>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3710      	adds	r7, #16
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b084      	sub	sp, #16
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d2ca:	78fa      	ldrb	r2, [r7, #3]
 800d2cc:	4611      	mov	r1, r2
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7fa f8b4 	bl	800743c <HAL_PCD_EP_SetStall>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2d8:	7bfb      	ldrb	r3, [r7, #15]
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f000 f8ea 	bl	800d4b4 <USBD_Get_USB_Status>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3710      	adds	r7, #16
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}

0800d2ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2ee:	b580      	push	{r7, lr}
 800d2f0:	b084      	sub	sp, #16
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6078      	str	r0, [r7, #4]
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2fe:	2300      	movs	r3, #0
 800d300:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d308:	78fa      	ldrb	r2, [r7, #3]
 800d30a:	4611      	mov	r1, r2
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7fa f8f5 	bl	80074fc <HAL_PCD_EP_ClrStall>
 800d312:	4603      	mov	r3, r0
 800d314:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d316:	7bfb      	ldrb	r3, [r7, #15]
 800d318:	4618      	mov	r0, r3
 800d31a:	f000 f8cb 	bl	800d4b4 <USBD_Get_USB_Status>
 800d31e:	4603      	mov	r3, r0
 800d320:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d322:	7bbb      	ldrb	r3, [r7, #14]
}
 800d324:	4618      	mov	r0, r3
 800d326:	3710      	adds	r7, #16
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b085      	sub	sp, #20
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	460b      	mov	r3, r1
 800d336:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d33e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d340:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d344:	2b00      	cmp	r3, #0
 800d346:	da0c      	bge.n	800d362 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d348:	78fb      	ldrb	r3, [r7, #3]
 800d34a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d34e:	68f9      	ldr	r1, [r7, #12]
 800d350:	1c5a      	adds	r2, r3, #1
 800d352:	4613      	mov	r3, r2
 800d354:	009b      	lsls	r3, r3, #2
 800d356:	4413      	add	r3, r2
 800d358:	00db      	lsls	r3, r3, #3
 800d35a:	440b      	add	r3, r1
 800d35c:	3302      	adds	r3, #2
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	e00b      	b.n	800d37a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d362:	78fb      	ldrb	r3, [r7, #3]
 800d364:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d368:	68f9      	ldr	r1, [r7, #12]
 800d36a:	4613      	mov	r3, r2
 800d36c:	009b      	lsls	r3, r3, #2
 800d36e:	4413      	add	r3, r2
 800d370:	00db      	lsls	r3, r3, #3
 800d372:	440b      	add	r3, r1
 800d374:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d378:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3714      	adds	r7, #20
 800d37e:	46bd      	mov	sp, r7
 800d380:	bc80      	pop	{r7}
 800d382:	4770      	bx	lr

0800d384 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b084      	sub	sp, #16
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	460b      	mov	r3, r1
 800d38e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d390:	2300      	movs	r3, #0
 800d392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d394:	2300      	movs	r3, #0
 800d396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d39e:	78fa      	ldrb	r2, [r7, #3]
 800d3a0:	4611      	mov	r1, r2
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7f9 fee0 	bl	8007168 <HAL_PCD_SetAddress>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3ac:	7bfb      	ldrb	r3, [r7, #15]
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f000 f880 	bl	800d4b4 <USBD_Get_USB_Status>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3710      	adds	r7, #16
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}

0800d3c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b086      	sub	sp, #24
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	60f8      	str	r0, [r7, #12]
 800d3ca:	607a      	str	r2, [r7, #4]
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	460b      	mov	r3, r1
 800d3d0:	72fb      	strb	r3, [r7, #11]
 800d3d2:	4613      	mov	r3, r2
 800d3d4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d3e4:	893b      	ldrh	r3, [r7, #8]
 800d3e6:	7af9      	ldrb	r1, [r7, #11]
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	f7f9 ffe4 	bl	80073b6 <HAL_PCD_EP_Transmit>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3f2:	7dfb      	ldrb	r3, [r7, #23]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f000 f85d 	bl	800d4b4 <USBD_Get_USB_Status>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d3fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800d400:	4618      	mov	r0, r3
 800d402:	3718      	adds	r7, #24
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b086      	sub	sp, #24
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	607a      	str	r2, [r7, #4]
 800d412:	461a      	mov	r2, r3
 800d414:	460b      	mov	r3, r1
 800d416:	72fb      	strb	r3, [r7, #11]
 800d418:	4613      	mov	r3, r2
 800d41a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d41c:	2300      	movs	r3, #0
 800d41e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d420:	2300      	movs	r3, #0
 800d422:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d42a:	893b      	ldrh	r3, [r7, #8]
 800d42c:	7af9      	ldrb	r1, [r7, #11]
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	f7f9 ff6d 	bl	800730e <HAL_PCD_EP_Receive>
 800d434:	4603      	mov	r3, r0
 800d436:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d438:	7dfb      	ldrb	r3, [r7, #23]
 800d43a:	4618      	mov	r0, r3
 800d43c:	f000 f83a 	bl	800d4b4 <USBD_Get_USB_Status>
 800d440:	4603      	mov	r3, r0
 800d442:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d444:	7dbb      	ldrb	r3, [r7, #22]
}
 800d446:	4618      	mov	r0, r3
 800d448:	3718      	adds	r7, #24
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}

0800d44e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d44e:	b580      	push	{r7, lr}
 800d450:	b082      	sub	sp, #8
 800d452:	af00      	add	r7, sp, #0
 800d454:	6078      	str	r0, [r7, #4]
 800d456:	460b      	mov	r3, r1
 800d458:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d460:	78fa      	ldrb	r2, [r7, #3]
 800d462:	4611      	mov	r1, r2
 800d464:	4618      	mov	r0, r3
 800d466:	f7f9 ff8f 	bl	8007388 <HAL_PCD_EP_GetRxCount>
 800d46a:	4603      	mov	r3, r0
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3708      	adds	r7, #8
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d47c:	4b02      	ldr	r3, [pc, #8]	; (800d488 <USBD_static_malloc+0x14>)
}
 800d47e:	4618      	mov	r0, r3
 800d480:	370c      	adds	r7, #12
 800d482:	46bd      	mov	sp, r7
 800d484:	bc80      	pop	{r7}
 800d486:	4770      	bx	lr
 800d488:	20000290 	.word	0x20000290

0800d48c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d48c:	b480      	push	{r7}
 800d48e:	b083      	sub	sp, #12
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]

}
 800d494:	bf00      	nop
 800d496:	370c      	adds	r7, #12
 800d498:	46bd      	mov	sp, r7
 800d49a:	bc80      	pop	{r7}
 800d49c:	4770      	bx	lr

0800d49e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d49e:	b480      	push	{r7}
 800d4a0:	b083      	sub	sp, #12
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
 800d4a6:	460b      	mov	r3, r1
 800d4a8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d4aa:	bf00      	nop
 800d4ac:	370c      	adds	r7, #12
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bc80      	pop	{r7}
 800d4b2:	4770      	bx	lr

0800d4b4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b085      	sub	sp, #20
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d4c2:	79fb      	ldrb	r3, [r7, #7]
 800d4c4:	2b03      	cmp	r3, #3
 800d4c6:	d817      	bhi.n	800d4f8 <USBD_Get_USB_Status+0x44>
 800d4c8:	a201      	add	r2, pc, #4	; (adr r2, 800d4d0 <USBD_Get_USB_Status+0x1c>)
 800d4ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ce:	bf00      	nop
 800d4d0:	0800d4e1 	.word	0x0800d4e1
 800d4d4:	0800d4e7 	.word	0x0800d4e7
 800d4d8:	0800d4ed 	.word	0x0800d4ed
 800d4dc:	0800d4f3 	.word	0x0800d4f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d4e4:	e00b      	b.n	800d4fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d4e6:	2302      	movs	r3, #2
 800d4e8:	73fb      	strb	r3, [r7, #15]
    break;
 800d4ea:	e008      	b.n	800d4fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d4f0:	e005      	b.n	800d4fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d4f2:	2302      	movs	r3, #2
 800d4f4:	73fb      	strb	r3, [r7, #15]
    break;
 800d4f6:	e002      	b.n	800d4fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d4f8:	2302      	movs	r3, #2
 800d4fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d4fc:	bf00      	nop
  }
  return usb_status;
 800d4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d500:	4618      	mov	r0, r3
 800d502:	3714      	adds	r7, #20
 800d504:	46bd      	mov	sp, r7
 800d506:	bc80      	pop	{r7}
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop

0800d50c <__errno>:
 800d50c:	4b01      	ldr	r3, [pc, #4]	; (800d514 <__errno+0x8>)
 800d50e:	6818      	ldr	r0, [r3, #0]
 800d510:	4770      	bx	lr
 800d512:	bf00      	nop
 800d514:	200001cc 	.word	0x200001cc

0800d518 <__libc_init_array>:
 800d518:	b570      	push	{r4, r5, r6, lr}
 800d51a:	2600      	movs	r6, #0
 800d51c:	4d0c      	ldr	r5, [pc, #48]	; (800d550 <__libc_init_array+0x38>)
 800d51e:	4c0d      	ldr	r4, [pc, #52]	; (800d554 <__libc_init_array+0x3c>)
 800d520:	1b64      	subs	r4, r4, r5
 800d522:	10a4      	asrs	r4, r4, #2
 800d524:	42a6      	cmp	r6, r4
 800d526:	d109      	bne.n	800d53c <__libc_init_array+0x24>
 800d528:	f000 f8fa 	bl	800d720 <_init>
 800d52c:	2600      	movs	r6, #0
 800d52e:	4d0a      	ldr	r5, [pc, #40]	; (800d558 <__libc_init_array+0x40>)
 800d530:	4c0a      	ldr	r4, [pc, #40]	; (800d55c <__libc_init_array+0x44>)
 800d532:	1b64      	subs	r4, r4, r5
 800d534:	10a4      	asrs	r4, r4, #2
 800d536:	42a6      	cmp	r6, r4
 800d538:	d105      	bne.n	800d546 <__libc_init_array+0x2e>
 800d53a:	bd70      	pop	{r4, r5, r6, pc}
 800d53c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d540:	4798      	blx	r3
 800d542:	3601      	adds	r6, #1
 800d544:	e7ee      	b.n	800d524 <__libc_init_array+0xc>
 800d546:	f855 3b04 	ldr.w	r3, [r5], #4
 800d54a:	4798      	blx	r3
 800d54c:	3601      	adds	r6, #1
 800d54e:	e7f2      	b.n	800d536 <__libc_init_array+0x1e>
 800d550:	0800dbf4 	.word	0x0800dbf4
 800d554:	0800dbf4 	.word	0x0800dbf4
 800d558:	0800dbf4 	.word	0x0800dbf4
 800d55c:	0800dbf8 	.word	0x0800dbf8

0800d560 <memset>:
 800d560:	4603      	mov	r3, r0
 800d562:	4402      	add	r2, r0
 800d564:	4293      	cmp	r3, r2
 800d566:	d100      	bne.n	800d56a <memset+0xa>
 800d568:	4770      	bx	lr
 800d56a:	f803 1b01 	strb.w	r1, [r3], #1
 800d56e:	e7f9      	b.n	800d564 <memset+0x4>

0800d570 <sqrt>:
 800d570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d572:	4606      	mov	r6, r0
 800d574:	460f      	mov	r7, r1
 800d576:	f000 f827 	bl	800d5c8 <__ieee754_sqrt>
 800d57a:	4b12      	ldr	r3, [pc, #72]	; (800d5c4 <sqrt+0x54>)
 800d57c:	4604      	mov	r4, r0
 800d57e:	f993 3000 	ldrsb.w	r3, [r3]
 800d582:	460d      	mov	r5, r1
 800d584:	3301      	adds	r3, #1
 800d586:	d019      	beq.n	800d5bc <sqrt+0x4c>
 800d588:	4632      	mov	r2, r6
 800d58a:	463b      	mov	r3, r7
 800d58c:	4630      	mov	r0, r6
 800d58e:	4639      	mov	r1, r7
 800d590:	f7f3 fa32 	bl	80009f8 <__aeabi_dcmpun>
 800d594:	b990      	cbnz	r0, 800d5bc <sqrt+0x4c>
 800d596:	2200      	movs	r2, #0
 800d598:	2300      	movs	r3, #0
 800d59a:	4630      	mov	r0, r6
 800d59c:	4639      	mov	r1, r7
 800d59e:	f7f3 fa03 	bl	80009a8 <__aeabi_dcmplt>
 800d5a2:	b158      	cbz	r0, 800d5bc <sqrt+0x4c>
 800d5a4:	f7ff ffb2 	bl	800d50c <__errno>
 800d5a8:	2321      	movs	r3, #33	; 0x21
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	6003      	str	r3, [r0, #0]
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	4610      	mov	r0, r2
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	f7f3 f8b0 	bl	8000718 <__aeabi_ddiv>
 800d5b8:	4604      	mov	r4, r0
 800d5ba:	460d      	mov	r5, r1
 800d5bc:	4620      	mov	r0, r4
 800d5be:	4629      	mov	r1, r5
 800d5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	20000230 	.word	0x20000230

0800d5c8 <__ieee754_sqrt>:
 800d5c8:	f8df c150 	ldr.w	ip, [pc, #336]	; 800d71c <__ieee754_sqrt+0x154>
 800d5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5d0:	ea3c 0c01 	bics.w	ip, ip, r1
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	4606      	mov	r6, r0
 800d5d8:	460d      	mov	r5, r1
 800d5da:	460a      	mov	r2, r1
 800d5dc:	4607      	mov	r7, r0
 800d5de:	4604      	mov	r4, r0
 800d5e0:	d10e      	bne.n	800d600 <__ieee754_sqrt+0x38>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	f7f2 ff6e 	bl	80004c4 <__aeabi_dmul>
 800d5e8:	4602      	mov	r2, r0
 800d5ea:	460b      	mov	r3, r1
 800d5ec:	4630      	mov	r0, r6
 800d5ee:	4629      	mov	r1, r5
 800d5f0:	f7f2 fdb2 	bl	8000158 <__adddf3>
 800d5f4:	4606      	mov	r6, r0
 800d5f6:	460d      	mov	r5, r1
 800d5f8:	4630      	mov	r0, r6
 800d5fa:	4629      	mov	r1, r5
 800d5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d600:	2900      	cmp	r1, #0
 800d602:	dc0d      	bgt.n	800d620 <__ieee754_sqrt+0x58>
 800d604:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800d608:	ea5c 0707 	orrs.w	r7, ip, r7
 800d60c:	d0f4      	beq.n	800d5f8 <__ieee754_sqrt+0x30>
 800d60e:	b139      	cbz	r1, 800d620 <__ieee754_sqrt+0x58>
 800d610:	4602      	mov	r2, r0
 800d612:	f7f2 fd9f 	bl	8000154 <__aeabi_dsub>
 800d616:	4602      	mov	r2, r0
 800d618:	460b      	mov	r3, r1
 800d61a:	f7f3 f87d 	bl	8000718 <__aeabi_ddiv>
 800d61e:	e7e9      	b.n	800d5f4 <__ieee754_sqrt+0x2c>
 800d620:	1512      	asrs	r2, r2, #20
 800d622:	d074      	beq.n	800d70e <__ieee754_sqrt+0x146>
 800d624:	2000      	movs	r0, #0
 800d626:	07d5      	lsls	r5, r2, #31
 800d628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d62c:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800d630:	bf5e      	ittt	pl
 800d632:	0fe3      	lsrpl	r3, r4, #31
 800d634:	0064      	lslpl	r4, r4, #1
 800d636:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800d63a:	0fe3      	lsrs	r3, r4, #31
 800d63c:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800d640:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800d644:	2516      	movs	r5, #22
 800d646:	4601      	mov	r1, r0
 800d648:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d64c:	1076      	asrs	r6, r6, #1
 800d64e:	0064      	lsls	r4, r4, #1
 800d650:	188f      	adds	r7, r1, r2
 800d652:	429f      	cmp	r7, r3
 800d654:	bfde      	ittt	le
 800d656:	1bdb      	suble	r3, r3, r7
 800d658:	18b9      	addle	r1, r7, r2
 800d65a:	1880      	addle	r0, r0, r2
 800d65c:	005b      	lsls	r3, r3, #1
 800d65e:	3d01      	subs	r5, #1
 800d660:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800d664:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d668:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800d66c:	d1f0      	bne.n	800d650 <__ieee754_sqrt+0x88>
 800d66e:	462a      	mov	r2, r5
 800d670:	f04f 0e20 	mov.w	lr, #32
 800d674:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800d678:	428b      	cmp	r3, r1
 800d67a:	eb07 0c05 	add.w	ip, r7, r5
 800d67e:	dc02      	bgt.n	800d686 <__ieee754_sqrt+0xbe>
 800d680:	d113      	bne.n	800d6aa <__ieee754_sqrt+0xe2>
 800d682:	45a4      	cmp	ip, r4
 800d684:	d811      	bhi.n	800d6aa <__ieee754_sqrt+0xe2>
 800d686:	f1bc 0f00 	cmp.w	ip, #0
 800d68a:	eb0c 0507 	add.w	r5, ip, r7
 800d68e:	da43      	bge.n	800d718 <__ieee754_sqrt+0x150>
 800d690:	2d00      	cmp	r5, #0
 800d692:	db41      	blt.n	800d718 <__ieee754_sqrt+0x150>
 800d694:	f101 0801 	add.w	r8, r1, #1
 800d698:	1a5b      	subs	r3, r3, r1
 800d69a:	4641      	mov	r1, r8
 800d69c:	45a4      	cmp	ip, r4
 800d69e:	bf88      	it	hi
 800d6a0:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d6a4:	eba4 040c 	sub.w	r4, r4, ip
 800d6a8:	443a      	add	r2, r7
 800d6aa:	005b      	lsls	r3, r3, #1
 800d6ac:	f1be 0e01 	subs.w	lr, lr, #1
 800d6b0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800d6b4:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800d6b8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800d6bc:	d1dc      	bne.n	800d678 <__ieee754_sqrt+0xb0>
 800d6be:	4323      	orrs	r3, r4
 800d6c0:	d006      	beq.n	800d6d0 <__ieee754_sqrt+0x108>
 800d6c2:	1c54      	adds	r4, r2, #1
 800d6c4:	bf0b      	itete	eq
 800d6c6:	4672      	moveq	r2, lr
 800d6c8:	3201      	addne	r2, #1
 800d6ca:	3001      	addeq	r0, #1
 800d6cc:	f022 0201 	bicne.w	r2, r2, #1
 800d6d0:	1043      	asrs	r3, r0, #1
 800d6d2:	07c1      	lsls	r1, r0, #31
 800d6d4:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d6d8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d6dc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d6e0:	bf48      	it	mi
 800d6e2:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d6e6:	4610      	mov	r0, r2
 800d6e8:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800d6ec:	e782      	b.n	800d5f4 <__ieee754_sqrt+0x2c>
 800d6ee:	0ae3      	lsrs	r3, r4, #11
 800d6f0:	3915      	subs	r1, #21
 800d6f2:	0564      	lsls	r4, r4, #21
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d0fa      	beq.n	800d6ee <__ieee754_sqrt+0x126>
 800d6f8:	02de      	lsls	r6, r3, #11
 800d6fa:	d50a      	bpl.n	800d712 <__ieee754_sqrt+0x14a>
 800d6fc:	f1c2 0020 	rsb	r0, r2, #32
 800d700:	fa24 f000 	lsr.w	r0, r4, r0
 800d704:	1e55      	subs	r5, r2, #1
 800d706:	4094      	lsls	r4, r2
 800d708:	4303      	orrs	r3, r0
 800d70a:	1b4a      	subs	r2, r1, r5
 800d70c:	e78a      	b.n	800d624 <__ieee754_sqrt+0x5c>
 800d70e:	4611      	mov	r1, r2
 800d710:	e7f0      	b.n	800d6f4 <__ieee754_sqrt+0x12c>
 800d712:	005b      	lsls	r3, r3, #1
 800d714:	3201      	adds	r2, #1
 800d716:	e7ef      	b.n	800d6f8 <__ieee754_sqrt+0x130>
 800d718:	4688      	mov	r8, r1
 800d71a:	e7bd      	b.n	800d698 <__ieee754_sqrt+0xd0>
 800d71c:	7ff00000 	.word	0x7ff00000

0800d720 <_init>:
 800d720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d722:	bf00      	nop
 800d724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d726:	bc08      	pop	{r3}
 800d728:	469e      	mov	lr, r3
 800d72a:	4770      	bx	lr

0800d72c <_fini>:
 800d72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d72e:	bf00      	nop
 800d730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d732:	bc08      	pop	{r3}
 800d734:	469e      	mov	lr, r3
 800d736:	4770      	bx	lr
